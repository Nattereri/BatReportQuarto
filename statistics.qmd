---
title: "Statistics"
format: 
  html:
     code-fold: true
     code-summary: "Show the code"
number-sections: true
---

```{r}
#| include=FALSE

library(knitr)
library(tidyverse)
library(iBats)
library(gt)
library(flextable)
library(dunn.test)
library(broom)

```

Statistical tests are undertaken to improve ecological understanding, separating the single from the noise. It enhances the ecological description when writing reports, making the report more evidenced based and therefore more robust and reproducible by others. When the data is not clear, or there is too much data to see, good statistics brings comprehension. Then there is a tendency to perceive connections or meaningful patterns between unrelated or random things, termed apophenia; here statistical testing can demonstrate it is random or unrelated.


## Individual Species Activity

### An Obvious Difference 

The `statics` data in the `iBats` package has some interesting Barbastelle (_Barbastella barbastellus_) bat activity, it would be interesting and aid  our understanding if we compare the activity between static locations and see if they are significantly different. 

Before undertaking any statistical test always visualise the data the statistical test is applied to. Barbastelle has been recorded at several locations see @fig-kwbarb.

The average bat pass rate per hour can been calculated for each night and each static location using the formula: 

$$
AverageActivity = \frac{Batpasses}{Nightlength}
$$

Where: 
_Batpasses_ = number of bat pass during the night at the location   
_Nightlength_ = length of the night in decimal hours  
_AverageActivity_ = average (mean) number of bat passes per hour for each night there was activity   




```{r}
#| label: fig-kwbarb
#| fig-cap: "Barbastelle Activity at Each Static (Nightly Average Passes per Hour)"


# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.
statics_plus <- iBats::sun_night_metrics(statics_plus)


graph_data <- statics_plus %>%
    filter(Species == "Barbastella barbastellus") %>% 
    group_by(Description, Night, night_length_hr) %>%
    # count number of passes per night by species - makes coloumn "n""
    tally() %>% 
    # calculate average bat passes per hour for each Night and species
    mutate(ave_act_per_hr = n / night_length_hr) %>%
    # Remove Night Length column from the Table
    select(-night_length_hr, -n) 

ggplot(graph_data, aes(y = ave_act_per_hr, x = Description)) +
                  geom_jitter(fill = "#1f78b4", #Barbastelle colour
                              colour = "black", 
                              shape = 23, 
                              alpha = 0.7, 
                              size = 3) +
                  geom_boxplot(colour = "grey30", fill = "transparent") + 
                  labs(y = "Barbastelle Activity  \n(Nightly Average Passes per Hour)") +
                  theme_bw() + 
                  theme(legend.position = "none", # No legend
                  axis.text.x = element_text(size=12, face="bold"), 
                  axis.text.y = element_text(size=12,face="bold"), 
                  axis.title.y = element_text(face="bold"), 
                  axis.title.x = element_blank(), # no y title (just bat names)
                  panel.grid.major = element_blank(), #remove grid lines
                  panel.grid.minor = element_blank())



```

The comparison of locations is undertaken with the Mann-Whitney-Wilcoxon or Kruskal-Wallis test. The Kruskal–Wallis test is a rank-based test that is similar to the Mann-Whitney-Wilcoxon test but can be applied to one-way data with more than two groups. If there are just two locations the Mann-Whitney-Wilcoxon test is applied. The Kruskal–Wallis test may be used when there are only two samples, but the Mann-Whitney-Wilcoxon is more powerful for two samples and is preferred.  Both tests assume that the observations are independent.  The probability threshold for statistical significance, which should always be chosen before the test is undertaken, is: P < 0.05.

* __The Null Hypothesis:__ bat pass rates per hour are from distributions with the same median.

* __The Alternative Hypothesis:__ bat pass rates per hour are from distributions with a different median.

The function `kruskal.test`, from base R, is used to undertake the Kruskal-Wallis test. A rule of thumb for the Kruskal–Wallis test is each group, (in this case case the number of nightly average bats pace vales for each static location) must have a sample size of 5 or more. 

```{r}

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.
statics_plus <- iBats::sun_night_metrics(statics_plus)


test_data <- statics_plus %>%
  filter(Species == "Barbastella barbastellus") %>%
  group_by(Description, Night, night_length_hr) %>%
  # count number of passes per night by species - makes coloumn "n""
  tally() %>%
  # calculate average bat passes per hour for each Night and species
  mutate(ave_act_per_hr = n / night_length_hr) %>%
  # Remove Night Length column from the Table
  select(-night_length_hr, -n)


# Check at least 2 locations and a minimum of 5 observations per location
# Only do KW on locations with 5 or more observations
# if just two locations do Mann Whitney
check_data <- test_data %>%
  group_by(Description) %>%
  tally()

# filter for Statics with more than 5 values
StaticsWithPlus5 <- check_data %>%
  filter(n >= 5) %>%
  pull(Description)

test_data <- test_data %>%
  filter(Description %in% StaticsWithPlus5)

# Extract the p-value from the kruskal.test
stat_pvalue <- kruskal.test(ave_act_per_hr ~ Description, data = test_data)$p.value

```

With reference to @fig-kwbarb there are several static locations where the activity can be compared, this is more than two locations, therefore the Kruskal-Wallis test is undertaken rather than the Mann-Whitney-Wilcoxon test. Location 1 with only three results is excluded from the test.   

The Kruskal-Wallis test  undertaken for the Barbastelle at the following static locations: `r knitr::combine_words(StaticsWithPlus5)` produced a P value (`r formatC(stat_pvalue, format = "e", digits = 2)`) less than the chosen threshold for statistical significance of 0.05; therefore the null hypothesis is rejected, activity between some static locations is likely to be different.   

What the Kruskal-Wallis test does not indicate, is which static locations are different; to determine this we need to undertake _post hoc_ testing, this can be undertaken with the Dunn’s Test.  

```{r}
#| include: false

dunn_result <- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = "bonferroni")

```

```{r}
#| eval: false

dunn_result <- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = "bonferroni")

```


Results of the Dunn’s test, performed after the Kruskal-Wallis test (_post hoc_), are shown in @tbl-dunns.


```{r}
#| label: tbl-dunns
#| tbl-cap: "Results of Post-hoc testing with the Dunn’s Test"


df <- tibble(dunn_result$comparisons, dunn_result$P.adjusted)

colnames(df) <- c("Comparison", "P.adj")

resultsTable <- df %>%
  filter(P.adj < 0.05) %>%
  select(`Locations with a significant difference (P<0.05)` = Comparison, `adjusted P ` = P.adj)

resultsTable %>%
  flextable(col_keys = colnames(.)) %>%
  fontsize(part = "header", size = 12) %>%
  fontsize(part = "body", size = 12) %>%
  bold(part = "header") %>%
  autofit(add_w = 0.1, add_h = 0.1) %>%
  bg(bg = "black", part = "header") %>%
  color(color = "white", part = "header") %>%
  align(align = "center", part = "header") %>%
  align(j = 2, align = "right", part = "body") %>%
  bold(j = 1, bold = TRUE, part = "body")     
```

The Dunn’s Test carries out multiple comparisons therefore a P value adjustment needs to be made to avoid a false significant result. For this P value adjustment the Bonferroni method is applied; a simple technique for controlling the overall probability of a false significant result when multiple comparisons are to be carried out.

@tbl-dunns gives the results of the _post hoc_ testing with the Dunn’s test and shows that Barbastelle activity at Location 4 is significantly different (at P<0.05) to activity at Locations 2, 3, and 5.  

The statistical tests show that Barbastelle bat activity recorded at Location 4 is significantly different; this knowledge is evidence based and can be stated with confidence when reporting. 


### Less Obvious Difference 

@fig-kwpip shows Common pipistrelle activity for the static locations comparison of activity can be undertaken with the Kruskal-Wallis test with the following hypothesis:

* __The Null Hypothesis:__ bat pass rates per hour are from distributions with the same median.

* __The Alternative Hypothesis:__ bat pass rates per hour are from distributions with a different median.

```{r}
#| label: fig-kwpip
#| fig-cap: "Common Pipistrelle Activity at Each Static (Nightly Average Passes per Hour)"


# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.
statics_plus <- iBats::sun_night_metrics(statics_plus)


graph_data <- statics_plus %>%
    filter(Species == "Pipistrellus pipistrellus") %>% 
    group_by(Description, Night, night_length_hr) %>%
    # count number of passes per night by species - makes coloumn "n""
    tally() %>% 
    # calculate average bat passes per hour for each Night and species
    mutate(ave_act_per_hr = n / night_length_hr) %>%
    # Remove Night Length column from the Table
    select(-night_length_hr, -n) 

ggplot(graph_data, aes(y = ave_act_per_hr, x = Description)) +
                  geom_jitter(fill = "#ffff99", #Common Pipistrelle colour
                              colour = "black", 
                              shape = 23, 
                              alpha = 0.7, 
                              size = 3) +
                  geom_boxplot(colour = "grey30", fill = "transparent") + 
                  labs(y = "Common Pipistrelle Activity  \n(Nightly Average Passes per Hour)") +
                  theme_bw() + 
                  theme(legend.position = "none", # No legend
                  axis.text.x = element_text(size=12, face="bold"), 
                  axis.text.y = element_text(size=12,face="bold"), 
                  axis.title.y = element_text(face="bold"), 
                  axis.title.x = element_blank(), # no y title (just bat names)
                  panel.grid.major = element_blank(), #remove grid lines
                  panel.grid.minor = element_blank())



```


```{r}

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.
statics_plus <- iBats::sun_night_metrics(statics_plus)


test_data <- statics_plus %>%
  filter(Species == "Pipistrellus pipistrellus") %>%
  group_by(Description, Night, night_length_hr) %>%
  # count number of passes per night by species - makes coloumn "n""
  tally() %>%
  # calculate average bat passes per hour for each Night and species
  mutate(ave_act_per_hr = n / night_length_hr) %>%
  # Remove Night Length column from the Table
  select(-night_length_hr, -n)


# Check at least 2 locations and a minimum of 5 observations per location
# Only do KW on locations with 5 or more observations
# if just two locations do Mann Whitney
check_data <- test_data %>%
  group_by(Description) %>%
  tally()

# filter for Statics with more than 5 values
StaticsWithPlus5 <- check_data %>%
  filter(n >= 5) %>%
  pull(Description)

test_data <- test_data %>%
  filter(Description %in% StaticsWithPlus5)

# Extract the p-value from the kruskal.test
stat_pvalue <- kruskal.test(ave_act_per_hr ~ Description, data = test_data)$p.value

```
The Kruskal-Wallis test undertaken for the Common pipistrelle at the following static locations: `r knitr::combine_words(StaticsWithPlus5)` produced a P value (`r formatC(stat_pvalue, format = "e", digits = 2)`) less than the chosen threshold for statistical significance of 0.05; therefore the null hypothesis is rejected, activity between some static locations is likely to be different. The Dunn’s test can be applied to determine the static locations that are different. 


```{r}
#| include: false

dunn_result <- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = "bonferroni")

```

```{r}
#| eval: false

dunn_result <- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = "bonferroni")

```


Results of the Dunn’s test, performed after the Kruskal-Wallis test (_post hoc_), are shown in @tbl-dunns2.


```{r}
#| label: tbl-dunns2
#| tbl-cap: "Results of Post-hoc testing with the Dunn’s Test"


df <- tibble(dunn_result$comparisons, dunn_result$P.adjusted)

colnames(df) <- c("Comparison", "P.adj")

resultsTable <- df %>%
  filter(P.adj < 0.05) %>%
  select(`Locations with a significant difference (P<0.05)` = Comparison, `adjusted P ` = P.adj)

resultsTable %>%
  flextable(col_keys = colnames(.)) %>%
  fontsize(part = "header", size = 12) %>%
  fontsize(part = "body", size = 12) %>%
  bold(part = "header") %>%
  autofit(add_w = 0.1, add_h = 0.1) %>%
  bg(bg = "black", part = "header") %>%
  color(color = "white", part = "header") %>%
  align(align = "center", part = "header") %>%
  align(j = 2, align = "right", part = "body") %>%
  bold(j = 1, bold = TRUE, part = "body")     
```

@tbl-dunns2 gives the results of the _post hoc_ testing with the Dunn’s test; post P value adjustment with the Bonferroni method showing:

* Common pipistrelle activity at static 4 is significantly different (at P<0.05) to all the other static locations.  
* Common pipistrelle activity at static 1 is significantly different to static locations 2, 3 and 4.  The significant difference (at P<0.05) between static 1 and static 3 is not easily determined from @fig-kwpip.  
* Common pipistrelle activity at static 2, static 3, and static 5 are not significantly different (at P<0.05).


## Bat Assemblage

The assessment of individual species ignores the fact there is also the species assemblage; the taxonomically related group of species (i.e. bats) occupying the same geographical area at the same time. The assemblage of bat species can be explored using __multivariate methods__.

For most surveys the number of species observed is greater than one, making it a biological assemblage. We can relate this assemblage to other factors such as _location, habitat, time, weather, etc._
Multivariate analysis gives a way of exploring the bat assemblage differences with respect to factors such as the location/habitat or month/year or combination of both.

### Cluster Analysis

@tbl-table04 shows a summary matrix of bat passes per species for each static (i.e. location)  We would like to know which locations are similar/dissimilar. 


```{r}
#| label: tbl-table04
#| tbl-cap: "Matrix of Location by Species"


Tab_L_S <- statics %>% # Location - Species
  group_by(Species, Description) %>% 
  count() 

maxValue <- max(Tab_L_S$n, na.rm = T)

Tab_L_S <- Tab_L_S %>% 
  pivot_wider(names_from = Species, values_from = n) %>% 
  replace(is.na(.), 0)

ncols <- ncol(Tab_L_S)

#Make coloured palette
colourer <- scales::col_numeric(
  palette = c("transparent", "forestgreen"),
  domain = c(0, maxValue))

Tab_L_S %>% 
  flextable() %>% 
    bold(part = "header") %>% 
    bg(bg = "black", part = "header") %>% 
    color(color = "white", part = "header") %>% 
    rotate(j = 2:ncols, rotation = "tbrl", align = "center", part = "header") %>% 
    height_all(height = 2.3, part = "header") %>% 
    hrule(rule = "exact", part = "header") %>%
    bg(bg = colourer, j = 2:ncols, part = "body") %>%
    width(j = 2:ncols, width = 0.4) %>% 
    width(j = 1, width = 0.8)

```


In multivariate analysis the pre-treament of data (sometimes in more than one way) is usually desirable. For assemblage data, _transformations_ will reduce the dominant contribution of abundant species (i.e. all those pips). Transformations include (None, Square root, Fourth root, Log(X+1), Presence/absence). @tbl-table05 shows @tbl-table04 transformed with the species $\sqrt[2]{count}$.

```{r}
#| warning: false
#| label: tbl-table05
#| tbl-cap: "Transformed Matrix"

SpeciesC <- Tab_L_S %>% 
  ungroup() %>% 
  select(2:ncol(.)) %>% 
  mutate_all(funs(sqrt(.)))

Table <- SpeciesC %>% 
  mutate_all(funs(round(., 2)))

Matrix <- Tab_L_S %>%
  ungroup() %>% 
  select(Description) %>% 
  bind_cols(SpeciesC)


MatrixTable <- Tab_L_S %>%
  ungroup() %>% 
  select(Description) %>% 
  bind_cols(Table)

Matrix <- data.matrix(Matrix[, 2:ncol(Matrix)])

r_names <- Tab_L_S %>%
  ungroup() %>% 
  pull(Description)

rownames(Matrix) <- r_names

ncols <- ncol(MatrixTable)

#Make coloured palette
colourer <- scales::col_numeric(
  palette = c("transparent", "forestgreen"),
  domain = c(0, maxValue))

MatrixTable %>% 
  flextable() %>% 
    bold(part = "header") %>% 
    bg(bg = "black", part = "header") %>% 
    color(color = "white", part = "header") %>% 
    rotate(j = 2:ncols, rotation = "tbrl", align = "center", part = "header") %>% 
    height_all(height = 2.3, part = "header") %>% 
    hrule(rule = "exact", part = "header") %>%
    bg(bg = colourer, j = 2:ncols, part = "body") %>%
    width(j = 2:ncols, width = 0.4) %>% 
    width(j = 1, width = 0.8)

```

To assess the differences of activity (in the bat assemblage) between locations (or months, habitat, etc.) we measure the distance between every point of activity with every other point. So activity (e.g. a median or count) at one location for a species is compared(measured) with every other activity for all the species and locations.

There are many _distance_ measurements to investigate species similarity/dissimilarity^[note it is the dissimilarity that is used, 1- similarity]:   

* _Euclidean distance_ natural distance between two points  
* _Manhattan distance_ walking around a New York block  
* _Bray-Curtis_ a dissimilarity very useful for ecologists  

For species similarities it may be worth considering the removal of the rarer species (_i.e. the less observed_) and repeating the analysis. 

In this example the _Bray-Curtis_ distance measurement has been applied to @tbl-table05 to produce the Bray-Curtis dissimilarity matrix in @tbl-table06.

```{r}
#| warning: false
#| label: tbl-table06
#| tbl-cap: "Bray-Curtis Dissimilarity Matrix"

library(vegan)

dist_bray <- vegdist(Matrix, method="bray")

dist_df <- tibble(dist_bray)

fmt2 <- function(dist_num) {
  
  temp <- as.character(dist_num)
  
  stringr::str_sub(temp, 1L, 7L)
  
}

c1 <- c("Static 2", "Static 3", "Static 4", "Static 5")
c2 <- c(fmt2(dist_df[1,1]), fmt2(dist_df[2,1]), fmt2(dist_df[3,1]), fmt2(dist_df[4,1]))
c3 <- c(" ", fmt2(dist_df[5,1]), fmt2(dist_df[6,1]), fmt2(dist_df[7,1]))
c4 <- c(" ", " ", fmt2(dist_df[8,1]), fmt2(dist_df[9,1]))
c5 <- c(" ", " ", " ", fmt2(dist_df[10,1]))

dist_tbl <- tibble(c1, c2, c3, c4, c5)

colnames(dist_tbl) <- c(" ", "Static 1", "Static 2", "Static 3", "Static 4")

ft <- dist_tbl
ncols <- ncol(ft)

ft %>% 
  flextable() %>% 
    bold(part = "header") %>% 
    bold(j=1, part = "body") %>% 
    bg(bg = "black", part = "header") %>% 
    bg(j=1, bg = "black", part = "body") %>% 
    color(color = "white", part = "header") %>% 
    color(j=1, color = "white", part = "body")
    
```



The Bray-Curtis dissimilarity matrix can be used in many multivariate methods; here the matix is used in _Hierarchical Clustering_. Hierarchical clustering is useful because it can create a tree-based representation of the observations called a dendrogram; that is easy to interpret visually.  The dendrogram from the Bray-Curtis dissimilarity matrix in @tbl-table06 is shown in @fig-graph21. 

```{r}
#| label: fig-graph21
#| fig-cap: "Dendrogram Between Static Locations"

# Hierarchical cluster function hclust
hc_bray <- hclust(dist_bray, method = "complete")

# Always visualse
library(ggdendro)
#Creates Dendrogram Plot Using ggplot.
ggdendrogram(hc_bray, rotate = TRUE, size = 2) +
  labs(title = "Static Location - Complete Cluster - Bray-Curtis")

dhc <- as.dendrogram(hc_bray)


```


Clustering refers to a very broad set of techniques for finding subgroups, or _clusters_, in a data set.  Clustering involves grouping a set of objects in such a way that objects in the same group (called a cluster) are more similar (in some sense) to each other than to those in other groups (clusters). Referring to the dendrogram in @fig-graph21 the lower in the tree fusions occur, the more similar the groups of observations are to each other. While observations that fuse later, near the top of the tree, can be considered less similar.  

For @fig-graph21 we can see that for the bat assemblage:  

* Statics 3 & 2 are similar
* Statics 1 & 5 are similar
* Static 4 is more similar to Statics 2 & 3 than Statics 1 & 5
* Statics 2 & 3 and Statics 1 & 5 are more similar to Static 4 -  than Statics 2 & 3 and Statics 1 & 5 are to each other   


Note, the dendrogram is illustrative and we cannot draw conclusions about the degree of similarity of two observations based on their proximity along the vertical axis.

This is just an introduction to _Hierarchical Clustering_, there are many variations and other types of clustering (e.g. _k-means_). Key variations for hierarchical clustering are:

* distance measurement used e.g.  Bray-Curtis, Euclidean, etc.
* type of linkage e.g. complete, average, single or centroid.

### K-Means Clustering

K-means clustering is a simple approach for partitioning a data set into **_K_** distinct non-overlapping clusters. To perform **_K_** means clustering we must specify the desired number of clusters first.  The code below applies k-means clustering to the Bray-Curtis dissimilarity matrix in @tbl-table06 with **_K=2_**.

```{r}
#| code-fold: show

result_km <- kmeans(dist_bray, centers = 2)
```


```{r}
#| label: tbl-kmcluster
#| tbl-cap: "k-means Cluster and Location"

clusters <- tibble(names(result_km$cluster), result_km$cluster)

colnames(clusters) <- c("Location", "Cluster")

clusters %>% 
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  cols_width(everything() ~ px(150))
```

```{r}
#| label: tbl-kmtidy
#| tbl-cap: "Summary on a Per-Cluster Level"

tidy(result_km) %>% 
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  )

```


```{r}
#| label: tbl-kmglance
#| tbl-cap: "k-means Overall Summary Statistics"
glance(result_km) %>% 
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  )
```



The output of `kmeans` is a list of information; the most important:

* `cluster`: @tbl-kmcluster & @tbl-kmtidy A vector of integers (from 1:K) indicating the cluster to which each point is allocated.
* `centers`: A matrix of cluster centers.
* `totss`: @tbl-kmglance The total sum of squares.
* `withinss`: @tbl-kmtidy Vector of within-cluster sum of squares, one component per cluster.
* `tot.withinss`: @tbl-kmglance Total within-cluster sum of squares, i.e. sum(withinss).
* `betweenss`: @tbl-kmglance The between-cluster sum of squares, i.e. $totss-tot.withinss$.
* `size`: The number of points in each cluster.
* `iter`: @tbl-kmglance The number of (outer) iterations.


```{r}
#| include: false

# https://www.tidymodels.org/learn/statistics/k-means/
```

