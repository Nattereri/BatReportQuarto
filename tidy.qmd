---
title: "Tidy Data"
format: 
  html:
     code-fold: true
     code-summary: "Show the code"
bibliography: references.bib
number-sections: true
---

```{r}
#| include: false

set.seed(214)

```

*Tidy Data* is a consistent way to organise your data [@wickham_tidy_2014]. Getting your data into this format requires some initial work, but that effort pays off in the long term. Once you have tidy data you will spend *less* time wrangling data from one representation to another, allowing you to spend more time on the analytic questions at hand. Unfortunately, there is a rule of thumb; 80% of time doing data science is spent wrangling data; particularly the effort required in sorting and rearranging the data into the *tidy* and therefore usable format.

There are three interrelated rules which make a data set tidy see @fig-threerules:

-   Each variable must have its own column.
-   Each observation must have its own row.
-   Each value must have its own cell.

![Rules for Tidy Data](Images/TidyDataBats.PNG){#fig-threerules}

## Minimal Data Requirement

To undertake meaningful data analysis, it is recommended that data collected from bat activity surveys is wrangled into *tidy data* that has the following five variables (columns) as a minimum:

-   Description
-   DateTime
-   Species
-   Latitude
-   Longitude

The rationale for these variables is as follows:

`Description` a column to help identify the observation for example a location, surveyor or survey number.

`DateTime`: the date and time of the bat observation to BS ISO 8601:2004 i.e. `yyyymmdd hh:mm:ss`. The use of BS ISO 8601:2004 prevents confusion over the date format [^1] . Reference bat activity to the local time and specifying an *iana*[^2] time zone allows for daylight saving times to considered; the *iana* code for the UK is `Europe/London`.

[^1]: the standard is recommended by .gov.uk<https://www.gov.uk/government/publications/open-standards-for-government/date-times-and-time-stamps-standard>

[^2]: a full list of time zones can be found here <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>

`Species`: bat species names should follow the "binomial nomenclature" from the International Code of Zoological Nomenclature (ICZN)[^3] - e.g. *Barbastella barbastellus*, *Eptesicus serotinus*, etc... A column of local common names can always be added to the *tidy* data, i.e. in a separate column see Appendix 8. Sound analysis may not be able to distinguish calls to species level; in practice some calls may only be identified to genus or less; Table \@ref(tab:table04) gives a practical and consistent guide to naming[^4].

[^3]: <https://www.iczn.org/the-code/the-international-code-of-zoological-nomenclature/the-code-online/>

[^4]: Adapted from the Ecobat guide.

`Longitude` and `Latitude`: World Geodetic System 1984[^5] (WGS84); as used by Google earth. A digital, numeric, format should be used. Any other spatial reference system can be used (e.g. British National Grid Easting/Northing), as this can be stored as an extra column in the *tidy data*, the prerequisite is that the reference system can be converted to WGS84; which is the case for most national or state co-ordinate systems. Using a global co-ordinate system such as WSG84 give access to the many open-source application programming interfaces (API) available that assist with data analysis (e.g. assessing sunset and sunrise times or the adjustment to daylight saving).

[^5]: <https://en.wikipedia.org/wiki/World_Geodetic_System>

## Making Bat Data *Tidy*

Results of bat sound analysis can be untidy:

-   two or more species in one cell (see @tbl-untidy1);
-   count of bats (@tbl-untidy2); 
-   two of more columns with species of same date and time (@tbl-untidy3);
-   code names for species rather than the binomial nomenclature (@tbl-tidied1); and,
-   Longitude and Latitude columns with missing values (@tbl-missinglonlat)

While the bat survey results shown in @tbl-tidy is an example of a *tidy* data set; the data shown in @tbl-untidy1, @tbl-untidy2, @tbl-untidy3, @tbl-tidied1 and, @tbl-missinglonlat are *untidy* and would need to be made tidy to undertake analysis.

Data preparation is not just a first step but must be repeated many times over during analysis; as new problems come to light, or new data is collected. Making bat data into a *tidy format*, involves cleaning data: parsing dates and numbers, identifying missing values, correcting character encoding, matching similar but not identical values (such as those created by typos); it is an essential step, takes time to do and makes subsequent steps in the analysis much easier.

```{r}
#| warning: false
#| message: false
#| label: tbl-tidy
#| tbl-cap: "Tidy Bat data"

library(tidyverse)
library(iBats)
library(gt)

statics %>% # statics is a tidy data set from the iBats package
  select(Description, DateTime, Species, Latitude, Longitude) %>%
  sample_n(10) %>%
  arrange(DateTime) %>%
  # Table made with gt()
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
    ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>%
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
    ),
    locations = cells_body(
      columns = c(Species)
    )
  )

```

### Too Many Species in a Cell

```{r}
#| warning: false
#| message: false
#| label: tbl-untidy1
#| tbl-cap: "Untidy Bat Data Too Many Species in a Cell"

library(gt)
library(iBats)

# Table made with gt()
untidy1 %>%
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
    ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  )

```

Too many species in a cell, as in @tbl-untidy1, can be made tidy by expanding the data so each species observed is in it's own row, using the function `tidyr::separate_rows(Species)`; as shown below in @tbl-tidied1. Note that this data has _untidy_ bat names; these are corrected in @sec-scinames. The `untidy1` data is example untidy data available from the *iBats* package.

```{r}
#| warning: false
#| message: false
#| code-fold: show
#| label: tbl-tidied1
#| tbl-cap: "Tidied Bat Data from Too Many Species in a Cell"

### Libraries Used
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/
library(gt) # Makes table

# Install devtools if not installed
# devtools is used to install the iBats package from GitHub
if (!require(devtools)) {
  install.packages("devtools")
}

# If iBats is not installed load from Github
if (!require(iBats)) {
  devtools::install_github("Nattereri/iBats")
}
library(iBats)

untidy1 %>%
  tidyr::separate_rows(Species) %>%
  # Table made with gt()
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
    ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  )

```

### A Column of Bat Counts

```{r}
#| warning: false
#| message: false
#| label: tbl-untidy2
#| tbl-cap: "Untidy Bat Data a Column Giving the Number of Bat Passes"

library(gt)
library(iBats)

# Table made with gt()
untidy2 %>%
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
    ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  )


```

A count of species, as in @tbl-untidy2, can be made tidy by un-counting the data so each species observed is in it's own row, using the function `tidyr::uncount(Number)`; as shown below in @tbl-tidied2. The `untidy2` data is example untidy data available from the *iBats* package.

```{r}
#| code-fold: show
#| label: tbl-tidied2
#| tbl-cap: "Tidied Bat Data with the Column Bats Un-counted"

### Libraries Used
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/
library(gt) # Makes table

# Install devtools if not installed
# devtools is used to install the iBats package from GitHub
if (!require(devtools)) {
  install.packages("devtools")
}

# If iBats is not installed load from Github
if (!require(iBats)) {
  devtools::install_github("Nattereri/iBats")
}
library(iBats)

untidy2 %>%
  tidyr::uncount(Number) %>%
  # Table made with gt()
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
    ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  )

```

### Two or More Columns of Bat Species

```{r}
#| warning: false
#| message: false
#| label: tbl-untidy3
#| tbl-cap: "Two or More Columns of Bat Species"

library(gt)
library(iBats)

# Table made with gt()
untidy3 %>%
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
    ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  )
```

Several columns of species, as in @tbl-untidy3, can be made tidy by making separate data.frames and binding them together so each species observed is in it's own row; as shown below in @tbl-tidied3. The `untidy3` data is example untidy data available from the *iBats* package.

```{r}
#| code-fold: show
#| warning: false
#| message: false
#| label: tbl-tidied3
#| tbl-cap: "Tidied Bat Data with Two or More Columns put into One"

### Libraries Used
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/

# Install devtools if not installed
# devtools is used to install the iBats package from GitHub
if (!require(devtools)) {
  install.packages("devtools")
}

# If iBats is not installed load from Github
if (!require(iBats)) {
  devtools::install_github("Nattereri/iBats")
}
library(iBats)

# Select Species column and remove (Species2nd & Species3rd)
data1 <- untidy3 %>%
  select(-Species2nd, -Species3rd)

# Select Species2nd column and remove (Species & Species3rd)
data2 <- untidy3 %>%
  select(-Species, -Species3rd) %>%
  filter(Species2nd != "") %>% # Remove blank rows
  rename(Species = Species2nd) # Rename column

# Select Species3rd column and remove (Species & Species2nd)
data3 <- untidy3 %>%
  select(-Species, -Species2nd) %>%
  filter(Species3rd != "") %>% # Remove blank rows
  rename(Species = Species3rd) # Rename column

# Add the datasets together into one
dplyr::bind_rows(data1, data2, data3) %>%
  # Table made with gt()
  gt() %>%
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
    ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) 

```


### Convert Bat Names to Scientific {#sec-scinames}

@tbl-tidied1 is still *untidy* because the bat species are represented as codes and not in a binomial nomenclature(scientific name). The `iBats::make_scientific()` function can take a named vector of codes and the scientific name; such as the `BatScientific` vector below. The case of the bat name codes are ignored; they are all converted to lower case.

```{r}
#| code-fold: show

BatScientific <- c("nyclei" = "Nyctalus leisleri",
                   "nycnoc" = "Nyctalus noctula",
                   "pippip" = "Pipistrellus pipistrellus",
                   "pipnat" = "Pipistrellus nathusii",
                   "pippyg" = "Pipistrellus pygmaeus",
                   "45 pip" = "Pipistrellus pipistrellus",
                   "55 pip" = "Pipistrellus pygmaeus",
                   "bleb" = "Plecotus auritus",
                   # If already a scientific name keep it
                   "myotis daubentonii" = "Myotis daubentonii") 

```

The `BatScientific` vector is then used to covert the survey vector of bat names (the Species column in @tbl-tidied1) so they are all scientific; using the `iBats::make_scientific()` function. The `BatScientific` can be expanded to cover many names and codes, if there are duplicate names or codes a conversion will not take place for that name or code. The tidied data with scientific species names is shown in @tbl-tidied4

```{r}
#| code-fold: show
#| warning: false
#| message: false


### Libraries Used 
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/

# Install devtools if not installed 
# devtools is used to install the iBats package from GitHub
if(!require(devtools)){
  install.packages("devtools")
}

# If iBats is not installed load from Github
if(!require(iBats)){
  devtools::install_github("Nattereri/iBats")
}
library(iBats)

# Remove too many species in a cell
tidied1 <- untidy1 %>%
  tidyr::separate_rows(Species)

tidied1$Species <- iBats::make_scientific(BatScientific, tidied1$Species)

```

```{r}
#| label: tbl-tidied4
#| tbl-cap: "Tidied Data with Scientific Names"

library(gt)
# Table made with gt()
tidied1 %>% 
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(Species)
  )) 

```

### Missing Latitude and Longitude Values

The `BatExplorer` data in the *iBats* package (see @tbl-missinglonlat), was recorded on an evening transect bat detector survey. The data has missing longitude and latitude values, shown as `NA` and is not uncommon when the Global Positioning System (GPS) is trying to calculate its position beneath trees or in a steep valley.

```{r}
#| label: tbl-missinglonlat
#| tbl-cap: "Missing Longitude and Latitude Values (NA)"

### Libraries Used 
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/
library(iBats)
library(gt)

# BatExplorer csv file is from the iBats package
BatExplorer %>% 
  head(n=15L)  %>% 
  select(DateTime = Timestamp, 
         Species = `Species Text`, 
         Latitude = `Latitude [WGS84]`,
         Longitude = `Longitude [WGS84]`) %>% 
  # Table made with gt()
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(Species)
  )) 



```

The longitude and latitude gives a position of the bat observation and is also used to determine sunset and sunrise; and if the values are not completed then these observations would be excluded from the analysis. A simple estimate of the missing longitude and latitude can be made by arranging the data in date/time order and using the function:  

`tidyr::fill(c(Latitude, Longitude), .direction = "downup")` 

This fills the missing values from the nearest complete values; first down and then up.  The filled data is shown in @tbl-filledlonlat.


```{r}
#| code-fold: show
#| warning: false
#| message: false
#| eval: false


### Libraries Used
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/

# Install devtools if not installed
# devtools is used to install the iBats package from GitHub
if (!require(devtools)) {
  install.packages("devtools")
}

# If iBats is not installed load from Github
if (!require(iBats)) {
  devtools::install_github("Nattereri/iBats")
}
library(iBats)

# BatExplorer csv file is from the iBats package
BatExplorer %>%
  head(n = 15L) %>%
  select(
    DateTime = Timestamp,
    Species = `Species Text`,
    Latitude = `Latitude [WGS84]`,
    Longitude = `Longitude [WGS84]`
  ) %>%
  arrange(DateTime) %>% 
  tidyr::fill(c(Latitude, Longitude), .direction = "downup")

```

```{r}
#| label: tbl-filledlonlat
#| tbl-cap: "Filled Longitude and Latitude Values"

# BatExplorer csv file is from the iBats package
BatExplorer %>% 
  head(n=15L)  %>% 
  select(DateTime = Timestamp, 
         Species = `Species Text`, 
         Latitude = `Latitude [WGS84]`,
         Longitude = `Longitude [WGS84]`) %>% 
  fill(Latitude, .direction = "downup") %>%
    fill(Longitude, .direction = "downup") %>% 
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(Species)
  )) 



```


```

