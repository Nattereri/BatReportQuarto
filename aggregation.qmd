---
title: "Aggregation"
format: 
  html:
     code-fold: true
     code-summary: "Show the code"
number-sections: true
---

```{r}
#| include: false

library(knitr)
library(tidyverse)
library(iBats)
library(broman)
library(gt)
library(flextable)
library(officer)

#Levels
month_levels <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")

month_levels_full <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")

```

Data aggregation is one of the pillars of data analysis, the process where *tidy* data (plus meta data) is gathered or grouped and then expressed in summary form. Bat survey data tends to be aggregated in two ways:

1.  over a given time period, or
2.  spatially for locations or a factor related to a location (e.g. woodland)

The bat survey data `statics` in the `iBats` package has `r add_commas(nrow(statics))` bat observations; a random selection of 5 rows is shown in @tbl-aggtidy.

```{r}
#| label: tbl-aggtidy
#| tbl-cap: "Statics Bat Survey Data (5 random selected rows)"

statics %>% # statics is a tidy data set from the iBats package
  sample_n(5) %>% 
  arrange(DateTime) %>% 
  # Table made with gt
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(Species)
    )
  )
```


## Count of Bats

The simplest form of aggregation is a count of bats[^1]; as shown in @tbl-simplecount

[^1]: note:- in this case it is a count of bat passes

```{r}
#| label: tbl-simplecount
#| tbl-cap: "A Count by Species"

# Libraries (Packages) used
library(tidyverse)
library(iBats)
library(gt)

statics %>%
  group_by(Species) %>% 
  count() %>% 
  #arrange descending
  arrange(desc(n)) %>% 
  # rename n as count
  rename(`Bat Species` = Species, Count = n) %>% 
  # so table is produced with individual species on one row
  ungroup() %>% 
  # Table made gt()
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(`Bat Species`)
    )
  )
  
```

More informative tables can be made by adding meta data such as the Month and Year of the observations. This is easy done on a *tidy data* conforming to the *minimal data requirement* with the `date_time_info` function in the `iBats` package. @tbl-countannex2 shows the monthly count (bat passes) of *Annex II* species[^2]; .



```{r}
#| label: tbl-countannex2
#| tbl-cap: "A Count of Annex II Bats Grouped by Month"

# Libraries (Packages) used
library(tidyverse)
library(iBats)
library(flextable)
library(officer)

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Vector of month names used in the factor function
month_levels_full <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")

# re-order months column with rev so months run top to bottom of the table
statics_plus <- statics_plus %>%
   mutate(MonthFull = factor(MonthFull, levels = rev(month_levels_full), ordered = T))

AnnexII <- c("Barbastella barbastellus", "Rhinolophus ferrumequinum", "Rhinolophus hipposideros")

table_border <- fp_border(color = "black", width = 1) # from library(officer)

statics_plus %>%
  filter(Species %in% AnnexII) %>%
  group_by(MonthFull, Species) %>%
  count() %>%
  # arrange descending
  arrange(desc(MonthFull)) %>%
  # rename n as count
  rename(Month = MonthFull, `Bat Species` = Species, Count = n) %>%
  # Table made with flextable
  flextable(col_keys = colnames(.)) %>%
  italic(j = 2, italic = TRUE, part = "body") %>% 
  fontsize(part = "header", size = 12) %>%
  fontsize(part = "body", size = 12) %>%
  colformat_double(j = "Count", digits = 4, big.mark = ",") %>%
  width(j = 1, width = 2) %>%
  width(j = 2, width = 2.5) %>%
  width(j = 3, width = 1) %>%
  merge_v(j = 1) %>%
  border_inner_h(part = "body", border = table_border) %>%
  hline_bottom(part = "body", border = table_border) %>%
  bg(bg = "black", part = "header") %>%
  color(color = "white", part = "header")
  
```

Tables of numbers can be frustrating to read. To help readability the table can be annotated highlighting the count on a colour scale linked to the magnitude of the result. This is shown in @tbl-countannex2c for the count of bats shown in @tbl-countannex2.

```{r}
#| label: tbl-countannex2c
#| tbl-cap: "A Count (Highlighted) of Annex II Bats Grouped by Month"

# Libraries (Packages) used
library(tidyverse)
library(flextable)
library(officer)
library(iBats)

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Vector of month names used in the factor function
month_levels_full <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")

# re-order months column with rev so months run top to bottom of the table
statics_plus <- statics_plus %>%
   mutate(MonthFull = factor(MonthFull, levels = rev(month_levels_full), ordered = T))

AnnexII <- c("Barbastella barbastellus", "Rhinolophus ferrumequinum", "Rhinolophus hipposideros")

table_border <- fp_border(color = "black", width = 1) # from library(officer)

table_data <- statics_plus %>%
  filter(Species %in% AnnexII) %>%
  group_by(MonthFull, Species) %>%
  count() %>%
  # arrange descending
  arrange(desc(MonthFull)) %>%
  # rename n as count
  rename(Month = MonthFull, `Bat Species` = Species, Count = n) 

# Find max and min counts
maxCount <- max(table_data$Count, na.rm = T)
minCount <- min(table_data$Count, na.rm = T)

#Make coloured palette
colourer <- scales::col_numeric(
  palette = c("transparent", "orangered2"),
  domain = c(minCount, maxCount)) 

# Table made with flextable
table_data %>% 
  flextable(col_keys = colnames(.)) %>%
  italic(j = 2, italic = TRUE, part = "body") %>% 
  fontsize(part = "header", size = 12) %>%
  fontsize(part = "body", size = 12) %>%
  colformat_double(j = "Count", digits = 4, big.mark = ",") %>%
  width(j = 1, width = 2) %>%
  width(j = 2, width = 2.5) %>%
  width(j = 3, width = 1) %>%
  merge_v(j = 1) %>%
  # Scale colour to count
  bg(bg = colourer, j = "Count", part = "body") %>%
  border_inner_h(part = "body", border = table_border) %>%
  hline_bottom(part = "body", border = table_border) %>%
  bg(bg = "black", part = "header") %>%
  color(color = "white", part = "header")
  
```


## Summary Statistics  


Summary statistics for the Common pipistrelle (_Pipistrellus pipistrellus_) observations at all `static` locations for each night is shown in @tbl-sumstatcount; to make the table easier to read, the median column is highlighted with a graduated colour scale.  The summary statistics are calculated with the `favstats` function from the `mosaic` package.

```{r}
#| label: tbl-sumstatcount
#| tbl-cap: "Common Pipstrelle Observations (Passes) at the Static Locations"
#| warning: false

# Libraries (Packages) used
library(tidyverse)
library(mosaic)
library(gt)
library(gtExtras)
library(iBats)

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Group by Description and Night and Count the Observations
grouped_data <- statics_plus %>% 
  filter(Species == "Pipistrellus pipistrellus") %>% 
  group_by(Description, Night) %>% 
  tally()

# The summary statistics are saved into a variable riven_cond_stats 
cond_stats <- favstats(n~Description, data = grouped_data)

# riven_cond_stats is made into a the table (using the code below)
cond_stats %>% 
  # Create the table with the gt package
  gt() %>% 
  # Style the header to black fill and white text
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  gt_color_rows(median, palette = "ggsci::yellow_material")

```

@tbl-monspec shows the summary statistics for Annex II Bat Species[^2] observations by month; with the maximum number of nightly bat passes highlighted. The table can be grouped by Month through switching `Common` and `MonthFull` names in the code below; this alternative table is shown in @tbl-monspecb with the mean (average) number of nightly bat passes highlighted.

[^2]: <https://ec.europa.eu/environment/nature/conservation/species/habitats_dir_en.htm>

```{r}
#| label: tbl-monspec
#| tbl-cap: "Nightly Species Observations (Passes) by Month"
#| warning: false

# Libraries (Packages) used
library(tidyverse)
library(mosaic)
library(gt)
library(gtExtras)
library(iBats)

# Annex II Bats (in the static)
AnnexII <- c("Barbastella barbastellus", "Rhinolophus ferrumequinum", "Rhinolophus hipposideros")

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# List of bat common names and the scientific names
BatCommon <- c(
  "Barbastella barbastellus" = "Barbastelle",
  "Rhinolophus ferrumequinum" = "Greater horseshoe",
  "Rhinolophus hipposideros" = "Lesser horseshoe")

# From Scientific name create a Common Name Vector 
statics_plus$Common <-  unname(BatCommon[statics_plus$Species])

# Group by Description and Night and Count the Observations
grouped_data <- statics_plus %>% 
  filter(Species %in% AnnexII) %>%
  group_by(Common, MonthFull, Night) %>% 
  tally() %>% 
  summarise(Minimum = round(min(n, na.rm = T), 2),
              Q1 = round(quantile(n, c(0.25), na.rm = T), 2),
              Mean = round(mean(n, na.rm = T), 2),
              Median = round(median(n, na.rm = T), 2),
              Q3 = round(quantile(n, c(0.75), na.rm = T), 2),
              Maximum = round(max(n, na.rm = T), 2),
              SD = round(sd(n, na.rm = T), 2),
              Nr = n())

# riven_cond_stats is made into a the table (using the code below)
grouped_data %>% 
  # Create the table with the gt package
  gt(rowname_col = "MonthFull",
    groupname_col = "Common") %>% 
  # Style the header to black fill and white text
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  tab_style(
    style = list(
      cell_fill(color = "midnightblue"),
      cell_text(color = "white"),
      cell_text(weight = "normal")
      ),
    locations = cells_body(
      columns = MonthFull
    )) %>% 
  gt_color_rows(Maximum, palette = "ggsci::purple_material")

```


```{r}
#| label: tbl-monspecb
#| tbl-cap: "Nightly Species Observations by Month (Alternative Grouping)"
#| warning: false

# Libraries (Packages) used
library(tidyverse)
library(mosaic)
library(gt)
library(gtExtras)
library(iBats)

# Annex II Bats (in the static)
AnnexII <- c("Barbastella barbastellus", "Rhinolophus ferrumequinum", "Rhinolophus hipposideros")

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# List of bat common names and the scientific names
BatCommon <- c(
  "Barbastella barbastellus" = "Barbastelle",
  "Rhinolophus ferrumequinum" = "Greater horseshoe",
  "Rhinolophus hipposideros" = "Lesser horseshoe")

# From Scientific name create a Common Name Vector 
statics_plus$Common <-  unname(BatCommon[statics_plus$Species])

# Group by Description and Night and Count the Observations
grouped_data <- statics_plus %>% 
  filter(Species %in% AnnexII) %>%
  group_by(Common, MonthFull, Night) %>% 
  tally() %>% 
  summarise(Minimum = round(min(n, na.rm = T), 2),
              Q1 = round(quantile(n, c(0.25), na.rm = T), 2),
              Mean = round(mean(n, na.rm = T), 2),
              Median = round(median(n, na.rm = T), 2),
              Q3 = round(quantile(n, c(0.75), na.rm = T), 2),
              Maximum = round(max(n, na.rm = T), 2),
              SD = round(sd(n, na.rm = T), 2),
              Nr = n())



# riven_cond_stats is made into a the table (using the code below)
grouped_data %>% 
  # Create the table with the gt package
  gt(rowname_col = "Common",
    groupname_col = "MonthFull") %>% 
  # Style the header to black fill and white text
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  gt_color_rows(Mean, palette = "ggsci::green_material")

```

