[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Reporting Bat Survey Data complements the data science chapters of the forthcoming BCT Bat Survey Guidelines 4th Edition. Unlike the guidelines it has the R code making the analysis; which can be copied and used.\nThese web pages are written by Steve Markham, Director and Data Scientist at Marquis & Lord Ltd. Over my 40-year career I have developed and used software applications in water management and more recently, the last 15 years; applied data science to a wide range of projects using the R software environment. I have held a Natural England Roost Visitors Licence since 1997, and Survey and Research Licence Level 2; undertaking numerous commercial bat projects and voluntary bat work, including being a Trustee of the Bat Conservation Trust from 2012 to 2021. As a Fellow of the Royal Statistical Society I advocate the importance of statistics and data. As a member of the editorial board of all editions of the Bat Survey Guidelines1, I encourage ecologists to make the most of their bat survey data; these web pages hopefully make it easier to do this, and more rewarding - its good for bats!\nThis web site also introduces the iBats package2. iBats is a package with a range of functions that hopefully enhances and smooths the data science of bat data collected from bat detectors post sound identification.\nFinally a special thanks to the bat workers who have put up with my incessant data talk, especially: Amanda, Anna, Kevin, Liat, Phil, Richard and Suzy. Plus Lisa who introduced me to GTD and better time management."
  },
  {
    "objectID": "about.html#footnotes",
    "href": "about.html#footnotes",
    "title": "About",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThere have been four editions (2007, 2012, 2016 and 2023), For the 4th edition (due early 2023), the sections on bat survey design and data analysis were completely revised to incorporate a data science approach to bat surveys: tidy data, data aggregation, visualization, statistical analysis, and reproducibility. The current version of the Bat Survey Guidelines can be found here: https://www.bats.org.uk/resources/guidance-for-professionals/bat-surveys-for-professional-ecologists-good-practice-guidelines-3rd-edition↩︎\nthe iBats package is held on GitHub: https://github.com/Nattereri/iBats↩︎"
  },
  {
    "objectID": "aggregation.html",
    "href": "aggregation.html",
    "title": "Aggregation",
    "section": "",
    "text": "Data aggregation is one of the pillars of data analysis, the process where tidy data (plus meta data) is gathered or grouped and then expressed in summary form. Bat survey data tends to be aggregated in two ways:\nThe bat survey data statics in the iBats package has 6,930 bat observations; a random selection of 5 rows is shown in Table 1.\nShow the code\nstatics %&gt;% # statics is a tidy data set from the iBats package\n  sample_n(5) %&gt;% \n  arrange(DateTime) %&gt;% \n  # Table made with gt\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n    )\n  ) %&gt;% \n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime)\n\n\n\n\n\n\n\n\nTable 1: Statics Bat Survey Data (5 random selected rows)\n\n\nDescription\nDateTime\nSpecies\nLongitude\nLatitude\n\n\n\n\nStatic 2\n2016-05-31 00:04:24\nPipistrellus pipistrellus\n-3.592583\n50.33323\n\n\nStatic 4\n2016-07-28 22:51:15\nPipistrellus pipistrellus\n-3.591878\n50.33141\n\n\nStatic 4\n2016-08-04 03:47:04\nPipistrellus pipistrellus\n-3.591748\n50.33136\n\n\nStatic 4\n2016-08-25 01:11:21\nPipistrellus pipistrellus\n-3.591768\n50.33133\n\n\nStatic 2\n2016-08-29 21:55:12\nPipistrellus pipistrellus\n-3.592583\n50.33323"
  },
  {
    "objectID": "aggregation.html#count-of-bats",
    "href": "aggregation.html#count-of-bats",
    "title": "Aggregation",
    "section": "1 Count of Bats",
    "text": "1 Count of Bats\nThe simplest form of aggregation is a count of bats1; as shown in Table 2\n\n\nShow the code\n# Libraries (Packages) used\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(gt)\n\nstatics %&gt;%\n  group_by(Species) %&gt;% \n  count() %&gt;% \n  #arrange descending\n  arrange(desc(n)) %&gt;% \n  # rename n as count\n  rename(`Bat Species` = Species, Count = n) %&gt;% \n  # so table is produced with individual species on one row\n  ungroup() %&gt;% \n  # Table made gt()\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(`Bat Species`)\n    )\n  ) %&gt;% \n  tab_options(data_row.padding = px(2)) \n\n\n\n\n\n\n\n\nTable 2: A Count by Species\n\n\nBat Species\nCount\n\n\n\n\nPipistrellus pipistrellus\n4972\n\n\nMyotis spp.\n435\n\n\nBarbastella barbastellus\n419\n\n\nNyctalus noctula\n315\n\n\nPipistrellus spp.\n283\n\n\nRhinolophus ferrumequinum\n160\n\n\nPlecotus spp.\n136\n\n\nPipistrellus pygmaeus\n86\n\n\nRhinolophus hipposideros\n73\n\n\nPipistrellus nathusii\n32\n\n\nEptesicus serotinus\n12\n\n\nNyctalus leisleri\n3\n\n\nMyotis nattereri\n2\n\n\nNyctalus spp.\n2\n\n\n\n\n\n\n\n\nMore informative tables can be made by adding meta data such as the Month and Year of the observations. This is easy done on a tidy data conforming to the minimal data requirement with the date_time_info function in the iBats package. Table 3 shows the monthly count (bat passes) of Annex II species2; .\n\n\nShow the code\n# Libraries (Packages) used\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(flextable)\nlibrary(officer)\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Vector of month names used in the factor function\nmonth_levels_full &lt;- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\")\n\n# re-order months column with rev so months run top to bottom of the table\nstatics_plus &lt;- statics_plus %&gt;%\n   mutate(MonthFull = factor(MonthFull, levels = rev(month_levels_full), ordered = T))\n\nAnnexII &lt;- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\ntable_border &lt;- fp_border(color = \"black\", width = 1) # from library(officer)\n\nstatics_plus %&gt;%\n  filter(Species %in% AnnexII) %&gt;%\n  group_by(MonthFull, Species) %&gt;%\n  count() %&gt;%\n  # arrange descending\n  arrange(desc(MonthFull)) %&gt;%\n  # rename n as count\n  rename(Month = MonthFull, `Bat Species` = Species, Count = n) %&gt;%\n  # Table made with flextable\n  flextable(col_keys = colnames(.)) %&gt;%\n  italic(j = 2, italic = TRUE, part = \"body\") %&gt;% \n  fontsize(part = \"header\", size = 12) %&gt;%\n  fontsize(part = \"body\", size = 12) %&gt;%\n  colformat_double(j = \"Count\", digits = 4, big.mark = \",\") %&gt;%\n  width(j = 1, width = 2) %&gt;%\n  width(j = 2, width = 2.5) %&gt;%\n  width(j = 3, width = 1) %&gt;%\n  merge_v(j = 1) %&gt;%\n  border_inner_h(part = \"body\", border = table_border) %&gt;%\n  hline_bottom(part = \"body\", border = table_border) %&gt;%\n  bg(bg = \"black\", part = \"header\") %&gt;%\n  color(color = \"white\", part = \"header\")\n\n\n\n\nTable 3:  A Count of Annex II Bats Grouped by Month MonthBat SpeciesCountMayBarbastella barbastellus7Rhinolophus ferrumequinum9Rhinolophus hipposideros10JuneBarbastella barbastellus198Rhinolophus ferrumequinum47Rhinolophus hipposideros11JulyBarbastella barbastellus49Rhinolophus ferrumequinum7Rhinolophus hipposideros4AugustBarbastella barbastellus109Rhinolophus ferrumequinum31Rhinolophus hipposideros23SeptemberBarbastella barbastellus9Rhinolophus ferrumequinum64Rhinolophus hipposideros17OctoberBarbastella barbastellus47Rhinolophus ferrumequinum2Rhinolophus hipposideros8\n\n\n\nTables of numbers can be frustrating to read. To help readability the table can be annotated highlighting the count on a colour scale linked to the magnitude of the result. This is shown in Table 4 for the count of bats shown in Table 3.\n\n\nShow the code\n# Libraries (Packages) used\nlibrary(tidyverse)\nlibrary(flextable)\nlibrary(officer)\nlibrary(iBats)\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Vector of month names used in the factor function\nmonth_levels_full &lt;- c(\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\")\n\n# re-order months column with rev so months run top to bottom of the table\nstatics_plus &lt;- statics_plus %&gt;%\n   mutate(MonthFull = factor(MonthFull, levels = rev(month_levels_full), ordered = T))\n\nAnnexII &lt;- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\ntable_border &lt;- fp_border(color = \"black\", width = 1) # from library(officer)\n\ntable_data &lt;- statics_plus %&gt;%\n  filter(Species %in% AnnexII) %&gt;%\n  group_by(MonthFull, Species) %&gt;%\n  count() %&gt;%\n  # arrange descending\n  arrange(desc(MonthFull)) %&gt;%\n  # rename n as count\n  rename(Month = MonthFull, `Bat Species` = Species, Count = n) \n\n# Find max and min counts\nmaxCount &lt;- max(table_data$Count, na.rm = T)\nminCount &lt;- min(table_data$Count, na.rm = T)\n\n#Make coloured palette\ncolourer &lt;- scales::col_numeric(\n  palette = c(\"transparent\", \"orangered2\"),\n  domain = c(minCount, maxCount)) \n\n# Table made with flextable\ntable_data %&gt;% \n  flextable(col_keys = colnames(.)) %&gt;%\n  italic(j = 2, italic = TRUE, part = \"body\") %&gt;% \n  fontsize(part = \"header\", size = 12) %&gt;%\n  fontsize(part = \"body\", size = 12) %&gt;%\n  colformat_double(j = \"Count\", digits = 4, big.mark = \",\") %&gt;%\n  width(j = 1, width = 2) %&gt;%\n  width(j = 2, width = 2.5) %&gt;%\n  width(j = 3, width = 1) %&gt;%\n  merge_v(j = 1) %&gt;%\n  # Scale colour to count\n  bg(bg = colourer, j = \"Count\", part = \"body\") %&gt;%\n  border_inner_h(part = \"body\", border = table_border) %&gt;%\n  hline_bottom(part = \"body\", border = table_border) %&gt;%\n  bg(bg = \"black\", part = \"header\") %&gt;%\n  color(color = \"white\", part = \"header\")\n\n\n\n\nTable 4:  A Count (Highlighted) of Annex II Bats Grouped by Month MonthBat SpeciesCountMayBarbastella barbastellus7Rhinolophus ferrumequinum9Rhinolophus hipposideros10JuneBarbastella barbastellus198Rhinolophus ferrumequinum47Rhinolophus hipposideros11JulyBarbastella barbastellus49Rhinolophus ferrumequinum7Rhinolophus hipposideros4AugustBarbastella barbastellus109Rhinolophus ferrumequinum31Rhinolophus hipposideros23SeptemberBarbastella barbastellus9Rhinolophus ferrumequinum64Rhinolophus hipposideros17OctoberBarbastella barbastellus47Rhinolophus ferrumequinum2Rhinolophus hipposideros8"
  },
  {
    "objectID": "aggregation.html#summary-statistics",
    "href": "aggregation.html#summary-statistics",
    "title": "Aggregation",
    "section": "2 Summary Statistics",
    "text": "2 Summary Statistics\nSummary statistics for the Common pipistrelle (Pipistrellus pipistrellus) observations at all static locations for each night is shown in Table 5; to make the table easier to read, the median column is highlighted with a graduated colour scale. The summary statistics are calculated with the favstats function from the mosaic package.\n\n\nShow the code\n# Libraries (Packages) used\nlibrary(tidyverse)\nlibrary(mosaic)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(iBats)\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Group by Description and Night and Count the Observations\ngrouped_data &lt;- statics_plus %&gt;% \n  filter(Species == \"Pipistrellus pipistrellus\") %&gt;% \n  group_by(Description, Night) %&gt;% \n  tally()\n\n# The summary statistics are saved into a variable riven_cond_stats \ncond_stats &lt;- favstats(n~Description, data = grouped_data)\n\n# riven_cond_stats is made into a the table (using the code below)\ncond_stats %&gt;% \n  # Create the table with the gt package\n  gt() %&gt;% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  gt_color_rows(median, palette = \"ggsci::yellow_material\") %&gt;% \n  tab_options(data_row.padding = px(2)) \n\n\n\n\n\n\n\n\nTable 5: Common Pipstrelle Observations (Passes) at the Static Locations\n\n\nDescription\nmin\nQ1\nmedian\nQ3\nmax\nmean\nsd\nn\nmissing\n\n\n\n\nStatic 1\n1\n1.0\n2\n3.5\n73\n6.391304\n15.570190\n23\n0\n\n\nStatic 2\n1\n6.0\n10\n17.5\n42\n12.031746\n8.820738\n63\n0\n\n\nStatic 3\n1\n3.5\n6\n11.0\n40\n9.740741\n10.323955\n27\n0\n\n\nStatic 4\n10\n33.5\n78\n155.5\n438\n115.129032\n121.519749\n31\n0\n\n\nStatic 5\n1\n4.0\n7\n9.0\n31\n8.103448\n6.586484\n29\n0\n\n\n\n\n\n\n\n\nTable 6 shows the summary statistics for Annex II Bat Species3 observations by month; with the maximum number of nightly bat passes highlighted. The table can be grouped by Month through switching Common and MonthFull names in the code below; this alternative table is shown in Table 7 with the mean (average) number of nightly bat passes highlighted.\n\n\nShow the code\n# Libraries (Packages) used\nlibrary(tidyverse)\nlibrary(mosaic)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(iBats)\n\n# Annex II Bats (in the static)\nAnnexII &lt;- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# List of bat common names and the scientific names\nBatCommon &lt;- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\")\n\n# From Scientific name create a Common Name Vector \nstatics_plus$Common &lt;-  unname(BatCommon[statics_plus$Species])\n\n# Group by Description and Night and Count the Observations\ngrouped_data &lt;- statics_plus %&gt;% \n  filter(Species %in% AnnexII) %&gt;%\n  group_by(Common, MonthFull, Night) %&gt;% \n  tally() %&gt;% \n  summarise(Minimum = round(min(n, na.rm = T), 2),\n              Q1 = round(quantile(n, c(0.25), na.rm = T), 2),\n              Mean = round(mean(n, na.rm = T), 2),\n              Median = round(median(n, na.rm = T), 2),\n              Q3 = round(quantile(n, c(0.75), na.rm = T), 2),\n              Maximum = round(max(n, na.rm = T), 2),\n              SD = round(sd(n, na.rm = T), 2),\n              Nr = n())\n\n# riven_cond_stats is made into a the table (using the code below)\ngrouped_data %&gt;% \n  # Create the table with the gt package\n  gt(rowname_col = \"MonthFull\",\n    groupname_col = \"Common\") %&gt;% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = MonthFull\n    )) %&gt;% \n  gt_color_rows(Maximum, palette = \"ggsci::purple_material\") %&gt;% \n  tab_options(data_row.padding = px(2)) \n\n\n\n\n\n\n\n\nTable 6: Nightly Species Observations (Passes) by Month\n\n\n\nMinimum\nQ1\nMean\nMedian\nQ3\nMaximum\nSD\nNr\n\n\n\n\nBarbastelle\n\n\nMay\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n\n\nJune\n1\n1.50\n18.00\n18.0\n31.50\n42\n15.67\n11\n\n\nJuly\n4\n5.75\n8.17\n8.0\n10.25\n13\n3.43\n6\n\n\nAugust\n1\n3.00\n7.27\n6.0\n8.00\n22\n6.13\n15\n\n\nSeptember\n1\n1.00\n1.80\n1.0\n2.00\n4\n1.30\n5\n\n\nOctober\n4\n5.00\n6.71\n6.0\n7.00\n13\n2.98\n7\n\n\nGreater horseshoe\n\n\nMay\n2\n2.50\n3.00\n3.0\n3.50\n4\n1.00\n3\n\n\nJune\n1\n1.50\n3.13\n3.0\n4.00\n7\n1.81\n15\n\n\nJuly\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n\n\nAugust\n1\n1.00\n2.07\n2.0\n3.00\n6\n1.39\n15\n\n\nSeptember\n3\n3.25\n10.67\n4.0\n6.25\n43\n15.91\n6\n\n\nOctober\n1\n1.00\n1.00\n1.0\n1.00\n1\n0.00\n2\n\n\nLesser horseshoe\n\n\nMay\n1\n1.00\n2.50\n1.5\n3.00\n6\n2.38\n4\n\n\nJune\n1\n1.00\n1.38\n1.0\n2.00\n2\n0.52\n8\n\n\nJuly\n1\n1.50\n2.00\n2.0\n2.50\n3\n1.41\n2\n\n\nAugust\n1\n1.00\n2.30\n1.5\n3.00\n6\n1.70\n10\n\n\nSeptember\n1\n1.50\n2.43\n3.0\n3.00\n4\n1.13\n7\n\n\nOctober\n1\n1.00\n2.67\n1.0\n3.50\n6\n2.89\n3\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Libraries (Packages) used\nlibrary(tidyverse)\nlibrary(mosaic)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(iBats)\n\n# Annex II Bats (in the static)\nAnnexII &lt;- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# List of bat common names and the scientific names\nBatCommon &lt;- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\")\n\n# From Scientific name create a Common Name Vector \nstatics_plus$Common &lt;-  unname(BatCommon[statics_plus$Species])\n\n# Group by Description and Night and Count the Observations\ngrouped_data &lt;- statics_plus %&gt;% \n  filter(Species %in% AnnexII) %&gt;%\n  group_by(Common, MonthFull, Night) %&gt;% \n  tally() %&gt;% \n  summarise(Minimum = round(min(n, na.rm = T), 2),\n              Q1 = round(quantile(n, c(0.25), na.rm = T), 2),\n              Mean = round(mean(n, na.rm = T), 2),\n              Median = round(median(n, na.rm = T), 2),\n              Q3 = round(quantile(n, c(0.75), na.rm = T), 2),\n              Maximum = round(max(n, na.rm = T), 2),\n              SD = round(sd(n, na.rm = T), 2),\n              Nr = n())\n\n\n\n# riven_cond_stats is made into a the table (using the code below)\ngrouped_data %&gt;% \n  # Create the table with the gt package\n  gt(rowname_col = \"Common\",\n    groupname_col = \"MonthFull\") %&gt;% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  gt_color_rows(Mean, palette = \"ggsci::green_material\") %&gt;% \n  tab_options(data_row.padding = px(2)) \n\n\n\n\n\n\n\n\nTable 7: Nightly Species Observations by Month (Alternative Grouping)\n\n\n\nMinimum\nQ1\nMean\nMedian\nQ3\nMaximum\nSD\nNr\n\n\n\n\nMay\n\n\nBarbastelle\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n\n\nGreater horseshoe\n2\n2.50\n3.00\n3.0\n3.50\n4\n1.00\n3\n\n\nLesser horseshoe\n1\n1.00\n2.50\n1.5\n3.00\n6\n2.38\n4\n\n\nJune\n\n\nBarbastelle\n1\n1.50\n18.00\n18.0\n31.50\n42\n15.67\n11\n\n\nGreater horseshoe\n1\n1.50\n3.13\n3.0\n4.00\n7\n1.81\n15\n\n\nLesser horseshoe\n1\n1.00\n1.38\n1.0\n2.00\n2\n0.52\n8\n\n\nJuly\n\n\nBarbastelle\n4\n5.75\n8.17\n8.0\n10.25\n13\n3.43\n6\n\n\nGreater horseshoe\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n\n\nLesser horseshoe\n1\n1.50\n2.00\n2.0\n2.50\n3\n1.41\n2\n\n\nAugust\n\n\nBarbastelle\n1\n3.00\n7.27\n6.0\n8.00\n22\n6.13\n15\n\n\nGreater horseshoe\n1\n1.00\n2.07\n2.0\n3.00\n6\n1.39\n15\n\n\nLesser horseshoe\n1\n1.00\n2.30\n1.5\n3.00\n6\n1.70\n10\n\n\nSeptember\n\n\nBarbastelle\n1\n1.00\n1.80\n1.0\n2.00\n4\n1.30\n5\n\n\nGreater horseshoe\n3\n3.25\n10.67\n4.0\n6.25\n43\n15.91\n6\n\n\nLesser horseshoe\n1\n1.50\n2.43\n3.0\n3.00\n4\n1.13\n7\n\n\nOctober\n\n\nBarbastelle\n4\n5.00\n6.71\n6.0\n7.00\n13\n2.98\n7\n\n\nGreater horseshoe\n1\n1.00\n1.00\n1.0\n1.00\n1\n0.00\n2\n\n\nLesser horseshoe\n1\n1.00\n2.67\n1.0\n3.50\n6\n2.89\n3"
  },
  {
    "objectID": "aggregation.html#footnotes",
    "href": "aggregation.html#footnotes",
    "title": "Aggregation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nnote:- in this case it is a count of bat passes↩︎\nhttps://ec.europa.eu/environment/nature/conservation/species/habitats_dir_en.htm↩︎\nhttps://ec.europa.eu/environment/nature/conservation/species/habitats_dir_en.htm↩︎"
  },
  {
    "objectID": "dynamic.html",
    "href": "dynamic.html",
    "title": "Interactive Reports",
    "section": "",
    "text": "Interactive charts and tables offer many advantages over static representations of data. Interactive charts and tables enable exploration of data in a more engaging way, charts can be zoomed (in and out), tables filtered and data points compared. This makes it easier to find patterns and trends, and to identify outliers. There use should lead to more accurate conclusions and insights."
  },
  {
    "objectID": "dynamic.html#maps",
    "href": "dynamic.html#maps",
    "title": "Interactive Reports",
    "section": "1 Maps",
    "text": "1 Maps\n\n1.1 Lydford School Transect\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(leaflet)\n\n# Pallet of colours for bat species on Leaflet map\n# Leaflet  bat colours\nLeafColours&lt;- c(\"#ffff99\",\n                  \"#b15928\",\n                  \"#1f78b4\",\n                  \"#A52A2A\",\n                  \"#7FFF00\",\n                  \"#b2df8a\",\n                  \"#6a3d9a\",\n                  \"#ff7f00\",\n                  \"#a6cee3\",\n                  \"#BCEE68\",\n                  \"#8B0000\",\n                  \"#8B0000\",\n                  \"#000000\",\n                  \"#8A2BE2\",\n                  \"#fdbf6f\",\n                  \"#e31a1c\",\n                  \"#33a02c\",\n                  \"#cab2d6\",\n                  \"#fb9a99\",\n                  \"#EEE8CD\",\n                  \"#008B8B\",\n                  \"#000000\")\n\n# Species list for colours\nSpecies &lt;- c(\"Pipistrellus pipistrellus\",\n             \"Pipistrellus pygmaeus\",\n             \"Barbastella barbastellus\",\n             \"Myotis alcathoe\",\n             \"Myotis bechsteinii\",\n             \"Myotis brandtii\",\n             \"Myotis mystacinus\",\n             \"Myotis nattereri\",\n             \"Myotis daubentonii\",\n             \"Myotis spp.\",\n             \"Plecotus auritus\",\n             \"Plecotus spp.\",\n             \"Plecotus austriacus\",\n             \"Pipistrellus nathusii\",\n             \"Pipistrellus spp.\",\n             \"Rhinolophus ferrumequinum\",\n             \"Rhinolophus hipposideros\",\n             \"Nyctalus noctula\",\n             \"Nyctalus leisleri\",\n             \"Nyctalus spp.\",\n             \"Eptesicus serotinus\",\n             \"Pipistrelle Social\")\n\nColourVector &lt;- tibble(Species, LeafColours)\n\nColourVector &lt;- ColourVector %&gt;% \n  arrange(Species)\n\npal &lt;- colorFactor(ColourVector$LeafColours, domain = ColourVector$Species)\n\nLydford %&gt;%\n    mutate(Popup_text = stringr::str_c(Common, # Make popup text string\n                                       \" \",\n                                       as.character(round(post_set_min, 0)), \n                                       \" minutes after sunset\")) %&gt;% \n    leaflet() %&gt;% \n    addTiles() %&gt;% \n    addCircleMarkers(\n      lng = ~Longitude, lat = ~Latitude,\n      radius = 7,\n      color = ~pal(Species),\n      stroke = TRUE, fillOpacity = 0.7,\n      popup = ~Popup_text, label = ~Popup_text\n    )\n\n\n\n\n\nFigure 1: Bat Observations From Lydford School’s Bat Walk\n\n\n\nFigure 1 shows Lydford Primary School’s bat walk observations from Wednesday evening 18th September 2019. The walk, between the School and the River Lyd, on the western edge of Dartmoor, started at sunset 6:27pm and continued for just over an hour. The observations were made with a Batlogger M bat detector that records the sound of the bat as it passes together with the time and postion; using a built-in Global Positioning System (GPS). These sounds where then analysed with software designed to help determine which species made the echolocation; BatExplorer was the software used.\nFigure 1 is an interactive map; hovering the mouse over the coloured point will show the species and the time, in minutes, after sunset the bat was observed.\nThe data shown in Figure 1, Lydford is available from the iBats package."
  },
  {
    "objectID": "dynamic.html#graphs",
    "href": "dynamic.html#graphs",
    "title": "Interactive Reports",
    "section": "2 Graphs",
    "text": "2 Graphs\n\n2.1 Making ggplot Interactive\nPlotly1 allows easy translation of ggplot2 graphics into an interactive web-based version. Hovering the mouse over a graph point will reveal the bat species, the time bat was recorded and the length in seconds of the activity. The graph can be copied to the clipboard plus zoomed and panned; the home symbol will reset the axes. The corresponding bubble chart for the TavyOak data produced entirely in Plotly is shown in Figure 6.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n# graph anotation\ngraph_sunrise &lt;- TavyOak$sunrise[1]\ngraph_sunset &lt;- TavyOak$sunset[1]\n\n# graph time limits x-axis\ngraph_limit1 &lt;- TavyOak$sunset[1] - lubridate::hours(1)\ngraph_limit2 &lt;- TavyOak$sunrise[1] + lubridate::hours(1)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours_default(TavyOak$Species)\n\np &lt;- TavyOak %&gt;% \n  rename(`Date & Time` = DateTime,\n         `Bat species` = Species,\n         `Activity time (secs)` = bat_time) %&gt;% \n  ggplot(aes(x = `Date & Time`, \n                      y = 1, \n                      fill = `Bat species`, \n                      size = `Activity time (secs)`)) +\n  geom_jitter(shape = 21, alpha = 0.7) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  scale_x_datetime(\n    date_labels = \"%H:%M hrs\",\n    date_breaks = \"1 hour\",\n    limits = c(graph_limit1, graph_limit2)\n  ) +\n  labs(\n    title = \"One Night's Bat Activity \\nAt a West Devon Oak Tree - June 2018\",\n    y = \"For clarity activity is spread across the verstical scale\"\n  ) +\n  theme_bw() +\n  theme(\n    plot.margin = margin(1, 1, 1, 1, \"cm\"),\n    legend.position = \"none\",\n    panel.grid.major.x = element_line(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(fill = \"midnightblue\", colour = \"black\"),\n    axis.text.x = element_text(size = 12, angle = 45, colour = \"white\"),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 12, colour = \"white\"),\n    plot.title = element_text(size=16, colour = \"white\")\n  )\n\n# Make `ggplot` interactive\nggplotly(p) \n\n\n\n\n\nFigure 2: Time Bats Were Active Through The Night\n\n\n\n\n\n2.2 Bar Chart\nFigure 3 shows a bar chart of monthly activity, it was drawn with the plotly library2. Hovering the mouse over a bar will reveal the bat species and the number of bat passes; toggling the species name in the legend will remove (or add) the species bar from the chart. At any view the graph can be downloaded as a .png file.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n# Annex II Species of Bat in the UK\nAnnexII &lt;- c(\"Barbastella barbastellus\", \n             \"Rhinolophus ferrumequinum\", \n             \"Rhinolophus hipposideros\", \n             \"Myotis bechsteinii\")\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics) %&gt;% \n   filter(Species %in% AnnexII)\n\nstatics_plus %&gt;% \n  count(MonthFull, Species) %&gt;% \n  plot_ly(x = ~MonthFull, y = ~n, color = ~Species,\n          hoverinfo = \"text\",\n          text = ~paste(\"Species:\", Species, \"&lt;br&gt;\",\n                        \"Count:\", n)) %&gt;%\n  add_bars(colors = c(\"#1f78b4\", \"#e31a1c\", \"#33a02c\")) %&gt;%\n  layout(barmode = \"stack\",\n         xaxis = list(title=\"\"),\n         yaxis = list(title=\"Count of Bat Passes (Nr)\"))\n\n\n\n\n\nFigure 3: Monthly Activity of Annex II Species\n\n\n\nFigure 4 shows a bar chart of species activity relative to the static location, it was drawn with the plotly library3. Hovering the mouse over a bar will reveal the bat species and the number of bat passes; toggling the species name in the legend will remove (or add) the species bar from the chart. At any view the graph can be downloaded as a .png file.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n# bat species colours\nbat_colours_sci &lt;- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\nlocation_count &lt;- statics %&gt;% \n  count(Description, Species) \n\nlist_species &lt;- levels(factor(location_count$Species))\n\n# get a vector of colours from the bat_pass_counts data.frame\ncolors &lt;- unname(bat_colours_sci[list_species])\n\n\n  plot_ly(location_count, y = ~Description, x = ~n, color = ~Species,\n          orientation = 'h') %&gt;%\n  add_bars(colors = colors) %&gt;%\n  layout(barmode = \"stack\",\n         yaxis = list(title=\"\"),\n         xaxis = list(title=\"Count of Bat Passes (Nr)\"))\n\n\n\n\n\nFigure 4: Species Activity for Each Static Location\n\n\n\n\n\n2.3 Pie Chart\nFigure 5 shows a pie chart of bat passes, it was drawn with the plotly library4. Hovering the mouse over a bar will reveal the bat species and the number of bat passes; toggling the species name in the legend will remove (or add) the species slice from the chart. At any view the graph can be downloaded as a .png file.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# bat species colours\nbat_colours_sci &lt;- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n# count the number of pass per species\nbat_pass_counts &lt;- statics_plus %&gt;%\n  count(Species)\n\n# get a vector of colours from the bat_pass_counts data.frame\ncolors &lt;- unname(bat_colours_sci[bat_pass_counts$Species])\n\n# plot a pie chart with plotly\nplot_ly(bat_pass_counts,\n  labels = ~Species, values = ~n,\n  type = \"pie\",\n  marker = list(colors = colors)\n) %&gt;%\n  layout(\n    title = \"Bat Species Passes\",\n    xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n    yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)\n  )\n\n\n\n\n\nFigure 5: Interactive Pie Chart of Species Passes\n\n\n\n\n\n2.4 Bubble Chart\nThe coloured bubbles on Figure 6 show bats around a west Devon Oak tree, on the bottom scale is the hour after sunset the bat was observed The length of time the bat was present, in seconds, is expressed by the size of the bubble; a small bubble indicates the bat is likely to be travelling and a larger bubble could mean that the bat was feeding (foraging). Hovering the mouse over the coloured circle will give the bat name and number of seconds the bat was present. A similar graphic was produced in Figure 2 using ggplot which was converted to a plotly chart using ggplotly.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n\n# bat species colours\nbat_colours_sci &lt;- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\nxtitle &lt;- \"Hours After Sunset\"\nytitle &lt;- \"Circles spread across the axis so they can all be seen\"\n\nf1 &lt;- list(\n  family = \"Arial, sans-serif\",\n  size = 18,\n  color = \"lightgrey\"\n)\n\nay &lt;- list(title = ytitle, \n           showline = FALSE, \n           showticklabels = FALSE, \n           showgrid = TRUE,\n           titlefont = f1)\n\nax &lt;- list(title = xtitle,\n           titlefont = f1,\n           tickfont = f1)\n\n  \n  \nBubble &lt;- TavyOak %&gt;% \n    mutate(BatPass = jitter(rep(1, nrow(.))),\n           `Time post sunset (hours)` = round(post_set_hr, digits = 2),\n           `Recorded Activity (secs)`= round(bat_time, digits = 2),\n           `Species` = Species) %&gt;% \n    plot_ly(x = ~`Time post sunset (hours)`, y=~BatPass, alpha = 0.9,\n            hoverinfo = 'text',\n        text = ~paste(\" Bat Species:\", Common , \"&lt;br&gt;\",\n                      \"Length of bat activity (secs):\", bat_time)) %&gt;% \n    add_markers(color = ~`Species`, \n                colors = bat_colours_sci, \n                size = ~`Recorded Activity (secs)`, \n                sizes = c(50, 5000)) %&gt;%\n    layout(yaxis = ay, \n           xaxis = ax, \n           margin = list(l = 75, b =50), \n           paper_bgcolor='#000000', \n           plot_bgcolor='#191970') %&gt;%\n    hide_legend()\n\n\nsuppressWarnings(plotly_build(Bubble))\n\n\n\n\n\nFigure 6: Interactive Bubble Chart of Species Activity for the TavyOak Data"
  },
  {
    "objectID": "dynamic.html#tables",
    "href": "dynamic.html#tables",
    "title": "Interactive Reports",
    "section": "3 Tables",
    "text": "3 Tables\n\n3.1 datatable\nThe package datatable is used to create the interactive table below with the Lydford data from the iBats package.\n\npost_set_min- time in minutes the bat was observed after sun set\nbat_time - time in seconds the bat was observed\n\n\n\nShow the code\nLydford %&gt;% \n  select(DateTime, Species, post_set_min, bat_time) %&gt;% \n  mutate(post_set_min = round(post_set_min, 2)) %&gt;% \n  # show the data with datatable function from the DT packag\n  DT::datatable(options = list(pageLength = 10), \n                caption = 'Principal Lydford Transect Data')\n\n\n\n\n\n\n\n\n\n3.2 reactable\nThe package reactable is used to create the interactive table below with the statics data from the iBats package.\n\npost_set_min- time in minutes the bat was observed after sun set\n\n\n\nShow the code\n# https://glin.github.io/reactable/\n\nlibrary(tidyverse)\nlibrary(reactable)\nlibrary(iBats)\nlibrary(hms)\n\n\n\nAttaching package: 'hms'\n\n\nThe following object is masked from 'package:lubridate':\n\n    hms\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus) %&gt;%\n  select(Night, Location = Description, Month = MonthFull, Species, post_set_min) %&gt;%\n  mutate(post_set_min = as.integer(post_set_min))\n\n\nreactable(statics_plus,\n  defaultPageSize = 12,\n  filterable = TRUE,\n  searchable = TRUE,\n  bordered = TRUE,\n  highlight = TRUE,\n  defaultColDef = colDef(\n    header = function(value) gsub(\".\", \" \", value, fixed = TRUE),\n    cell = function(value) format(value, nsmall = 1),\n    align = \"center\",\n    format = colFormat(digits = 1),\n    minWidth = 60,\n    headerStyle = list(color = \"#000000\", background = \"#CCCCCC\")\n  ),\n  columns = list(\n    Location = colDef(sticky = \"left\", minWidth = 60, sortable = TRUE),\n    Night = colDef(minWidth = 60, sortable = TRUE, format = colFormat(date = TRUE, locales = \"en-GB\")),\n    Species = colDef(minWidth = 100, sortable = TRUE),\n    Month = colDef(minWidth = 60, sortable = TRUE),\n    post_set_min = colDef(sortable = TRUE)\n  )\n)"
  },
  {
    "objectID": "dynamic.html#footnotes",
    "href": "dynamic.html#footnotes",
    "title": "Interactive Reports",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee the htmlwidgets for R page https://www.htmlwidgets.org/showcase_plotly.html plus the plotly r reference https://plotly.com/ggplot2/.↩︎\nFor more information see https://plotly.com/r/bar-charts/↩︎\nFor more information see https://plotly.com/r/bar-charts/↩︎\nFor more information see https://plotly.com/r/pie-charts/↩︎"
  },
  {
    "objectID": "Glossary.html",
    "href": "Glossary.html",
    "title": "Glossary",
    "section": "",
    "text": "Pearson correlation is a statistical measure that assesses the strength and direction of a linear relationship between two variables. It is a number between -1 and 1, with a value of 0 indicating no correlation, a positive value indicating a positive correlation, and a negative value indicating a negative correlation.\nThe Pearson correlation coefficient is calculated by dividing the covariance of the two variables by the product of their standard deviations. The covariance is a measure of how much the two variables vary together, and the standard deviation is a measure of how much each variable varies from its mean.\nThe Pearson correlation coefficient can be used to make predictions about one variable from the other. For example, if the correlation between height and weight is 0.7, then we can predict that someone who is 6 feet tall will weigh about 180 pounds.\nThe Pearson correlation coefficient is a useful tool for understanding the relationship between two variables. However, it is important to note that it is only a measure of linear correlation. There may be other relationships between two variables that are not linear, and the Pearson correlation coefficient will not be able to detect them.\nHere are some of the advantages of using Pearson correlation:\n\nIt is a simple and easy-to-calculate measure of correlation.\nIt is widely used and accepted by most statisticians.\nIt can be used to make predictions about one variable from the other.\n\nHere are some of the disadvantages of using Pearson correlation:\n\nIt is only a measure of linear correlation.\nIt can be sensitive to outliers.\nIt can be difficult to interpret if the two variables are not normally distributed.\n\nOverall, Pearson correlation is a useful tool for understanding the relationship between two variables. However, it is important to be aware of its limitations."
  },
  {
    "objectID": "Glossary.html#sec-pearson",
    "href": "Glossary.html#sec-pearson",
    "title": "Glossary",
    "section": "",
    "text": "Pearson correlation is a statistical measure that assesses the strength and direction of a linear relationship between two variables. It is a number between -1 and 1, with a value of 0 indicating no correlation, a positive value indicating a positive correlation, and a negative value indicating a negative correlation.\nThe Pearson correlation coefficient is calculated by dividing the covariance of the two variables by the product of their standard deviations. The covariance is a measure of how much the two variables vary together, and the standard deviation is a measure of how much each variable varies from its mean.\nThe Pearson correlation coefficient can be used to make predictions about one variable from the other. For example, if the correlation between height and weight is 0.7, then we can predict that someone who is 6 feet tall will weigh about 180 pounds.\nThe Pearson correlation coefficient is a useful tool for understanding the relationship between two variables. However, it is important to note that it is only a measure of linear correlation. There may be other relationships between two variables that are not linear, and the Pearson correlation coefficient will not be able to detect them.\nHere are some of the advantages of using Pearson correlation:\n\nIt is a simple and easy-to-calculate measure of correlation.\nIt is widely used and accepted by most statisticians.\nIt can be used to make predictions about one variable from the other.\n\nHere are some of the disadvantages of using Pearson correlation:\n\nIt is only a measure of linear correlation.\nIt can be sensitive to outliers.\nIt can be difficult to interpret if the two variables are not normally distributed.\n\nOverall, Pearson correlation is a useful tool for understanding the relationship between two variables. However, it is important to be aware of its limitations."
  },
  {
    "objectID": "Glossary.html#sec-pvalue",
    "href": "Glossary.html#sec-pvalue",
    "title": "Glossary",
    "section": "p value",
    "text": "p value\nA p-value is a number between 0 and 1 that tells you the probability of getting the results you did, or results that are even more extreme, if the null hypothesis is true (Section 11 explains hypothesis tests). The null hypothesis is the hypothesis that there is no difference between two groups or that there is no relationship between two variables. A p-value of 0.05 or less is generally considered statistically significant, which means that there is less than a 5% chance that the results could have occurred by chance.\nFor example, it would be interesting to know whether there is a difference in the average height of men and women. You collect data on the heights of 100 men and 100 women and find that the average height of men is 6 feet tall and the average height of women is 5 feet 10 inches tall. The p-value for this test is 0.001, which is less than 0.05. This means that there is less than a 1% chance that the results could have occurred by chance. Therefore, you can conclude that there is a statistically significant difference in the average height of men and women.\nIt is important to note that a p-value does not tell you the size of the difference between two groups or the strength of the relationship between two variables. A p-value can be small even if the difference between two groups is small or the relationship between two variables is weak. Therefore, it is important to consider the p-value in conjunction with other factors, such as the size of the difference or the strength of the relationship, when interpreting the results of a statistical test.\nKey points that help the interpretation of p-values:\n\nP-values are sensitive to the size of the sample. A larger sample size will generally lead to a smaller p-value.\nP-values are not affected by the size of the effect. A small p-value can be obtained even if the effect is very small.\nP-values are not a measure of the importance of a finding. A finding can be statistically significant but not very important.\n\nOverall, p-values are a useful tool for statistical analysis, but they should be interpreted carefully."
  },
  {
    "objectID": "Glossary.html#sec-pvaluespearman",
    "href": "Glossary.html#sec-pvaluespearman",
    "title": "Glossary",
    "section": "p value Spearman correlation",
    "text": "p value Spearman correlation\nThe p-value in Spearman correlation is a measure of the probability that the observed correlation between two variables is due to chance. It is calculated by comparing the observed correlation to the distribution of correlations that would be expected if the two variables were not correlated.\nA p-value of less than 0.05 is generally considered to be statistically significant, meaning that there is less than a 5% chance that the observed correlation is due to chance. A p-value of greater than 0.05 is not statistically significant, meaning that the observed correlation could be due to chance.\nFor example, there is a correlation between the height and weight of a group of people. You calculate the Spearman correlation coefficient and find that it is r = 0.7. The p-value for this correlation is 0.001. This means that there is less than a 1% chance that the observed correlation is due to chance. Therefore, you can conclude that there is a statistically significant correlation between height and weight in this group of people.\nIt is important to note that a statistically significant correlation does not necessarily mean that there is a causal relationship between the two variables. For example, the correlation between height and weight could be due to the fact that both variables are influenced by genetics.\nSection 2 describes the general use of the p-value in statistics."
  },
  {
    "objectID": "Glossary.html#sec-spearmanCI",
    "href": "Glossary.html#sec-spearmanCI",
    "title": "Glossary",
    "section": "Spearman Correlation Confidence Limits",
    "text": "Spearman Correlation Confidence Limits\nA confidence interval for Spearman correlation (?@sec-spearman) is a range of values that is likely to contain the true correlation between two variables. The confidence interval is calculated based on the sample correlation coefficient, the sample size, and the level of confidence desired. For example, a 95% confidence interval means that there is a 95% chance that the true correlation lies within the interval.\nThe confidence interval for Spearman correlation can be interpreted as follows:\n\nThe lower limit of the confidence interval (Lower CI) is the lower bound of the range of values that is likely to contain the true correlation.\n\nThe upper limit of the confidence interval (Upper CI) is the upper bound of the range of values that is likely to contain the true correlation.\n\nThe confidence interval provides a range of values that is likely to contain the true correlation, but it does not guarantee that the true correlation lies within the interval.\n\nIt is important to note that the confidence interval for Spearman correlation will vary depending on the sample size, the level of confidence desired, and the distribution of the data. For example, a larger sample size will result in a narrower confidence interval. A higher level of confidence will result in a wider confidence interval. And a non-normal distribution of the data may result in a wider confidence interval.\nOverall, the confidence interval for Spearman correlation is a useful tool for estimating the true correlation between two variables. The confidence interval can be used to make inferences about the relationship between the variables and to assess the statistical significance of the correlation."
  },
  {
    "objectID": "Glossary.html#sec-loess",
    "href": "Glossary.html#sec-loess",
    "title": "Glossary",
    "section": "LOESS curve",
    "text": "LOESS curve\nThe LOESS curve is a type of smooth curve that is used in ggplot2 graphs to fit a line to a set of data points. It is a non-parametric method, which means that it does not make any assumptions about the underlying distribution of the data. This makes it a versatile tool for fitting curves to a wide variety of data.\nThe LOESS curve is calculated using a process called locally weighted regression. This means that the curve is fit to the data points in a local neighborhood around each point. The size of the neighborhood is determined by a parameter called the bandwidth. The bandwidth controls how smooth the curve is. A larger bandwidth will result in a smoother curve, while a smaller bandwidth will result in a more wiggly curve.\nThe LOESS curve can be used to visualize the relationship between two variables. It can also be used to make predictions about the value of one variable based on the value of another variable.\nThe LOESS curve is a powerful tool for visualizing and exploring data and can be applied to a wide variety of data.\nSome of the benefits of using the LOESS curve in graphs:\n\nIt is a non-parametric method, which means that it does not make any assumptions about the underlying distribution of the data.\nIt is a smooth curve that can be used to visualize the relationship between two variables.\nIt can be used to make predictions about the value of one variable based on the value of another variable.\nIt is easy to use and can be applied to a wide variety of data.\n\nSome of the limitations of using the LOESS curve in graph:\n\nIt can be computationally expensive to fit a LOESS curve to a large dataset.\nThe LOESS curve can be sensitive to the choice of the bandwidth parameter.\nThe LOESS curve can be difficult to interpret in some cases."
  },
  {
    "objectID": "Glossary.html#sec-spearmancorr",
    "href": "Glossary.html#sec-spearmancorr",
    "title": "Glossary",
    "section": "Spearman Correlation",
    "text": "Spearman Correlation\nThe Spearman correlation is a nonparametric measure of rank correlation. It is used to measure the strength and direction of the monotonic relationship between two variables. A monotonic relationship is one in which the variables tend to increase or decrease together, but not necessarily in a linear fashion.\nThe Spearman correlation is calculated by first ranking the data for each variable. The ranks are then used to calculate the correlation coefficient. The correlation coefficient can range from -1 to +1. A correlation coefficient of +1 indicates a perfect positive correlation, a correlation coefficient of -1 indicates a perfect negative correlation, and a correlation coefficient of 0 indicates no correlation.\nThe Spearman correlation is a robust measure of correlation, meaning that it is not affected by outliers or non-normality in the data. It is also a relatively simple measure to calculate, making it a popular choice for researchers.\nSome examples of when the Spearman correlation could be used:\n\nTo measure the relationship between height and weight\nTo measure the relationship between test scores and grades\nTo measure the relationship between age and income\nTo measure the relationship between satisfaction and loyalty\n\nThe Spearman correlation is a versatile tool that can be used to measure the relationship between a wide variety of variables. For measuring the strength and direction of the monotonic relationship between two variables, the Spearman correlation is considered a good option."
  },
  {
    "objectID": "Glossary.html#sec-boxplot",
    "href": "Glossary.html#sec-boxplot",
    "title": "Glossary",
    "section": "Box Plot",
    "text": "Box Plot\nA box plot is a standardized way of displaying the distribution of data based on a five-number summary. The five-number summary is the minimum, first quartile (Q1), median, third quartile (Q3), and maximum.\nFor a description of the quartile see Section 8.\nA box plot is drawn as a rectangle with the minimum and maximum values at the ends, the first and third quartiles at the middle, and the median at the center. The interquartile range (IQR) is the distance between the first and third quartiles.\nOutliers are data points that fall outside the interquartile range. Outliers are usually represented by small circles or asterisks.\nBox plots can be used to compare the distributions of data from different groups. For example, you could use a box plot to compare the heights of men and women.\nBox plots can also be used to identify outliers. If there are any outliers in a data set, they will be represented by small circles or asterisks.\nBox plots are a versatile tool that can be used to visualize the distribution of data. They are considered easy to understand and can be used to compare the distributions of data from different groups."
  },
  {
    "objectID": "Glossary.html#sec-quartiles",
    "href": "Glossary.html#sec-quartiles",
    "title": "Glossary",
    "section": "Quartiles",
    "text": "Quartiles\nQuartiles are a way of dividing a set of data into four equal parts. They are often used to describe the distribution of data and to identify outliers.\nThe first quartile (Q1) is the middle number between the smallest number (minimum) and the median of the data set. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point.\nThe second quartile (Q2) is the median of a data set; thus 50% of the data lies below this point.\nThe third quartile (Q3) is the middle number between the median and the largest number (maximum) of the data set. It is also known as the upper or 75th empirical quartile, as 75% of the data is below this point.\nThe interquartile range (IQR) is the difference between the third and first quartiles. It is a measure of the spread of the middle 50% of the data.\nQuartiles can be used to identify outliers. An outlier is a data point that is significantly different from the rest of the data. Outliers can be identified by comparing them to the quartiles. For example, a data point that is more than 1.5 times the interquartile range above the third quartile or more than 1.5 times the interquartile range below the first quartile is considered to be an outlier.\nQuartiles can also be used to compare different data sets. For example, if you have two data sets of test scores, you can compare the quartiles to see how the two data sets are distributed. If the first quartile of the first data set is higher than the first quartile of the second data set, then you know that the lower 25% of the scores in the first data set are higher than the lower 25% of the scores in the second data set.\nQuartiles are a useful tool for describing the distribution of data and identifying outliers. They can be used to compare different data sets and to identify trends in data."
  },
  {
    "objectID": "Glossary.html#sec-mw",
    "href": "Glossary.html#sec-mw",
    "title": "Glossary",
    "section": "Wilcoxon rank sum test",
    "text": "Wilcoxon rank sum test\nThe Wilcoxon rank sum test is a nonparametric test for two populations when samples are independent. It is used to test the null hypothesis that the two populations have the same median, against the alternative hypothesis that they do not. The test is named after Frank Wilcoxon, who published it in 1945.\nThe Wilcoxon rank sum test works by first ranking all of the data from both samples, regardless of which sample they come from. The ranks are then summed for each sample. The test statistic is the smaller of the two sums.\nThe p-value for the Wilcoxon rank sum test can be calculated using a variety of methods, including tables, software, or by hand. The p-value is the probability of getting a test statistic as extreme as or more extreme than the one observed, under the assumption that the null hypothesis is true.\nThe Wilcoxon rank sum test is a powerful and versatile test that can be used to compare two populations on a variety of variables. It is a good choice when the data is not normally distributed or when the sample sizes are small."
  },
  {
    "objectID": "Glossary.html#sec-kruskal",
    "href": "Glossary.html#sec-kruskal",
    "title": "Glossary",
    "section": "Kruskal Wallis",
    "text": "Kruskal Wallis\nThe Kruskal-Wallis test is a non-parametric test that can be used to compare the medians of three or more groups. The Dunn’s test is a post-hoc test that can be used to determine which pairs of groups are significantly different after a Kruskal-Wallis test is significant. The Bonferroni correction is a method of adjusting the p-value for multiple comparisons.\nTo perform a Kruskal-Wallis test with post hoc testing with the Dunn’s test and Bonferroni correction, requires data on the dependent variable for each group. The dependent variable should be continuous. The collected data is then ranked from lowest to highest, ignoring group membership. The mean rank for each group will then be calculated. The Kruskal-Wallis test statistic is calculated by dividing the sum of the squared differences between the mean ranks and the overall mean rank by the degrees of freedom.\nIf the Kruskal-Wallis test statistic is significant, you can then perform a Dunn’s test to determine which pairs of groups are significantly different. The Dunn’s test is a pairwise comparison test, which means that it compares each pair of groups to each other. The Dunn’s test statistic is calculated by dividing the difference in the mean ranks for the two groups by the standard error of the difference in the mean ranks.\nThe Bonferroni correction is a method of adjusting the p-value for multiple comparisons. It is used to control the familywise error rate, which is the probability of making at least one false positive error when conducting multiple comparisons.\nThe Bonferroni correction is calculated by dividing the original p-value by the number of comparisons being made. For example, if you are conducting 10 comparisons, the Bonferroni corrected p-value would be 0.05/10 = 0.005.\nThe Bonferroni correction is a conservative method of controlling the familywise error rate."
  },
  {
    "objectID": "Glossary.html#sec-hypothesis",
    "href": "Glossary.html#sec-hypothesis",
    "title": "Glossary",
    "section": "Hypothesis Tests",
    "text": "Hypothesis Tests\nA hypothesis test is a statistical procedure that is used to determine whether there is a significant difference between two groups or whether there is a significant relationship between two variables. There are two types of hypothesis tests:\n\nOne-tailed tests: These tests are used to determine whether there is a difference between two groups or a relationship between two variables in one direction only. For example, you could use a one-tailed test to determine whether the average height of men is significantly greater than the average height of women.\nTwo-tailed tests: These tests are used to determine whether there is a difference between two groups or a relationship between two variables in either direction. For example, you could use a two-tailed test to determine whether the average height of men is significantly different from the average height of women.\n\nThe steps involved in a hypothesis test are as follows:\n\nState the null hypothesis and the alternative hypothesis. The null hypothesis is the hypothesis that there is no difference between two groups or that there is no relationship between two variables. The alternative hypothesis is the hypothesis that there is a difference between two groups or that there is a relationship between two variables.\nSelect a significance level. The significance level is the probability of making a type I error, which is the error of rejecting the null hypothesis when it is true. The most common significance level is 0.05, which means that there is a 5% chance of making a type I error.\nCalculate the test statistic. The test statistic is a number that is used to determine whether the results of the study are statistically significant.\nDetermine the p-value. The p-value is the probability of getting the results you did, or results that are even more extreme, if the null hypothesis is true.\nMake a decision. If the p-value is less than the significance level, then you reject the null hypothesis and conclude that there is a significant difference between the two groups or a significant relationship between the two variables. If the p-value is greater than the significance level, then you fail to reject the null hypothesis and conclude that there is not enough evidence to support the alternative hypothesis.\n\nKey points that help understand hypothesis tests:\n\nHypothesis tests are based on probability, so there is always a chance that you will make a type I or type II error.\n\nThe size of the sample can affect the results of a hypothesis test. A larger sample size will generally lead to a more accurate test.\n\nHypothesis tests can be used to make inferences about populations, but it is important to remember that the results of a hypothesis test are only based on the sample data.\n\nOverall, hypothesis tests are a useful tool for statistical analysis, but they should be interpreted with caution."
  },
  {
    "objectID": "Glossary.html#sec-kernel",
    "href": "Glossary.html#sec-kernel",
    "title": "Glossary",
    "section": "Kernel Density",
    "text": "Kernel Density\nKernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable. It is a smooth, continuous function that is constructed by “smoothing” the data points. The smoothing is done by using a kernel function, which is a bell-shaped function that is centered at each data point. The height of the kernel function at a given point is proportional to the amount of data that is near that point.\nThe kernel density estimate is a powerful tool for visualizing data and for making inferences about the population from which the data was drawn. It can be used to compare different groups of data, to identify outliers, and to estimate the mean, median, and other properties of the population.\nHere are some examples of how kernel density estimation can be used:\n\nTo visualize the distribution of data.\n\nTo compare different groups of data.\n\nTo identify outliers.\n\nTo estimate the mean, median, and other properties of the population.\n\nKernel density estimation is a versatile and powerful tool that can be used to analyze a wide variety of data. It is a valuable tool for data scientists, statisticians, and anyone who needs to make sense of data.\nHere are some of the advantages of using kernel density estimation:\n\nIt is a non-parametric method, which means that it does not make any assumptions about the distribution of the data.\n\nIt is a smooth, continuous function, which makes it easy to visualize and interpret.\n\nIt is a versatile tool that can be used for a variety of tasks, such as comparing different groups of data, identifying outliers, and estimating the mean, median, and other properties of the population.\n\nHere are some of the disadvantages of using kernel density estimation:\n\nIt can be computationally expensive, especially for large datasets.\n\nThe results can be sensitive to the choice of kernel function and bandwidth.\n\nIt can be difficult to interpret the results if the data is not normally distributed.\n\nOverall, kernel density estimation is a powerful and versatile tool that can be used to analyze a wide variety of data.\nIt is a valuable tool for data scientists, statisticians, and anyone who needs to make sense of data."
  },
  {
    "objectID": "Glossary.html#sec-QQ",
    "href": "Glossary.html#sec-QQ",
    "title": "Glossary",
    "section": "QQ-plot",
    "text": "QQ-plot\nIn statistics, a QQ plot (quantile-quantile plot) is a probability plot, a graphical method for comparing two probability distributions by plotting their quantiles against each other. A point (x, y) on the plot corresponds to one of the quantiles of the second distribution (y-coordinate) plotted against the same quantile of the first distribution (x-coordinate). This defines a parametric curve where the parameter is the index of the quantile interval.\nA QQ plot is a plot of the quantiles of two distributions against each other, or a plot based on estimates of the quantiles. The pattern of points in the plot is used to compare the two distributions. The main step in constructing a QQ plot is calculating or estimating the quantiles to be plotted. If one or both of the axes in a QQ plot is based on a theoretical distribution with a continuous cumulative distribution function (CDF), all quantiles are uniquely defined and can be obtained by inverting the CDF.\nQQ plots are often used to assess the normality of data. If the data is normally distributed, the points in the QQ plot will fall roughly along a straight line. If the data is not normally distributed, the points in the QQ plot will deviate from a straight line. The direction and amount of deviation can be used to assess the nature of the non-normality."
  },
  {
    "objectID": "Glossary.html#sec-histogram",
    "href": "Glossary.html#sec-histogram",
    "title": "Glossary",
    "section": "Histogram",
    "text": "Histogram\nA histogram is a graphical representation of the distribution of data. It is a type of bar chart that shows the frequency or number of observations within different numerical ranges, called bins. The bins are usually specified as consecutive, non-overlapping intervals of a variable. The histogram provides a visual representation of the distribution of the data, showing the number of observations that fall within each bin. This can be useful for identifying patterns and trends in the data, and for making comparisons between different datasets.\nTo construct a histogram, the first step is to “bin” (or “bucket”) the range of values—that is, divide the entire range of values into a series of intervals—and then count how many values fall into each interval. The bins are usually specified as consecutive, non-overlapping intervals of a variable. The bins (intervals) must be adjacent and are often (but not required to be) of equal size.\nOnce the bins have been created, the next step is to count the number of observations that fall into each bin. This can be done manually or using a statistical software package. The number of observations in each bin is then plotted as a bar on the histogram. The height of each bar represents the frequency of the data in that bin.\nHistograms can be used to visualize a variety of different types of data. They are often used to visualize the distribution of continuous data, such as height, weight, or income. Histograms can also be used to visualize the distribution of discrete data, such as the number of children in a family or the number of cars owned by a household.\nHistograms are a valuable tool for data analysis. They can be used to identify patterns and trends in the data, to compare different datasets, and to make inferences about the population from which the data was drawn. Histograms are a simple and easy-to-understand way to visualize data, and they can be used by people with a variety of levels of statistical expertise."
  },
  {
    "objectID": "Glossary.html#sec-bray",
    "href": "Glossary.html#sec-bray",
    "title": "Glossary",
    "section": "Bray-Curtis distance measurement",
    "text": "Bray-Curtis distance measurement\nBray-Curtis distance measurement as used in multivariate analysis.\nBray-Curtis distance is a metric used to measure the dissimilarity between two samples. It is based on the relative abundance of species in each sample. The Bray-Curtis distance is calculated as follows:\n\\[\\frac{\\sum|A_i - B_i|}{\\sum(A_i + B_i)} \\]\n\\(A_i\\) is the abundance of species i in sample A \\(B_i\\) is the abundance of species i in sample B ∑ is the sum of all values The Bray-Curtis distance ranges from 0 to 1, with 0 indicating that the two samples are identical and 1 indicating that the two samples are completely different.\nBray-Curtis distance is a popular choice for multivariate analysis because it is relatively easy to calculate and it is sensitive to changes in the relative abundance of species. It is often used in ecology to compare the composition of different communities.\nHere are some of the advantages of using Bray-Curtis distance:\n\nIt is relatively easy to calculate.\n\nIt is sensitive to changes in the relative abundance of species.\n\nIt is a metric, which means that it satisfies the triangle inequality.\n\nHere are some of the disadvantages of using Bray-Curtis distance:\n\nIt is not a true distance, because it does not satisfy the triangle inequality.\n\nIt can be sensitive to the order of the species in the data set.\n\nIt can be sensitive to the presence of rare species.\n\nOverall, Bray-Curtis distance is a useful metric for measuring the dissimilarity between two samples. It is relatively easy to calculate and it is sensitive to changes in the relative abundance of species. However, it is important to be aware of its limitations before using it."
  },
  {
    "objectID": "Glossary.html#sec-euclid",
    "href": "Glossary.html#sec-euclid",
    "title": "Glossary",
    "section": "Euclidean distance",
    "text": "Euclidean distance\nEuclidean distance is a measure of the distance between two points in a Euclidean space. In multivariate analysis, it is used to measure the distance between two data points, which are represented by vectors. The Euclidean distance between two data points is calculated as follows:\nCode snippet d = sqrt( (x1 - x2)^2 + (y1 - y2)^2 + … + (zn - zn)^2 ) Use code with caution. Learn more where:\nd is the Euclidean distance between the two data points x1, y1, z1 are the values of the first data point x2, y2, z2 are the values of the second data point n is the number of dimensions\nThe Euclidean distance is a straight-line distance between two points. It is the most commonly used distance measure in multivariate analysis. It has a number of advantages, including:\n\nIt is easy to calculate.\nIt is intuitively appealing.\nIt is relatively robust to outliers.\n\nHowever, the Euclidean distance can be sensitive to the scale of the variables. For example, a difference of 1 unit on a variable that is measured in centimeters is much less significant than a difference of 1 unit on a variable that is measured in meters. To address this issue, it is often helpful to standardize the variables before calculating the Euclidean distance.\nThe Euclidean distance can be used in a variety of multivariate analysis techniques, including:\n\nCluster analysis (Section 17).\nPrincipal component analysis.\nLinear discriminant analysis.\nk-nearest neighbors.\n\nCluster analysis is a technique for grouping data points together based on their similarity. Principal component analysis is a technique for reducing the dimensionality of data while preserving as much of the variation as possible. Linear discriminant analysis is a technique for classifying data points into two or more groups. k-nearest neighbors is a non-parametric machine learning algorithm that can be used for classification and regression tasks.\nThe Euclidean distance is a powerful tool that can be used to analyze multivariate data. It is important to understand its strengths and weaknesses in order to use it effectively."
  },
  {
    "objectID": "Glossary.html#sec-cluster",
    "href": "Glossary.html#sec-cluster",
    "title": "Glossary",
    "section": "Cluster analysis",
    "text": "Cluster analysis\nCluster analysis is a multivariate analysis technique that groups data points together based on their similarity. It is an unsupervised learning technique, meaning that it does not require any prior knowledge of the data.\nThere are many different cluster analysis algorithms, but they all work by finding groups of data points that are close to each other and far from other data points. The most common cluster analysis algorithms are:\n\nK-means clustering: This algorithm groups data points into k clusters, where k is a predetermined number. The algorithm starts by randomly assigning each data point to a cluster. Then, it repeatedly updates the cluster centroids (the average of all data points in a cluster) and the cluster assignments until the centroids no longer change.\nHierarchical clustering: This algorithm starts by treating each data point as its own cluster. Then, it repeatedly merges the two most similar clusters until there is only one cluster left. There are two main types of hierarchical clustering: agglomerative and divisive. Agglomerative clustering starts with all data points in their own cluster and merges them together, while divisive clustering starts with all data points in one cluster and divides them into smaller and smaller clusters.\n\nCluster analysis can be used for a variety of tasks, including:\n\nData exploration: Cluster analysis can be used to explore data and identify hidden patterns. For example, a marketing team might use cluster analysis to identify different customer segments.\nData reduction: Cluster analysis can be used to reduce the dimensionality of data while preserving as much of the variation as possible. This can be useful for visualization and for making data easier to understand.\nClassification: Cluster analysis can be used to classify data points into known groups. For example, a medical researcher might use cluster analysis to classify patients into different disease groups.\n\nCluster analysis is a powerful tool that can be used to analyze multivariate data. It is important to understand the different cluster analysis algorithms and their strengths and weaknesses in order to use them effectively.\nHere are some additional considerations when using cluster analysis:\n\nThe number of clusters: The number of clusters is a critical parameter in cluster analysis. If there are too few clusters, the data will not be well-separated. If there are too many clusters, the clusters will be too small and the results will not be reliable. There is no easy way to determine the optimal number of clusters, and it may be necessary to experiment with different values.\nThe similarity measure: The similarity measure is another important parameter in cluster analysis. The most common similarity measure is the Euclidean distance, but other measures, such as the Manhattan distance and the Mahalanobis distance, can also be used. The choice of similarity measure will affect the results of the cluster analysis.\nThe cluster algorithm: The cluster algorithm is also an important parameter in cluster analysis. Different algorithms will produce different results, so it is important to experiment with different algorithms to find the one that produces the most meaningful results.\n\nCluster analysis is a powerful tool that can be used to analyze multivariate data. It is important to understand the different cluster analysis algorithms, their strengths and weaknesses, and the factors that can affect the results of cluster analysis in order to use it effectively."
  },
  {
    "objectID": "Glossary.html#sec-knearest",
    "href": "Glossary.html#sec-knearest",
    "title": "Glossary",
    "section": "k-nearest neighbors",
    "text": "k-nearest neighbors"
  },
  {
    "objectID": "Glossary.html#sec-pca",
    "href": "Glossary.html#sec-pca",
    "title": "Glossary",
    "section": "Principal component analysis",
    "text": "Principal component analysis"
  },
  {
    "objectID": "Glossary.html#type-i-and-type-ii-errors.",
    "href": "Glossary.html#type-i-and-type-ii-errors.",
    "title": "Glossary",
    "section": "Type I and Type II errors.",
    "text": "Type I and Type II errors."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "These web pages complement the data science chapters of the forthcoming 4th Edition of BCT’s Bat Survey Guidelines, and hopefully encourage ecologists to make the most of their bat survey data. They also demonstrate literate programming with Quarto®1 and R Markdown2 which can vastly improve workflow3 (welcome to the world beyond Excel).\nThe term data science is used, as this covers data collection, management, processing, analysis, visualisation, interpretation, reporting and reproducibility. Statisticians would state this is what they have always done in statistics! There is no doubt the phenomenon of data science is growing, most major universities now offer a degree course in the subject and together with the increasing power of computer algorithms; data science is more than just a rebranding of statistics (Donoho 2017).\nThe data science is applied through literate programming outlined in Figure 1. This enables efficient reporting of bat data4 from a simple table, such as a count of bats, to the output and interpretation of machine learning in a fully formatted report; plus everything in-between, all accomplished through open source R5 (R Core Team 2023) and RStudio (Posit team 2022). The beauty of literate programming is reproducibility; an essential tenet of all scientific study, in the commercial and legal world it makes for defensible reporting. The One Click Reporting page has literate programming examples for a Word report and PowerPoint presentation.\nMuch is said about the digital skills gap 6; in a small way, these data science pages aim to improve digital skills by demonstrating modern data science methods7. For a balanced understanding of the link between digital skills and data science see the Royal Statistical Society article\nYou may ask what’s wrong with the spreadsheet for data science? On a practical level spreadsheets are hard to maintain, find errors in or see there was an error in the first place, they are poor at handling dates8 and difficult to share with others. For spreadsheet blunders listen to Tim Harford’s More or less on BBC sounds9; for a litany of mathematical mistakes, many involving spreadsheets, see Matt Parker’s book Humble Pi A comedy of Maths Errors (Parker 2019). On a positive note spreadsheets are handy and easy to use for a few lines of data.\nTo help ecologists on their data science journey, all the code making the graphs and analysis in these web pages is free to copy and use; just click on Show the code, copy to the clipboard 10, paste into the R environment and run. If new to R and RStudio see Section 2.\nA Show the code is given below, the code produces Figure 2. The code copied to the clipboard is designed to run as a standalone chunk (or R script)11; the code loads the required R libraries and data.\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(treemapify) # extension to ggplot for plotting treemaps -\n# see https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html\nlibrary(ggthemes) # for colour pallet \"Tableau 10\"\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n###\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\ngraph_data &lt;- statics_plus %&gt;%\n  group_by(Species, Month) %&gt;%\n  tally()\n\nggplot(graph_data, aes(area = n, fill = Month, label = Species, subgroup = Month)) +\n  scale_fill_tableau(palette = \"Tableau 10\") + #\n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(place = \"centre\", grow = T, alpha = 0.9, colour = \"grey20\", min.size = 0) +\n  geom_treemap_text(colour = \"grey90\", place = \"topleft\", fontface = \"italic\", reflow = T, min.size = 0, alpha = 0.9) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n\n\n\n\n\nFigure 2: Example Graph: Monthly Bat Activity from the statics data set in the iBats Package\nLiterate programming facilitates the use of coding languages other than R such as Python12, and Julia13. Computer languages can be mixed in the same literate programming document; for example with a chuck of R code doing the data manipulation and another chunk of Python code performing the machine learning. Coding languages applied to data science are developing rapidly in terms of their ability, speed of execution, and user friendliness14; literate programming provides the framework for ecologists to keep their data science skills moving forward."
  },
  {
    "objectID": "index.html#evidence-led-reporting",
    "href": "index.html#evidence-led-reporting",
    "title": "Getting Started",
    "section": "1 Evidence Led Reporting",
    "text": "1 Evidence Led Reporting\nLiterate programming assists data science and reproducibility, promoting evidence led reporting and decision making. Reports are often produced for regulatory bodies, central government or local authorities, these organisations have mandatory strategies for the use of science, evidence and evaluation in there advice and actions, and the legality of their decisions(England 2020)."
  },
  {
    "objectID": "index.html#sec-installr",
    "href": "index.html#sec-installr",
    "title": "Getting Started",
    "section": "2 Install R, RStudio and Packages",
    "text": "2 Install R, RStudio and Packages\n\nDownload and install the latest version of R https://cran.r-project.org/bin/windows/base/. Download the version for your operating system; R can be downloaded for Windows, Mac & Linux.\n\nIt is recommended R is used through the RStudio IDE. Download and install the latest version of RStudio from their web page https://www.rstudio.com/products/rstudio/#Desktop. Download the free desktop version.\n\n\n2.1 Install the iBats Package from GitHub\nThe iBats package contains example data and functions that help with the Data Science of bat survey results. To install this package use the code below in the RStudio Console; one line at a time. The package is installed from GitHub.\n\n\nShow the code\ninstall.packages(\"devtools\")\n\ndevtools::install_github(\"Nattereri/iBats\")"
  },
  {
    "objectID": "index.html#acknowledgement",
    "href": "index.html#acknowledgement",
    "title": "Getting Started",
    "section": "Acknowledgement",
    "text": "Acknowledgement\nFree and Open Source Software (FOSS) constitutes 70-90% of any modern software solution15. R and RStudio are open source software that have made data science more open, intuitive, accessible, and collaborative. As a Public Good16 the value of FOSS is yet to be fully recognised. FOSS is provided by a large community, without whom these web pages would not be written; some of this community are acknowledged as individuals in the references section of the Resources page."
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Getting Started",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nQuarto® is an open-source scientific and technical publishing system: see https://quarto.org/.↩︎\nR Markdown see https://rmarkdown.rstudio.com/.↩︎\nFor example literate programming eliminates the countless copy and paste of a traditional reporting workflow.↩︎\nas exported from sound analysis software↩︎\nWindows https://cran.r-project.org/bin/windows/base/ Mac Intel & ARM https://cran.r-project.org/bin/macosx/↩︎\nThe UK government has quantified the the UK Data Skills Gap see https://www.gov.uk/government/publications/quantifying-the-uk-data-skills-gap/quantifying-the-uk-data-skills-gap-full-report.↩︎\nThe data skills gap is relevant to professional bodies, such as the Chartered Institute of Ecology and Environmental Management (CIEEM) a leading institute for professional ecologists; their competency framework, which members are required to fulfill, makes no mention of statistics or data science.↩︎\nExcel will convert a data entry into a date even if it is not, e.g. an entry of “1/1” or “1-1” would return “01-Jan”!↩︎\nMore or Less (Spreadsheet disasters) was released by the World Service on 11 Feb 2023 and is available for over a year.↩︎\nClip board icon is in the top right hand corner of the code window.↩︎\nMany R script’s are required in applying literate programming to bat data science; these are best organised through Quarto or R Markdown documents where the R scripts form code chunks.↩︎\nhttps://www.python.org/↩︎\nhttps://julialang.org/↩︎\nJulia has a language syntax similar to Python, runs fast, has a statistical library like R and linear programming skills similar to MATLAB.↩︎\nhttps://www.linuxfoundation.org/blog/blog/a-summary-of-census-ii-open-source-software-application-libraries-the-world-depends-on↩︎\nA commodity or service that is provided without profit to all members of a society, either by the government or by a private individual or organization.↩︎"
  },
  {
    "objectID": "maps.html",
    "href": "maps.html",
    "title": "Maps",
    "section": "",
    "text": "OpenStreetMap1 is a map of the world, created by the online community and free to use under an open license. Figure 1 shows a map2 of bat observations during the Lydford transect.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggspatial)\nlibrary(iBats)\n\nspatial_data &lt;- Lydford%&gt;% \n  select(Species, longitude = Longitude, latitude = Latitude)\n\n# default colour values used by scale_fill_manual() - scientific names - UK bats only\ngraph_bat_colours &lt;- iBats::bat_colours_default(spatial_data$Species)\n\nspatial_data &lt;- st_as_sf(spatial_data, coords = c(\"longitude\", \"latitude\"), \n                 crs = 4326)\n\nggplot() +\n  annotation_map_tile(type = \"osm\",  zoomin = -2, alpha = 0.5) +\n  geom_sf(data = spatial_data, aes(fill = Species), shape = 21, alpha = 0.5, size = 4) +\n  annotation_scale(location = \"tl\") +\n  annotation_north_arrow(location = \"bl\", \n                         which_north = \"true\",\n                         style = north_arrow_fancy_orienteering()) +\n  fixed_plot_aspect(ratio = 1) +\n  coord_sf() +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  theme_void() +\n  theme(legend.position = \"right\",\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    title = element_text(colour = \"black\", size = 14),\n    legend.text = element_text(face = \"italic\"))\n\n\n\n\n\nFigure 1: Open Street Map of Bat Activity on the Lydford Transect\n\n\n\n\n\n\nBat detectors e.g. the Batlogger M3 contain a built in Global Positioning System (GPS) capable of recording the location over time to a GPX file; note for the Battlogger M the tracker needs to be enabled. The GPX, or GPS Exchange Format, is a text file designed as a common GPS data format for software applications. It can be used to describe waypoints, tracks, and routes. The file format is open and free to use.\nThe transect route, and other information such as the start and finish times, is a key part of reporting. An example of transect output created from a GPX file recorded for a National Bat Monitoring Programme (NBMP)4 field survey is given in Figure 2.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(hms)\nlibrary(ggspatial)\nlibrary(iBats)\nlibrary(glue)\n\n\nfilename &lt;- \"data//24910001_20180707.gpx\"\n\n# Read tracks layer for map plot \ntransect_tracks &lt;- sf::st_read(filename, \"tracks\", promote_to_multi = TRUE, quiet = TRUE)\n\n# Read points layer to calculate transect timings\ntransect_points &lt;- sf::st_read(filename, \"track_points\", promote_to_multi = TRUE, quiet = TRUE)\n  \n  \n#extract coords \npoint_geometry &lt;- transect_points %&gt;% \n  pull(geometry)\n\npoint_geometry &lt;- sf::st_coordinates(point_geometry)\n\npoint_geometry &lt;- tibble(point_geometry[,1], point_geometry[,2])\n\ncolnames(point_geometry) &lt;- c(\"Longitude\", \"Latitude\")\n\npoint_geometry &lt;- as.matrix(point_geometry)\n\n# Select date/time vector from `transect_points` dataframe\nTransect_times &lt;- transect_points %&gt;% \n  pull(time) \n\n# Start time\nTrans_start &lt;- hms::as_hms(stringr::str_sub(as.character(min(Transect_times)), start = 12, end = 19))\n\n# Finish time\nTrans_finish &lt;- hms::as_hms(stringr::str_sub(as.character(max(Transect_times)), start = 12, end = 19))\n\n# Length of time on transect\nTrans_period &lt;- as.integer(difftime(Trans_finish, Trans_start, units = c(\"mins\")))\n\n# Make Transect times suitable text for printing \nTrans_start &lt;- stringr::str_c(as.character(Trans_start), \" hrs\")\nTrans_finish &lt;- stringr::str_c(as.character(Trans_finish), \" hrs\")\nTrans_period &lt;- stringr::str_c(as.character(Trans_period), \" minutes\")\n  \n\nggplot() +\n  annotation_map_tile(type = \"osm\",  zoomin = -2, alpha = 0.5) +\n  geom_sf(data = transect_tracks, linewidth = 2, colour = \"purple\", alpha = 0.6) +\n  annotation_scale(location = \"tr\") +\n  annotation_north_arrow(location = \"br\", which_north = \"true\") +\n  fixed_plot_aspect(ratio = 1.5) +\n  coord_sf() +\n  labs(title = \"NBMP - Field Survey Transect\") +\n  theme(strip.background = element_rect(fill=\"black\"),\n    legend.position = \"right\",\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(size=10, colour=\"grey20\", angle = 270),\n    axis.text.y = element_text(size=10, colour=\"grey20\"),\n    axis.ticks = element_blank(),\n    title = element_text(colour = \"black\", size = 14),\n    legend.text = element_text(face = \"italic\"))\n\n\n\n\n\nFigure 2: National Bat Monitoring Programme Field Survey Transect\n\n\n\n\nThe NBMP field survey transect shown in Figure 2 took 54 minutes; began at 21:52:27 hrs and finished at 22:46:56 hrs.\n\n\n\nFigure 3 and Figure 4 show the relative species activity on a transect in Mary Tavy, Devon during June 2019. The map is the MaryTavy data as exported from the BatExplorer sound analysis software; it is made tidy before producing Figure 3. In Figure 4 the species are faceted onto individual maps; perhaps enhancing the understanding of the bat relative activity.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggspatial)\nlibrary(iBats)\n\n###############################################################################\n# MaryTavy is data directly exported from BatExplorer and requires tidying!####\n###############################################################################\n\n#### Combine the two Species columns into one ##################################\n# Select Species column and remove (Species2nd & Species3rd)\ndata1 &lt;- MaryTavy %&gt;%\n  select(-`Species 2nd Text`) %&gt;% \n  rename(Species = `Species Text`)\n\n# Select Species2nd column and remove (Species & Species3rd)\ndata2 &lt;- MaryTavy %&gt;%\n  select(-`Species Text`) %&gt;%\n  filter(`Species 2nd Text` != \"-\") %&gt;% # Remove blank rows\n  rename(Species = `Species 2nd Text`) # Rename column\n\n# Add the datasets together into one\nMaryTavyTidying &lt;- dplyr::bind_rows(data1, data2)\n################################################################################\n\n\n#### Calculate bat activity time and prepare to make spatial data #############\nspatial_data &lt;- MaryTavyTidying %&gt;% \n  mutate(calls = `Calls [#]`,\n         duration = `Mean Call Lenght [ms]`,\n         span = `Mean Call Distance [ms]`,\n         # Calculate BatActivityTime in seconds\n         bat_time = calls * (duration + span) / 1000) %&gt;% \n  select(Species, bat_time, latitude = `Latitude [WGS84]`, longitude = `Longitude [WGS84]`)\n\n# default colour values used by scale_fill_manual() - scientific names - UK bats only\ngraph_bat_colours &lt;- iBats::bat_colours_default(spatial_data$Species)\n\nspatial_data &lt;- st_as_sf(spatial_data, coords = c(\"longitude\", \"latitude\"), \n                 crs = 4326)\n\nplotmap &lt;- ggplot() +\n  annotation_map_tile(type = \"osm\",  zoomin = -2, alpha = 0.7) +\n  geom_sf(data = spatial_data, aes(fill = Species, size = bat_time), shape = 21, alpha = 0.5) +\n  fixed_plot_aspect(ratio = 1) +\n  coord_sf() +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  labs(size = \"Bat Activity (secs)\",\n      fill = \"Species\") +\n  theme_void() +\n  theme(legend.position = \"right\",\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank()) +\n  #Make the point size larger on the legend to show the colour\n  guides(fill = guide_legend(override.aes = list(size=4)))\n\n\nplotmap +\n  annotation_scale(location = \"tr\") +\n  annotation_north_arrow(location = \"bl\", which_north = \"true\") \n\n\n\n\n\nFigure 3: Bat Activity on the Mary Tavy Transect as Time Present\n\n\n\n\n\n\nShow the code\nplotmap +\n  scale_size_area(max_size = 8) +\n  facet_wrap(~Species, ncol = 3) +\n  theme(legend.position = \"none\",\n        strip.text.x = element_text(size=12, face=\"italic\", colour = \"white\"),\n        strip.background = element_rect(fill = \"black\"))\n\n\n\n\n\nFigure 4: Faceted Bat Activity on the Mary Tavy Transect as Time Present"
  },
  {
    "objectID": "maps.html#open-street-map",
    "href": "maps.html#open-street-map",
    "title": "Maps",
    "section": "",
    "text": "OpenStreetMap1 is a map of the world, created by the online community and free to use under an open license. Figure 1 shows a map2 of bat observations during the Lydford transect.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggspatial)\nlibrary(iBats)\n\nspatial_data &lt;- Lydford%&gt;% \n  select(Species, longitude = Longitude, latitude = Latitude)\n\n# default colour values used by scale_fill_manual() - scientific names - UK bats only\ngraph_bat_colours &lt;- iBats::bat_colours_default(spatial_data$Species)\n\nspatial_data &lt;- st_as_sf(spatial_data, coords = c(\"longitude\", \"latitude\"), \n                 crs = 4326)\n\nggplot() +\n  annotation_map_tile(type = \"osm\",  zoomin = -2, alpha = 0.5) +\n  geom_sf(data = spatial_data, aes(fill = Species), shape = 21, alpha = 0.5, size = 4) +\n  annotation_scale(location = \"tl\") +\n  annotation_north_arrow(location = \"bl\", \n                         which_north = \"true\",\n                         style = north_arrow_fancy_orienteering()) +\n  fixed_plot_aspect(ratio = 1) +\n  coord_sf() +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  theme_void() +\n  theme(legend.position = \"right\",\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    title = element_text(colour = \"black\", size = 14),\n    legend.text = element_text(face = \"italic\"))\n\n\n\n\n\nFigure 1: Open Street Map of Bat Activity on the Lydford Transect\n\n\n\n\n\n\nBat detectors e.g. the Batlogger M3 contain a built in Global Positioning System (GPS) capable of recording the location over time to a GPX file; note for the Battlogger M the tracker needs to be enabled. The GPX, or GPS Exchange Format, is a text file designed as a common GPS data format for software applications. It can be used to describe waypoints, tracks, and routes. The file format is open and free to use.\nThe transect route, and other information such as the start and finish times, is a key part of reporting. An example of transect output created from a GPX file recorded for a National Bat Monitoring Programme (NBMP)4 field survey is given in Figure 2.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(hms)\nlibrary(ggspatial)\nlibrary(iBats)\nlibrary(glue)\n\n\nfilename &lt;- \"data//24910001_20180707.gpx\"\n\n# Read tracks layer for map plot \ntransect_tracks &lt;- sf::st_read(filename, \"tracks\", promote_to_multi = TRUE, quiet = TRUE)\n\n# Read points layer to calculate transect timings\ntransect_points &lt;- sf::st_read(filename, \"track_points\", promote_to_multi = TRUE, quiet = TRUE)\n  \n  \n#extract coords \npoint_geometry &lt;- transect_points %&gt;% \n  pull(geometry)\n\npoint_geometry &lt;- sf::st_coordinates(point_geometry)\n\npoint_geometry &lt;- tibble(point_geometry[,1], point_geometry[,2])\n\ncolnames(point_geometry) &lt;- c(\"Longitude\", \"Latitude\")\n\npoint_geometry &lt;- as.matrix(point_geometry)\n\n# Select date/time vector from `transect_points` dataframe\nTransect_times &lt;- transect_points %&gt;% \n  pull(time) \n\n# Start time\nTrans_start &lt;- hms::as_hms(stringr::str_sub(as.character(min(Transect_times)), start = 12, end = 19))\n\n# Finish time\nTrans_finish &lt;- hms::as_hms(stringr::str_sub(as.character(max(Transect_times)), start = 12, end = 19))\n\n# Length of time on transect\nTrans_period &lt;- as.integer(difftime(Trans_finish, Trans_start, units = c(\"mins\")))\n\n# Make Transect times suitable text for printing \nTrans_start &lt;- stringr::str_c(as.character(Trans_start), \" hrs\")\nTrans_finish &lt;- stringr::str_c(as.character(Trans_finish), \" hrs\")\nTrans_period &lt;- stringr::str_c(as.character(Trans_period), \" minutes\")\n  \n\nggplot() +\n  annotation_map_tile(type = \"osm\",  zoomin = -2, alpha = 0.5) +\n  geom_sf(data = transect_tracks, linewidth = 2, colour = \"purple\", alpha = 0.6) +\n  annotation_scale(location = \"tr\") +\n  annotation_north_arrow(location = \"br\", which_north = \"true\") +\n  fixed_plot_aspect(ratio = 1.5) +\n  coord_sf() +\n  labs(title = \"NBMP - Field Survey Transect\") +\n  theme(strip.background = element_rect(fill=\"black\"),\n    legend.position = \"right\",\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_text(size=10, colour=\"grey20\", angle = 270),\n    axis.text.y = element_text(size=10, colour=\"grey20\"),\n    axis.ticks = element_blank(),\n    title = element_text(colour = \"black\", size = 14),\n    legend.text = element_text(face = \"italic\"))\n\n\n\n\n\nFigure 2: National Bat Monitoring Programme Field Survey Transect\n\n\n\n\nThe NBMP field survey transect shown in Figure 2 took 54 minutes; began at 21:52:27 hrs and finished at 22:46:56 hrs.\n\n\n\nFigure 3 and Figure 4 show the relative species activity on a transect in Mary Tavy, Devon during June 2019. The map is the MaryTavy data as exported from the BatExplorer sound analysis software; it is made tidy before producing Figure 3. In Figure 4 the species are faceted onto individual maps; perhaps enhancing the understanding of the bat relative activity.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggspatial)\nlibrary(iBats)\n\n###############################################################################\n# MaryTavy is data directly exported from BatExplorer and requires tidying!####\n###############################################################################\n\n#### Combine the two Species columns into one ##################################\n# Select Species column and remove (Species2nd & Species3rd)\ndata1 &lt;- MaryTavy %&gt;%\n  select(-`Species 2nd Text`) %&gt;% \n  rename(Species = `Species Text`)\n\n# Select Species2nd column and remove (Species & Species3rd)\ndata2 &lt;- MaryTavy %&gt;%\n  select(-`Species Text`) %&gt;%\n  filter(`Species 2nd Text` != \"-\") %&gt;% # Remove blank rows\n  rename(Species = `Species 2nd Text`) # Rename column\n\n# Add the datasets together into one\nMaryTavyTidying &lt;- dplyr::bind_rows(data1, data2)\n################################################################################\n\n\n#### Calculate bat activity time and prepare to make spatial data #############\nspatial_data &lt;- MaryTavyTidying %&gt;% \n  mutate(calls = `Calls [#]`,\n         duration = `Mean Call Lenght [ms]`,\n         span = `Mean Call Distance [ms]`,\n         # Calculate BatActivityTime in seconds\n         bat_time = calls * (duration + span) / 1000) %&gt;% \n  select(Species, bat_time, latitude = `Latitude [WGS84]`, longitude = `Longitude [WGS84]`)\n\n# default colour values used by scale_fill_manual() - scientific names - UK bats only\ngraph_bat_colours &lt;- iBats::bat_colours_default(spatial_data$Species)\n\nspatial_data &lt;- st_as_sf(spatial_data, coords = c(\"longitude\", \"latitude\"), \n                 crs = 4326)\n\nplotmap &lt;- ggplot() +\n  annotation_map_tile(type = \"osm\",  zoomin = -2, alpha = 0.7) +\n  geom_sf(data = spatial_data, aes(fill = Species, size = bat_time), shape = 21, alpha = 0.5) +\n  fixed_plot_aspect(ratio = 1) +\n  coord_sf() +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  labs(size = \"Bat Activity (secs)\",\n      fill = \"Species\") +\n  theme_void() +\n  theme(legend.position = \"right\",\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank()) +\n  #Make the point size larger on the legend to show the colour\n  guides(fill = guide_legend(override.aes = list(size=4)))\n\n\nplotmap +\n  annotation_scale(location = \"tr\") +\n  annotation_north_arrow(location = \"bl\", which_north = \"true\") \n\n\n\n\n\nFigure 3: Bat Activity on the Mary Tavy Transect as Time Present\n\n\n\n\n\n\nShow the code\nplotmap +\n  scale_size_area(max_size = 8) +\n  facet_wrap(~Species, ncol = 3) +\n  theme(legend.position = \"none\",\n        strip.text.x = element_text(size=12, face=\"italic\", colour = \"white\"),\n        strip.background = element_rect(fill = \"black\"))\n\n\n\n\n\nFigure 4: Faceted Bat Activity on the Mary Tavy Transect as Time Present"
  },
  {
    "objectID": "maps.html#outline-maps",
    "href": "maps.html#outline-maps",
    "title": "Maps",
    "section": "2 Outline Maps",
    "text": "2 Outline Maps\nOutline maps are useful base maps; as they are not cluttered by distracting information.\n\n2.1 Office for National Statistics\nOutline maps are available from the Office for National Statistics5. Digital boundary products and reference maps are supplied under the Open Government Licence and should include copyright statements when the maps are reproduced6.\nFigure 5 shows the location of the MaryTavy transect on an outline map of Great Britain; the source of the map is the Office for National Statistics licensed under the Open Government Licence v.3.0, it contains OS data© Crown copyright and database 2017. Figure 6 shows the location of the MaryTavy transect on an outline map of Devon.\n\n\nShow the code\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(iBats)\n\n\n# Make location point for Mary Tavy Transect\nMaryTavyLoc &lt;- MaryTavy %&gt;% \n  summarise(lat = median(`Latitude [WGS84]`),\n            lon = median(`Longitude [WGS84]`)) %&gt;% \n  st_as_sf(coords = c(\"lon\", \"lat\")) %&gt;% \n  st_set_crs(4326) %&gt;% \n  # Convert coord reference system to British National Grid\n  st_transform(crs = 27700)\n\n\n# Load outline map\nGB &lt;- sf::st_read(\"maps/GeneralGB/CTYUA_Dec_2017_GCB_GB.shp\", quiet = TRUE) \n\n# Plot map and Location\nggplot() +\n  geom_sf(data = GB,\n          linewidth = 0.25,\n          colour = \"#fab824\",\n          fill = \"#FFEFD5\") +\n  geom_sf(data = MaryTavyLoc,\n          shape = 23,\n          size = 3,\n          colour = \"#00558e\",\n          fill = \"#8B0000\") +\n  theme_void() \n\n\n\n\n\nFigure 5: Location of the Mary Tavy Transect June 2019\n\n\n\n\n\n\nShow the code\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(iBats)\n\n# Make location point for Mary Tavy Transect\nMaryTavyLoc &lt;- MaryTavy %&gt;% \n  summarise(lat = median(`Latitude [WGS84]`),\n            lon = median(`Longitude [WGS84]`)) %&gt;% \n  st_as_sf(coords = c(\"lon\", \"lat\")) %&gt;% \n  st_set_crs(4326) %&gt;% \n  # Convert coord reference system to British National Grid\n  st_transform(crs = 27700)\n\n# Load outline map and filter for Devon \nGB &lt;- sf::st_read(\"maps/GeneralGB/CTYUA_Dec_2017_GCB_GB.shp\", quiet = TRUE) %&gt;% \n  filter(ctyua17nm == \"Devon\")\n\n# Save map and Location in \nDevon &lt;- ggplot() +\n  geom_sf(data = GB,\n          linewidth = 0.25,\n          colour = \"#228b22\",\n          fill = \"#E4FAE4\") +\n  geom_sf(data = MaryTavyLoc,\n          shape = 23,\n          size = 5,\n          colour = \"#8B0000\",\n          fill = \"#fab824\") +\n  labs(title = \"County of Devon\") +\n  theme_void() +\n  theme(title = element_text(colour = \"#228b22\", size = 14, face = \"bold\"))\n\n# Plot map and Location\nDevon\n\n\n\n\n\nFigure 6: Location within Devon of the Mary Tavy Transect June 2019\n\n\n\n\n\n\n2.2 Open Street Map data\nThe R package osmdata downloads feature data from OpenStreetMap (OSM) 7. A list of the available features can be found in the OSM wiki. Figure 7 shows the river feature abstracted fromosmdata and displayed on the outline map of Devon from Figure 6. Figure 8 shows the water features (river, ditch, drain, and stream) for West Devon together with the location of the example data in the iBats package.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(osmdata)\nlibrary(sf)\n\n#Obtain the River feature from `osmdata` for the Devon area\nriver &lt;- opq(bbox = c(-4.3, 50.2, -3.2, 51.3)) %&gt;%\n  add_osm_feature(key = \"waterway\", value = \"river\") %&gt;%\n  osmdata_sf()\n\nDevon +\n  geom_sf(data = river$osm_lines,\n          inherit.aes = FALSE,\n          color = \"blue\",\n          size = .2,\n          alpha = .5) +\n  labs(title = \"Rivers of Devon\") +\n  theme(title = element_text(colour = \"blue\", size = 14, face = \"bold\"))\n\n\n\n\n\nFigure 7: Rivers of Devon\n\n\n\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(osmdata)\nlibrary(sf)\nlibrary(iBats)\nlibrary(ggrepel)\n\nLoc_TavyOak &lt;- TavyOak %&gt;%\n  summarise(\n    lat = median(Latitude, na.rm = T),\n    lon = median(Longitude, na.rm = T)\n  ) %&gt;%\n  mutate(DataSet = \"TavyOak\")\n\nLoc_MaryTavy &lt;- MaryTavy %&gt;%\n  summarise(\n    lat = median(`Latitude [WGS84]`, na.rm = T),\n    lon = median(`Longitude [WGS84]`, na.rm = T)\n  ) %&gt;%\n  mutate(DataSet = \"MaryTavy\")\n\nLoc_Lydford &lt;- Lydford %&gt;%\n  summarise(\n    lat = median(Latitude, na.rm = T),\n    lon = median(Longitude, na.rm = T)\n  ) %&gt;%\n  mutate(DataSet = \"Lydford\")\n\nLocation_datasets &lt;- bind_rows(Loc_TavyOak, Loc_MaryTavy, Loc_Lydford)\n\n\nco_ords &lt;- c(-4.35, 50.49, -3.95, 50.665)\nwatercourses &lt;- opq(bbox = co_ords) %&gt;%\n add_osm_feature(key = \"waterway\", value = c(\"river\", \"ditch\", \"drain\",  \"stream\")) %&gt;%\n  osmdata_sf()\n\n\nggplot() +\n  geom_sf(data = watercourses$osm_lines,\n          inherit.aes = FALSE,\n          color = \"blue\",\n          size = .2,\n          alpha = .5) +\n  coord_sf(xlim = c(-4.35, -3.95), \n           ylim = c(50.49, 50.665),\n           expand = FALSE) +\n  geom_point(\n    data = Location_datasets,\n    aes(x = lon, y = lat),\n    shape = 25,\n    fill = \"darkred\",\n    colour = \"gold\",\n    size = 6\n  ) +\n  geom_label_repel(\n    data = Location_datasets, aes(x = lon, y = lat, label = DataSet), segment.size = 0.2,\n    segment.color = \"grey50\",\n    direction = \"both\",\n    hjust = 0,\n    size = 4,\n    alpha = 0.9\n  ) +\n  theme_void() \n\n\n\n\n\nFigure 8: Location of iBats Example Data and Watercourses of West Devon\n\n\n\n\n\n\n2.3 The rnaturalearth package\nThe rnaturalearth package offers outline maps on a world and country scale. Figure 9 shows the world map using the Gall Peters projection8.\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(rnaturalearth)\n\nworldmap &lt;- ne_countries(scale = 'medium', type = 'map_units',\n                         returnclass = 'sf')\n\nggplot() + \n  geom_sf(data = worldmap, fill = \"grey95\") + \n  geom_sf(data = MaryTavyLoc,\n          shape = 23,\n          size = 2,\n          colour = \"#fab824\",\n          fill = \"#8B0000\") +\n  # Gall Peters projection\n  coord_sf(crs= \"+proj=cea +lon_0=0 +x_0=0 +y_0=0 +lat_ts=45 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\") +\n  theme_void()\n\n\n\n\n\nFigure 9: Location of Mary Tavy on a World Map (Gall Peters Projection)"
  },
  {
    "objectID": "maps.html#three-dimensional-maps",
    "href": "maps.html#three-dimensional-maps",
    "title": "Maps",
    "section": "3 Three Dimensional Maps",
    "text": "3 Three Dimensional Maps\nTogether with latitude and longitude it’s often useful to plot a third dimension such as elevation (other variables could be rainfall, temperature). If elevation data is not immediately to hand, the elevatr R package9 provides access to elevation data from various sources. The code below has a bounding box with co-ordinates of the minimum and maximum latitude and longitude around West Devon, this passed to a tibble (data.frame).\n\n\nShow the code\nlibrary(elevatr)\n\nelev_data &lt;- get_elev_raster(\n  # Bounding box\n  locations = data.frame(x = c(-4.35, -3.95), y = c(50.49, 50.665)),\n  z = 10,\n  prj = \"EPSG:4326\",\n  clip = \"locations\")\n\n\nThe Base R function plot()can plot raster objects as shown in Figure 10 (a). The tanaka R package applies a shaded contour lines method which can improve the portrayal of topography on a map. The tanaka function requires the elevation data into a SpatRaster class of object; this can be done using the rast() function from terra package. The Tanaka contour map is shown in Figure 10 (b).\nBase R Figure 10 (a)\n\n\nShow the code\nplot(elev_data, axes = FALSE, horizontal = TRUE, legend=FALSE)\n\n\ntanaka Package Figure 10 (b)\n\n\nShow the code\n#  With the terra package make a raster file\nlibrary(terra)\nelev_raster &lt;- rast(elev_data)\n\nlibrary(tanaka)\ntanaka(elev_raster,  legend.pos = \"n\")\n\n\n\n\n\n\n\n\n\n(a) Base R\n\n\n\n\n\n\n\n(b) tanaka\n\n\n\n\nFigure 10: West Devon Topography\n\n\n\n3.1 ggplot\nTanaka contours can be plotted using ggplot2, through the metR package and the function geom_contour_tanaka(). This gives more flexiabilty in output and easily allows the plotting of additional information. Figure 11 shows the topographical location of the West Devon example data in the iBats package.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(elevatr)\nlibrary(iBats)\nlibrary(metR)\nlibrary(ggrepel)\nlibrary(raster)\n\nelev_data &lt;- get_elev_raster(\n  locations = data.frame(x = c(-4.35, -3.95), y = c(50.49, 50.665)),\n  z = 10,\n  prj = \"EPSG:4326\",\n  clip = \"locations\"\n)\n\n# Convert raster to data frame\ngg_data &lt;- raster::as.data.frame(elev_data, xy = TRUE) %&gt;%\n  rename(elev = names(elev_data), lat = y, lon = x)\n\n# Obtain central location of each example dataset\nLoc_TavyOak &lt;- TavyOak %&gt;%\n  summarise(\n    lat = median(Latitude, na.rm = T),\n    lon = median(Longitude, na.rm = T)\n  ) %&gt;%\n  mutate(DataSet = \"TavyOak\")\n\nLoc_MaryTavy &lt;- MaryTavy %&gt;%\n  summarise(\n    lat = median(`Latitude [WGS84]`, na.rm = T),\n    lon = median(`Longitude [WGS84]`, na.rm = T)\n  ) %&gt;%\n  mutate(DataSet = \"MaryTavy\")\n\nLoc_Lydford &lt;- Lydford %&gt;%\n  summarise(\n    lat = median(Latitude, na.rm = T),\n    lon = median(Longitude, na.rm = T)\n  ) %&gt;%\n  mutate(DataSet = \"Lydford\")\n\nLocation_datasets &lt;- bind_rows(Loc_TavyOak, Loc_MaryTavy, Loc_Lydford)\n\nggplot(gg_data, aes(x = lon, y = lat)) +\n  geom_contour_fill(aes(z = elev, fill = after_stat(level))) +\n  geom_contour_tanaka(aes(z = elev)) +\n  scale_fill_discretised(low = \"#FBDEE1\", high = \"#1D0809\") +\n  geom_point(\n    data = Location_datasets,\n    aes(x = lon, y = lat),\n    shape = 25,\n    fill = \"darkred\",\n    colour = \"gold\",\n    size = 6\n  ) +\n  geom_label_repel(\n    data = Location_datasets, aes(x = lon, y = lat, label = DataSet), segment.size = 0.2,\n    segment.color = \"grey50\",\n    direction = \"both\",\n    hjust = 0,\n    size = 4,\n    alpha = 0.9\n  ) +\n  labs(fill = \"Elevation\\n(meters)\") +\n  scale_x_longitude() +\n  scale_y_latitude() +\n  theme_void()\n\n\n\n\n\nFigure 11: Topographical Location of iBats Example Data in West Devon"
  },
  {
    "objectID": "maps.html#footnotes",
    "href": "maps.html#footnotes",
    "title": "Maps",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.openstreetmap.org/↩︎\nBase map is the copyright OpenStreetMap contributors↩︎\nhttps://www.batlogger.com/en/products/batlogger_m/↩︎\nhttp://www.bats.org.uk/pages/nbmp.html↩︎\nhttps://geoportal.statistics.gov.uk/↩︎\nLicence information can be found here: https://www.ons.gov.uk/methodology/geography/licences↩︎\nhttps://www.openstreetmap.org/↩︎\nFor world map projections in R see https://www.happykhan.com/posts/map-projections-in-r/↩︎\nhttps://cran.r-project.org/web/packages/elevatr/vignettes/introduction_to_elevatr.html↩︎"
  },
  {
    "objectID": "meta.html",
    "href": "meta.html",
    "title": "Meta Data",
    "section": "",
    "text": "Meta Data1 is added as a column or columns to the tidy data. Even with a minimum tidy data set (i.e. species, datetime and geolocation) many columns of useful meta data can be added to enhance the analysis and reporting; described below is simple meta data easily added to tidy data."
  },
  {
    "objectID": "meta.html#date-and-time-information",
    "href": "meta.html#date-and-time-information",
    "title": "Meta Data",
    "section": "1 Date and Time Information",
    "text": "1 Date and Time Information\n\n1.1 The Night\nBats are active through the night; the date of the Night is the date at sunset and lasts until sunrise the morning of the following day. The Night is a variable column that is added to the tidy data; it is useful convention that helps avoid the confusion of having contiguous bat activity over two dates.\nThe Night can be obtained from the iBats package using the date_time_info function. It requires a data.frame or tibble with a DateTime column, the iana2 time zone can be specified; the default is Europe/London.\nThe code below takes the statics set from the iBats package and adds the Night column, Table 1 shows a selection of 5 rows from the statics data.\n\n\nShow the code\nstatics_with_night &lt;- iBats::date_time_info(statics)\n\n\n\n\nShow the code\nstatics_with_night %&gt;% \n  sample_n(5) %&gt;% \n  select(Description, Night, DateTime, Species) %&gt;% \n  # Table made with library(gt)\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = Night\n    )\n  ) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = Night\n    )\n  ) %&gt;% # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = c(Night, DateTime)\n  )\n\n\n\n\n\n\n\n\nTable 1: The Night from the DateTime Column\n\n\nDescription\nNight\nDateTime\nSpecies\n\n\n\n\nStatic 4\n2016-08-24\n2016-08-25 01:58:59\nPipistrellus pipistrellus\n\n\nStatic 4\n2016-08-04\n2016-08-04 23:11:37\nPipistrellus pipistrellus\n\n\nStatic 4\n2016-06-12\n2016-06-13 01:50:48\nPipistrellus pipistrellus\n\n\nStatic 4\n2016-07-30\n2016-07-31 01:08:12\nPipistrellus pipistrellus\n\n\nStatic 2\n2016-10-10\n2016-10-10 19:39:35\nPlecotus spp.\n\n\n\n\n\n\n\n\n\n\n1.2 Other Date and Time Information\nThe function iBats::date_time_info() adds other date and time information: month, year and time see Table 2 (note: not all columns are shown). Table 2 shows a random selection of 5 rows from the statics set.\n\n\nShow the code\nstatics_with_night %&gt;% \n  sample_n(5) %&gt;% \n  select(Description, DateTime, Species, Month, MonthFull, Year, JustTime) %&gt;% \n  # Table made with library(gt)\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  ) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  ) %&gt;% \n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime)\n\n\n\n\n\n\n\n\nTable 2: Other Date and Time Information from the DateTime Column\n\n\nDescription\nDateTime\nSpecies\nMonth\nMonthFull\nYear\nJustTime\n\n\n\n\nStatic 2\n2016-08-15 01:44:55\nPipistrellus pygmaeus\nAug\nAugust\n2016\n13:44:55\n\n\nStatic 3\n2016-08-13 22:10:52\nPipistrellus pipistrellus\nAug\nAugust\n2016\n10:10:52\n\n\nStatic 2\n2016-06-26 00:19:49\nRhinolophus ferrumequinum\nJun\nJune\n2016\n12:19:49\n\n\nStatic 2\n2016-06-05 04:11:35\nPipistrellus pipistrellus\nJun\nJune\n2016\n16:11:35\n\n\nStatic 4\n2016-07-31 21:16:24\nPipistrellus pipistrellus\nJul\nJuly\n2016\n09:16:24"
  },
  {
    "objectID": "meta.html#sun-times",
    "href": "meta.html#sun-times",
    "title": "Meta Data",
    "section": "2 Sun Times",
    "text": "2 Sun Times\nA useful approach for bat data analysis is to reference all bat activity (i.e. DateTime) to the time of sunset and sunrise for the Night and location(i.e. Latitude and Longitude). From this starting point, the minutes after sunset (and minutes before sunrise) that each bat activity occurred can be calculated; these can then be converted to decimal hours and integer hours so bat activity can be visualised in ways that help interpret the bat activity.\nReferencing the DateTime of bat activity to sunset and sunrise is achieved with the use of the suncalc package (Thieurmel and Elmarhraoui 2022). The iBats package makes use of suncalc in its sun_night_metrics fuction; this takes a dataframe that must include the columns: Night, DateTime, Latitude and, Longitude - and calculates the following columns:\n\nsunset - sun set time for the Night date and Latitude and, Longitude\nsunrise - sun rise time for the Night date and Latitude and, Longitude\npost_set_min- time in minutes the bat was observed after sun set\npre_rise_min - time in minutes the bat was observed before sun rise\npost_set_hr - time in hours (decimal) the bat was observed after sun set\npre_rise_hr - time in hours (decimal) the bat was observed before sun rise\npost_set_hr_int - time in hours (integer) the bat was observed after sun set\npre_rise_hr_int - time in hours (integer) the bat was observed before sun rise\n\nnight_length_hr - night length in hours (decimal) difference between sunset and sunrise\n\nTable 3 shows a selection of 5 rows from the statics data with the DateTime column and the Night column already added3, the function iBats::sun_night_metrics() calculates the columns listed above, the following columns are shown: sunset, post_set_min, and, post_set_hr_int.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\", quiet = TRUE)\n}\n\n\nLoading required package: devtools\n\n\nLoading required package: usethis\n\n\nShow the code\n# If iBats not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\nlibrary(gt)\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus)\n\nstatics_plus %&gt;% \n  sample_n(5) %&gt;% \n  select(Night, DateTime, sunset, post_set_min, post_set_hr_int) %&gt;% \n  # Table made with library(gt)\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"pink\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(sunset, post_set_min, post_set_hr_int)\n    )\n  ) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"pink\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(sunset, post_set_min, post_set_hr_int)\n    )\n  ) %&gt;% \n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = c(Night, DateTime, sunset))\n\n\n\n\n\n\n\n\nTable 3: Sun Time Information from the Night and DateTime Columns\n\n\nNight\nDateTime\nsunset\npost_set_min\npost_set_hr_int\n\n\n\n\n2016-07-29\n2016-07-30 03:04:26\n2016-07-29 21:04:06\n360.33333\n6\n\n\n2016-08-04\n2016-08-04 22:47:09\n2016-08-04 20:54:49\n112.33333\n2\n\n\n2016-06-07\n2016-06-07 22:45:34\n2016-06-07 21:23:08\n82.43333\n1\n\n\n2016-07-29\n2016-07-30 05:15:40\n2016-07-29 21:04:06\n491.56667\n8\n\n\n2016-06-07\n2016-06-07 22:00:01\n2016-06-07 21:23:08\n36.88333\n1"
  },
  {
    "objectID": "meta.html#common-bat-names",
    "href": "meta.html#common-bat-names",
    "title": "Meta Data",
    "section": "3 Common Bat Names",
    "text": "3 Common Bat Names\nCommon bat names are readily understood by the lay reader and should be available for graphs and tables; it is easily added as an additional column using the Scientific names column as a starting point.\nBy convention scientific names are written as italic; to highlight the common names in Table 4 the column is written in bold.\n\n\nShow the code\nlibrary(iBats)\n\n# List of bat common names and the scientific names\nBatCommon &lt;- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Myotis alcathoe\" = \"Alcathoe\",\n  \"Myotis bechsteinii\" = \"Bechstein's\",\n  \"Myotis brandtii\" = \"Brandt's\",\n  \"Myotis daubentonii\" = \"Daubenton's\",\n  \"Myotis mystacinus\" = \"Whiskered\",\n  \"Myotis spp.\" = \"Myotis\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\",\n  \"Nyctalus leisleri\" = \"Leisler's\",\n  \"Plecotus auritus\" = \"Brown long-eared\",\n  \"Plecotus austriacus\" = \"Grey long-eared\",\n  \"Pipistrellus nathusii\" = \"Nathusius pipistrelle\",\n  \"Myotis nattereri\" = \"Natterer's\",\n  \"Nyctalus noctula\" = \"Noctule\",\n  \"Nyctalus spp.\" = \"Noctule or Leisler's\",\n  \"Eptesicus serotinus\" = \"Serotine\",\n  \"Pipistrellus pipistrellus\" = \"Common pipistrelle\",\n  \"Pipistrellus pygmaeus\" = \"Soprano pipistrelle\",\n  \"Pipistrellus spp.\" = \"Pipistrelle\",\n  \"Plecotus spp.\" = \"Long-eared\")\n\n# From Scientific name create a Common Name Vector \nstatics$Common &lt;-  unname(BatCommon[statics$Species])\n\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(gt)\n\nstatics %&gt;% \n  sample_n(10) %&gt;% \n  select(Description, DateTime, Species, Common) %&gt;% \n  # Table made with library(gt)\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %&gt;% \n     # Make bat common name bold\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = Common\n    )\n  ) %&gt;% \n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime)\n\n\n\n\n\n\n\n\nTable 4: From the Scientific Name Create a Common Name Vector\n\n\nDescription\nDateTime\nSpecies\nCommon\n\n\n\n\nStatic 4\n2016-06-13 02:14:51\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 1\n2016-06-06 00:20:18\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 4\n2016-07-30 22:25:21\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 4\n2016-07-29 00:07:42\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 4\n2016-07-27 03:54:21\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 2\n2016-09-19 21:01:39\nPipistrellus spp.\nPipistrelle\n\n\nStatic 4\n2016-07-31 22:39:33\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 4\n2016-07-29 01:26:49\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 1\n2016-06-21 01:06:47\nPipistrellus pipistrellus\nCommon pipistrelle\n\n\nStatic 4\n2016-10-16 19:13:08\nPipistrellus pipistrellus\nCommon pipistrelle"
  },
  {
    "objectID": "meta.html#national-grid-coordinates",
    "href": "meta.html#national-grid-coordinates",
    "title": "Meta Data",
    "section": "4 National Grid Coordinates",
    "text": "4 National Grid Coordinates\nAdding a A Country’s grid reference coordinates as meta data is useful; it allows a friendly export to other GIS and engineering drawing software (e.g. QGIS, ArcView® and AutoCAD®). A Country’s grid reference coordinates can be transformed from the Longitude and Latitude; in the tidy statics data longitude and latitude are based on the World Geodetic System 19844 (WGS84), the green column in Table 5 shows the British National Grid coordinates obtained from the longitude and latitude.\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(sf) # Simple features access between data and GIS\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# Select Longitude & Latitude from the statics data in the iBats package\nlon_lat &lt;- statics %&gt;% \n  select(lon = Longitude, lat = Latitude)\n\nlon_lat = st_as_sf(lon_lat, coords = c(\"lon\", \"lat\"))\n\n# Set the original coordinate reference system (CRS)\n# The EPSG code is used to define the CRS\ndata_WSG84 = st_set_crs(lon_lat, 4326)\n\n# Transform the existing coordinates to the new projection\n# British National Grid is the new projection which as an EPSG:27700\ndata_BNG = st_transform(data_WSG84, 27700)\n\n# Create simple feature geometry list column\ndata_BNG_geom &lt;- st_geometry(data_BNG)\nnc2 = st_sf(geom=data_BNG_geom)\n\n# retrieve coordinates in matrix form\ndata_BNG_matrix &lt;- st_coordinates(nc2) \n\n#Assign Eastings and Northings to seperate columns\nEasting &lt;- data_BNG_matrix[,1]\nNorthing &lt;- data_BNG_matrix[,2]\n\n# Make a data.frame\ndata_BNG_df &lt;- tibble(Easting, Northing)\n\n# Make a British National Grid Reference column (\"GridRef) \n# keep the Easting & Northings columns\ndata_BNG_df &lt;- data_BNG_df %&gt;% \n  unite(\"GridRef\", c(\"Easting\", \"Northing\"), sep = \",\", remove = FALSE) \n\n# Add columns to the statics data set\nstatics_plus &lt;- cbind(statics, data_BNG_df)\n\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(gt)\n\nstatics_plus %&gt;% \n  sample_n(10) %&gt;% \n  select(Species, Longitude, Latitude, GridRef) %&gt;% \n  # Table made with library(gt)\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"forestgreen\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(GridRef)\n    )\n  ) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"forestgreen\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_column_labels(\n      columns = c(GridRef)\n    )\n  ) %&gt;% \n  tab_options(data_row.padding = px(2))\n\n\n\n\n\n\n\n\nTable 5: From the Longitude and Latitude Create a Vector of the British National Grid Coordinates\n\n\nSpecies\nLongitude\nLatitude\nGridRef\n\n\n\n\nPipistrellus pipistrellus\n-3.591048\n50.33094\n286854.431403263,49101.2549532561\n\n\nMyotis spp.\n-3.591808\n50.33126\n286801.102694949,49137.9914956368\n\n\nPipistrellus pipistrellus\n-3.591798\n50.33132\n286801.957123455,49144.6474465514\n\n\nPipistrellus pipistrellus\n-3.591878\n50.33141\n286796.477591845,49154.7760258182\n\n\nPipistrellus pipistrellus\n-3.595008\n50.33221\n286575.621663931,49248.4957881758\n\n\nPipistrellus pipistrellus\n-3.591768\n50.33133\n286804.11602111,49145.7136310115\n\n\nPipistrellus pipistrellus\n-3.591758\n50.33132\n286804.803937794,49144.5865421783\n\n\nPipistrellus pipistrellus\n-3.592228\n50.33091\n286770.378328093,49099.7158903753\n\n\nPlecotus spp.\n-3.592583\n50.33323\n286750.61980236,49357.5417145688\n\n\nPipistrellus pipistrellus\n-3.593018\n50.33101\n286714.381797414,49111.5932755259"
  },
  {
    "objectID": "meta.html#bat-activity-time",
    "href": "meta.html#bat-activity-time",
    "title": "Meta Data",
    "section": "5 Bat Activity Time",
    "text": "5 Bat Activity Time\nThe limitation of bat passes has been recognised (Sowler and Middleton 2013), bat identification software that use full spectrum recording, generate other characteristics from a bat call, or sequence of calls; these characteristics can be used to calculate other indices of activity. Elekon’s BatExplorer5 and Wildlife Acoustics’ Kaleidoscope6 produce the number of calls or pulses in an recording together with the:\n\naverage duration of the call or sequence of calls\n\naverage span of time between calls\n\nThe calls, duration and span characteristics, see Figure 1, supply an opportunity to calculate the time a bat is present (i.e near the detector); this bat activity time provides the length of time a bat is nearby during the observation, and is a helpful measurement when assessing bat activity.\nThe Bat Activity Time , in seconds, can be calculated with Equation 1:\n\\[BatActivityTime\\ =\\ \\dfrac{calls\\left(duration\\ + span\\right)}{1000} \\tag{1}\\]\nWhere:\ncalls - number of calls\nduration - average call length (ms)\nspan - average time between calls (ms)\nThe division by 1000 is to convert milliseconds(ms) to seconds\n\n\n\nFigure 1: Calculating Bat Activity Time\n\n\n\n\n\n\n\n\nNote\n\n\n\nCalculating the time bats are present, enhances the bat activity narrative; an extended bat presence may indicate feeding, while a short duration could mean commuting. Too often this information remains unexploited.\n\n\nTable 6 shows the calculated BatActivityTime from a .csv file(BatExplorer) exported from Elekon AG BatExplorer software. The BatExplorer csv file is in the iBats package and describes a transect recorded with a Batlogger M bat detector near the the River Tavy, West Devon.\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# BatExplorer csv file is from the iBats package\nBatExplorer %&gt;% \n  mutate(calls = `Calls [#]`,\n         duration = `Mean Call Lenght [ms]`,\n         span = `Mean Call Distance [ms]`,\n         # Calculate BatActivityTime in seconds\n         BatActivityTime = calls * (duration + span) / 1000) \n\n\n\n\nShow the code\nlibrary(gt)\n\nBatExplorer %&gt;% \n  mutate(calls = `Calls [#]`,\n         duration = `Mean Call Lenght [ms]`,\n         span = `Mean Call Distance [ms]`,\n         # Calculate BatActivityTime in seconds\n         BatActivityTime = calls * (duration + span) / 1000) %&gt;% \n  #Select just the columns used in the calculation and a few rows of data\n  select(Species = `Species Text`, \n         calls, \n         duration, \n         span, \n         `BatActivityTime (seconds)` = BatActivityTime) %&gt;% \n  head(n=10L) %&gt;% \n  # Table made with library(gt)\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"wheat\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = c(`BatActivityTime (seconds)`)\n    )\n  ) %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"wheat\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(`BatActivityTime (seconds)`)\n    )\n  ) %&gt;% \n  tab_options(data_row.padding = px(2))\n\n\n\n\n\n\n\n\nTable 6: BatActivityTime from a .csv exported from BatExplorer\n\n\nSpecies\ncalls\nduration\nspan\nBatActivityTime (seconds)\n\n\n\n\nPipistrellus pygmaeus\n12\n7.0\n90\n1.1640\n\n\nNyctalus noctula\n18\n23.8\n340\n6.5484\n\n\nNyctalus noctula\n34\n16.0\n150\n5.6440\n\n\nNyctalus noctula\n10\n14.0\n480\n4.9400\n\n\nPipistrellus pygmaeus\n30\n7.0\n90\n2.9100\n\n\nPipistrellus pygmaeus\n31\n5.0\n80\n2.6350\n\n\nPipistrellus pygmaeus\n30\n5.0\n80\n2.5500\n\n\nPipistrellus pygmaeus\n39\n5.0\n90\n3.7050\n\n\nPipistrellus pygmaeus\n48\n5.0\n90\n4.5600\n\n\nNyctalus noctula\n1\n8.5\n0\n0.0085"
  },
  {
    "objectID": "meta.html#footnotes",
    "href": "meta.html#footnotes",
    "title": "Meta Data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMeta data can also be a one line description (e.g. a site telephone number); here we follow the principles of tidy data where all the information is contained in a single row of the data file.↩︎\na full list of time zones can be found here https://en.wikipedia.org/wiki/List_of_tz_database_time_zones↩︎\nwith iBats::date_time_info()↩︎\nhttps://en.wikipedia.org/wiki/World_Geodetic_System↩︎\nhttp://www.batlogger.com/en/real-time-systems/batexplorer-2-software.html↩︎\nhttps://www.wildlifeacoustics.com/products/kaleidoscope-software-ultrasonic↩︎"
  },
  {
    "objectID": "reporting.html",
    "href": "reporting.html",
    "title": "One Click Reporting",
    "section": "",
    "text": "A full bat survey report produced, with one mouse click, from sound analysis data (i.e. after identifying the bat detector calls to species or genus with sound analysis) see Figure 1. One click reporting is achieved through literate programming (Knuth 1984); a procedure of mixing code and descriptive writing, in order to undertake and explain data analysis simultaneously in the same document. This is an efficient practice of workflow! A one click Word report see Section 2.1. A one click PowerPoint see Section 2.2."
  },
  {
    "objectID": "reporting.html#why-do-this",
    "href": "reporting.html#why-do-this",
    "title": "One Click Reporting",
    "section": "1 Why Do This?",
    "text": "1 Why Do This?\nThe advantages of this approach to bat data science are appreciable:\n\nWorkflow\n\nReduces (and can eliminate) any copy and paste activity\nReports are easily created (one click) with new data or updated with revised data\nThe time and effort producing reports can be reduced; by several orders of magnitude!\n\nReproducible\n\nThe report is reproducible by yourself (and others1); convenient when returning to a project after many months or years!\n\n\nOpen Source\n\nThe Quarto or R Markdown file, the literate program document, is simple text that can be edited with any text editor; although it’s recommended to use friendly integrated development environments like RStudio2.\n\nThe software3 which reads the literate program document and makes the report in: Word, PDF, PowerPoint or Dashboard are open source and free to use.\n\n\nWhat’s the disadvantage?\n\nCoding\n\nThe literate program document requires coding skills to write (these web pages are designed to help with the coding).\nCoding skills in ecology are generally underdeveloped (although university education of ecology is increasingly taking a coding approach to data science); it should be noted little or no coding skills are required to render the report.\n\n\n\n1.1 Evidence Led Reporting\nLiterate programming assists data science and reproducibility, promoting evidence led reporting and decision making. Reports are often produced for regulatory bodies, central government or local authorities, these organisations have mandatory strategies for the use of science, evidence and evaluation in there advice and actions, and the legality of their decisions(England 2020)."
  },
  {
    "objectID": "reporting.html#bat-report-from-tidy-data",
    "href": "reporting.html#bat-report-from-tidy-data",
    "title": "One Click Reporting",
    "section": "2 Bat Report from Tidy Data",
    "text": "2 Bat Report from Tidy Data\n\n2.1 Microsoft Word\nThe complete R Markdown text (the .Rmd file) that produces a simple bat report from the statics tidy data4 is shown below; it can be copied to the clip board and rendered (knitted) into the Word report illustrated in Figure 2.\n---\ntitle: \"Simple Bat Report\"\noutput: \n  officedown::rdocx_document: default\ndate: \"21 June, 2023\"\nauthor: \"An Ecologist\"\n---\n\n```{r include=FALSE}\nlibrary(knitr)\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(ggrepel)\nlibrary(broman)\nlibrary(flextable)\nlibrary(officer)\nlibrary(officedown)\nlibrary(treemapify)\nlibrary(ggthemes) \n\nknitr::opts_chunk$set(echo = FALSE, warnings = FALSE, message = FALSE)\nknitr::opts_chunk$set(fig.cap = TRUE)\n\n# A vector used to give the species a specific colour in the graphic; the colours\n# can be changed and other species added.\nbat_colours_sci &lt;- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n```\n\n__CONTENTS__\n&lt;!---BLOCK_TOC---&gt;\n__List of Figures__\n&lt;!---BLOCK_TOC{seq_id: 'fig'}---&gt;\n__List of Tables__\n&lt;!---BLOCK_TOC{seq_id: 'tab'}---&gt;\n\n```{r include=FALSE}\n##### Load your TIDY bat data here:\n# TidyBatData &lt;- read_csv(\"YourTidyData.csv\", col_names = TRUE)\n\n# Tidy bat data - example data from the iBats package\nTidyBatData &lt;- statics\n```\n\n\\newpage\n# TABLES\n\nThe simplest form of aggregation is a count of bats[^1]; as shown in Table \\@ref(tab:table01)\n[^1]: note:- in this case it is a count of bat passes\n\n```{r tab.id=\"table01\", tab.cap=\"Species and Number of Bat Passes\"}\nTidyBatData %&gt;%\n  group_by(Species) %&gt;% \n  count() %&gt;% \n  #arrange descending\n  arrange(desc(n)) %&gt;% \n  # rename n as count\n  rename(`Bat Species` = Species, Count = n) %&gt;% \n  # so table is produced with individual species on one row\n  ungroup() %&gt;% \n  flextable() %&gt;%\n  width(j = 1, width = 2.5) %&gt;%\n  italic(j = 1, italic = TRUE, part = \"body\") %&gt;%\n  bg(bg = \"black\", part = \"header\") %&gt;%\n  color(color = \"white\", part = \"header\")\n```\n\n\\newpage\n# FIGURES  \n\nFigure \\@ref(fig:graph01) shows the count of all the species observations as a dot chart and Figure \\@ref(fig:graph02) shows a treemap of monthly bat pass activity.\n\n```{r graph01, fig.cap=\"Count of All Species Observations\", fig.height=7, fig.width=6}\n\ng_data &lt;- TidyBatData %&gt;% \ngroup_by(Species) %&gt;% \ncount() %&gt;% \nmutate(total = add_commas(n),\n       label = stringr::str_c(Species, \": \", total))\n  \ngraph_bat_colours &lt;- iBats::bat_colours(g_data$Species, colour_vector = bat_colours_sci)\n\np &lt;- ggplot(g_data, aes(y = reorder(Species, n), x = n, fill = Species)) +\n  geom_point(colour = \"black\", size = 5) +\n  geom_label_repel(data = g_data, aes(label = label),\n                   nudge_y = -0.25,\n                   nudge_x = ifelse(g_data$n &lt; 100, 0.33, -0.33),\n                   alpha = 0.7) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_x_log10(sec.axis = dup_axis()) +\n  annotation_logticks(sides = \"tb\") +\n  labs(x = \"Bat Observations (Number of Passes)\",\n       caption = \"Note: Log scale used\") +\n  theme_bw() + \n  theme(legend.position = \"none\", \n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.text.x = element_text(size=12, face=\"bold\"), \n        axis.text.y = element_blank(), \n        axis.ticks.y = element_blank(),\n        strip.text = element_text(size=12, face=\"bold\", colour = \"white\"), \n        axis.title.x = element_text(size=12, face=\"bold\"), \n        axis.title.y = element_blank())\n\np\n```\n\n\\newpage\n```{r graph02, fig.cap=\"Monthly Bat Activity\", fig.height=7, fig.width=6}\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\ngraph_data &lt;- statics_plus %&gt;%\n  group_by(Species, Month) %&gt;%\n  tally()\n\nggplot(graph_data, aes(area = n, fill = Month, label = Species, subgroup = Month)) +\n  scale_fill_tableau(palette = \"Tableau 10\") + #\n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(place = \"centre\", grow = T, alpha = 0.9, colour = \"grey20\", min.size = 0) +\n  geom_treemap_text(colour = \"grey90\", place = \"topleft\", fontface = \"italic\", reflow = T, min.size = 0, alpha = 0.9) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n```\nThe three page Word report shown in Figure 2 is a rudimentary example; it could be expanded to include any of the tables and graphs shown on these web pages. The .Rmd file is rendered into a Microsoft Word document; this is a convenient file format easily allowing further editing by others in the survey team. The simple report in Figure 2 has a tables of contents and cross referencing it can also be rendered directly into the house/company style by specifying a reference_docx file5.\n\nFigure 2: Bat Survey Word Report\n\n\n\n   \n\n\n\n\n\n\n2.2 PowerPoint\nThe R Markdown text (the .Rmd file) that produces a PowerPoint presentation on the data files in the iBats package is shown below; it can be copied to the clip board and rendered (knitted) into the PowerPoint presentation illustrated in Figure 3.\n---\ndate: \"21 June 2023\"\nauthor: \"Steve Markham\"\ntitle: \"The iBats::_Data Files_\"\noutput: \n  officedown::rpptx_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, warnings = FALSE, message = FALSE)\n\nlibrary(officedown)\nlibrary(ggplot2)\nlibrary(rvg)\nlibrary(tidyverse)\nlibrary(flextable)\nlibrary(officer)\nlibrary(sf)\nlibrary(ggspatial)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\nlibrary(iBats)\n\n```\n## Annex II Species in `iBats::Statics`\n\n```{r layout='Two Content', ph=officer::ph_location_left()}\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\nAnnexII &lt;- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\ntable_border &lt;- fp_border(color = \"black\", width = 1) # from library(officer)\n\nstatics_plus %&gt;%\n  filter(Species %in% AnnexII) %&gt;%\n  group_by(Species) %&gt;%\n  count() %&gt;% \n  rename(`Bat Species` = Species, Count = n) %&gt;%\n  flextable(col_keys = colnames(.)) %&gt;%\n  italic(j = 1, italic = TRUE, part = \"body\") %&gt;% \n  fontsize(part = \"header\", size = 12) %&gt;%\n  fontsize(part = \"body\", size = 12) %&gt;%\n  colformat_double(j = \"Count\", digits = 4, big.mark = \",\") %&gt;%\n  width(j = 1, width = 2.5) %&gt;%\n  width(j = 2, width = 1) %&gt;%\n  border_inner_h(part = \"body\", border = table_border) %&gt;%\n  hline_bottom(part = \"body\", border = table_border) %&gt;%\n  bg(bg = \"black\", part = \"header\") %&gt;%\n  color(color = \"white\", part = \"header\")\n\n```\n\n```{r layout='Two Content', ph=officer::ph_location_right()}\n\n\n\ngraph_data &lt;- statics_plus %&gt;%\n  filter(Species %in% AnnexII) %&gt;%\n  group_by(Species) %&gt;%\n  count() \n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours_default(graph_data$Species)\n\nmygg &lt;- ggplot(graph_data, aes(x = \"\", y = n, fill = Species)) +\n  geom_bar(width = 1, stat = \"identity\") +\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = \"Bat Pass Observations (Nr)\",\n    fill = \"Species\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    legend.text = element_text(face = \"italic\"),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    strip.text = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_blank()\n  ) +\n  guides(fill=guide_legend(ncol =1))\n\n\ndml(ggobj = mygg)\n\n```\n\n## Open Source Maps \n\n- Openstreet map\n  - created by the online community\n  - free to use (open license)\n- Outline maps (counties, parish ...)\n  - from the Office for National Statistics\n  - used under the Open Government Licence\n  - at a country scale the `rnaturalearth` package\n\n## iBats::Lydford\n\n```{r ph=officer::ph_location_left()}\n\n#Outline maps countries\nworldmap &lt;- ne_countries(scale = 'medium', type = 'map_units',\n                         returnclass = 'sf')\n\n# GB only\nGBcountires &lt;- c(\"England\", \"Scotland\", \"Wales\")\nGB &lt;- worldmap %&gt;% \n  filter(name %in% GBcountires) %&gt;% \n  select(geometry)\n\n# Make location point for Mary Tavy Transect\nMaryTavyLoc &lt;- MaryTavy %&gt;% \n  summarise(lat = median(`Latitude [WGS84]`),\n            lon = median(`Longitude [WGS84]`)) %&gt;% \n  st_as_sf(coords = c(\"lon\", \"lat\")) %&gt;% \n  st_set_crs(4326) %&gt;% \n  # Convert coord reference system to British National Grid\n  st_transform(crs = 27700)\n\np1 &lt;- ggplot() +\n  geom_sf(data = GB,\n          linewidth = 0.25,\n          colour = \"black\",\n          fill = \"#228b22\") +\n  geom_sf(data = MaryTavyLoc,\n          shape = 23,\n          size = 6,\n          colour = \"#00558e\",\n          fill = \"#fab824\") +\n  theme_void() \n\ndml(ggobj = p1)\n\n``` \n\n```{r ph=officer::ph_location_left(), eval = FALSE}\n\n# Make location point for Mary Tavy Transect\nMaryTavyLoc &lt;- MaryTavy %&gt;% \n  summarise(lat = median(`Latitude [WGS84]`),\n            lon = median(`Longitude [WGS84]`)) %&gt;% \n  st_as_sf(coords = c(\"lon\", \"lat\")) %&gt;% \n  st_set_crs(4326) %&gt;% \n  # Convert coord reference system to British National Grid\n  st_transform(crs = 27700)\n\n\n# Load outline map\nGB &lt;- sf::st_read(\"maps/GeneralGB/CTYUA_Dec_2017_GCB_GB.shp\", quiet = TRUE) %&gt;% \n  filter(ctyua17nm == \"Devon\")\n\n# Plot map and Location\np2 &lt;- ggplot() +\n  geom_sf(data = GB,\n          linewidth = 0.25,\n          colour = \"#228b22\",\n          fill = \"#98FB98\") +\n  geom_sf(data = MaryTavyLoc,\n          shape = 23,\n          size = 3,\n          colour = \"#00558e\",\n          fill = \"#fab824\") +\n  labs(title = \"Devon\") +\n  theme_void() +\n  theme(title = element_text(colour = \"#228b22\", size = 14, face = \"bold\"))\n\ndml(ggobj = p2)\n\n``` \n\n```{r ph=officer::ph_location_right()}\n\nspatial_data &lt;- Lydford%&gt;% \n  select(Species, longitude = Longitude, latitude = Latitude)\n\n# default colour values used by scale_fill_manual() - scientific names - UK bats only\ngraph_bat_colours &lt;- iBats::bat_colours_default(spatial_data$Species)\n\nspatial_data &lt;- st_as_sf(spatial_data, coords = c(\"longitude\", \"latitude\"), \n                 crs = 4326)\n\np1 &lt;- ggplot() +\n  annotation_map_tile(type = \"osm\",  zoomin = -1, alpha = 0.5) +\n  geom_sf(data = spatial_data, aes(fill = Species), shape = 21, alpha = 0.5, size = 4) +\n  annotation_scale(location = \"tl\") +\n  annotation_north_arrow(location = \"bl\", \n                         which_north = \"true\",\n                         style = north_arrow_fancy_orienteering()) +\n # fixed_plot_aspect(ratio = 1) +\n  coord_sf() +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  theme_void() +\n  theme(legend.position = \"right\",\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    title = element_text(colour = \"black\", size = 14),\n    legend.text = element_text(face = \"italic\"))\n\ndml(ggobj = p1)\n\n```\n\n## iBats::TavyOak\n\n\n- Time bats are active\n- Better than a count?\n- Foraging a large bubble?\n- Commuting a small bubble?\n- Modern bat detector data!\n\n```{r ph=officer::ph_location_right()}\nbat_colours_sci &lt;- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n# graph anotation\ngraph_sunrise &lt;- TavyOak$sunrise[1]\ngraph_sunset &lt;- TavyOak$sunset[1]\n\n# graph time limits x-axis\ngraph_limit1 &lt;- TavyOak$sunset[1] - lubridate::hours(1)\ngraph_limit2 &lt;- TavyOak$sunrise[1] + lubridate::hours(1)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours(TavyOak$Species, colour_vector = bat_colours_sci)\n\nmygg &lt;- ggplot(TavyOak, aes(y = 1, x = DateTime, fill = Species, size = bat_time)) +\n  geom_jitter(shape = 21, alpha = 0.7) +\n  geom_vline(\n    xintercept = graph_sunset,\n    colour = \"brown1\",\n    linetype = \"dashed\",\n    linewidth = 1,\n    alpha = 0.8\n  ) +\n  geom_vline(\n    xintercept = graph_sunrise,\n    colour = \"mediumblue\",\n    linetype = \"dashed\",\n    linewidth = 1,\n    alpha = 0.8\n  ) +\n  annotate(\"text\",\n    x = graph_sunset - lubridate::minutes(20),\n    y = 1,\n    label = \"Sunset\",\n    color = \"brown1\",\n    angle = 270\n  ) +\n  annotate(\"text\",\n    x = graph_sunrise + lubridate::minutes(20),\n    y = 1,\n    label = \"Sunrise\",\n    color = \"mediumblue\",\n    angle = 270\n  ) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  scale_x_datetime(\n    date_labels = \"%H:%M hrs\",\n    date_breaks = \"1 hour\",\n    limits = c(graph_limit1, graph_limit2)\n  ) +\n  labs(\n    fill = \"Species\",\n    size = \"Time Bat Was Present\\n(seconds)\",\n    y = \"For clarity activity is spread across the verstical scale\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"right\",\n    panel.grid.major.x = element_line(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10, angle = 270),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"),\n    legend.text = element_text(face = \"italic\"),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 10)\n  )\n\ndml(ggobj = mygg)\n\n``` \n\n## iBats::MaryTavy\n\n```{r layout='Title and Content', ph=officer::ph_location_type(type=\"body\")}\n\n\n###############################################################################\n# MaryTavy is data directly exported from BatExplorer and requires tidying!####\n###############################################################################\n\n#### Combine the two Species columns into one ##################################\n# Select Species column and remove (Species2nd & Species3rd)\ndata1 &lt;- MaryTavy %&gt;%\n  select(-`Species 2nd Text`) %&gt;% \n  rename(Species = `Species Text`)\n\n# Select Species2nd column and remove (Species & Species3rd)\ndata2 &lt;- MaryTavy %&gt;%\n  select(-`Species Text`) %&gt;%\n  filter(`Species 2nd Text` != \"-\") %&gt;% # Remove blank rows\n  rename(Species = `Species 2nd Text`) # Rename column\n\n# Add the datasets together into one\nMaryTavyTidying &lt;- dplyr::bind_rows(data1, data2)\n################################################################################\n\n\n#### Calculate bat activity time and prepare to make spatial data #############\ntidy_data &lt;- MaryTavyTidying %&gt;% \n  mutate(calls = `Calls [#]`,\n         duration = `Mean Call Lenght [ms]`,\n         span = `Mean Call Distance [ms]`,\n         # Calculate BatActivityTime in seconds\n         bat_time = calls * (duration + span) / 1000) %&gt;% \n  select(Species, bat_time)\n\n#Make species have common names\ntidy_data$Species &lt;- bat_common_default(tidy_data$Species)\n\n# Aggregate data into Species and count\ntidy_data %&gt;%\n  group_by(Species) %&gt;% \n  summarise(bat_time = sum(bat_time)) %&gt;% \n  arrange(desc(bat_time)) %&gt;% \n  mutate(bat_time = round(bat_time, digits = 0),\n         bat_time = lubridate::seconds_to_period(bat_time)) %&gt;% \n  rename(`Bat Activity Time` = bat_time)\n\n```\n\nFigure 3: PowerPoint Presentation"
  },
  {
    "objectID": "reporting.html#footnotes",
    "href": "reporting.html#footnotes",
    "title": "One Click Reporting",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nthe exact results can be reproduced if given access to the original data and Quarto® document containing the literate programming text of code and descriptive writing.↩︎\nRStudio is now known as Posit https://posit.co/; and now embraces R and Python.↩︎\ne.g. R https://www.r-project.org/, Python https://www.python.org/, R Markdown https://rmarkdown.rstudio.com/, Quarto® https://quarto.org/, RStudio https://posit.co/, Jupyter https://jupyter.org/.↩︎\nFrom the iBats package.↩︎\nMore information on the production of Word documents and PowerPoint presentations from R and R Markdown is available from the work of David Gohel see https://ardata-fr.github.io/officeverse/index.html.↩︎"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "There are many approaches to Bat Data Science, this section references the resources utilized to make these web pages. The references provide the background to the example code and with the web pages reveal how it can be extended or adapted to generate your own reports on bat surveys. All this can be undertaken with the R statistical programming language (R Core Team 2023) through RStudio (Posit team 2022); the materials applied, software and data, are open source.\nA prime resource for learning Bat Data Science with R are the the online books1, a comprehensive guide to these books and other R-resources is the Big Book of R by Oscar Baruffa. This page references the online books, packages, websites and other resources with a focus on Bat Data Science:"
  },
  {
    "objectID": "resources.html#general",
    "href": "resources.html#general",
    "title": "Resources",
    "section": "1 General",
    "text": "1 General\nR for Data Science (R4DS) is an excellent overview of data science with R; it introduces the tidyverse a collection of packages providing essential data science tools (Wickham et al. 2019; Wickham 2023); many of these individual packages are referenced below. The tidyverse packages have been widely adopted by R Data Scientists; all packages share an underlying design philosophy, grammar, and data structures.\nThere are many free learning resources online; well structured courses are:\n\nRStudio\nCoding Club especially for ecologists and environmental scientists.\nR for the Rest of US\n\nOther references:\nModern Data Science with R by Benjamin S. Baumer, Daniel T. Kaplan, and Nicholas J. Horton; a comprehensive guide to data science with R.\nFor an understanding of the Data Science versus Statistics (many argue they are the same) see David Donoho paper 50 Years of Data Science (Donoho 2017).\nUnderstanding the link between digital skills and data science see the Royal Statistical Society article.\nWhy spreadsheets aren’t great for data science listen to Tim Harford’s More or less on BBC sounds. For a litany of mathematical mistakes, many involving spreadsheets, see Matt Parker’s book Humble Pi A comedy of Maths Errors (Parker 2019).\nA comparison between R and Excel for data wrangling, conveying the advantages of R, has been undertaken by jumping rivers. Interestingly their blog also has a post on learning Excel as an R user; a good read for Excel users."
  },
  {
    "objectID": "resources.html#tidy-data",
    "href": "resources.html#tidy-data",
    "title": "Resources",
    "section": "2 Tidy Data",
    "text": "2 Tidy Data\nGetting data into R from csv and Excel files can be done with readr (Wickham, Hester, and Bryan 2023) and readxl (Wickham and Bryan 2023) packages respectively. See also Data import in R4DS.\nOnce loaded in the R environment it is stored as a tibble (Müller and Wickham 2023). A Tibble is tabulated data, in R terms a simplified data frame, making working in the tidyverse a little easier.\nData wrangling is made easy with functions from the dplyr (Wickham, François, et al. 2023) and tidyr (Wickham, Vaughan, and Girlich 2023) packages. See also Tidy Data and Data transformation in R4DS.\nThe manipulation of text was through the stringr (Wickham 2022) package. See also Strings in R4DS.\nThe philosophy of tidy data is described by (Wickham 2014) (Tierney and Cook 2023).\nData validation is made effective through the validate (van der Loo and de Jonge 2022) package."
  },
  {
    "objectID": "resources.html#meta-data",
    "href": "resources.html#meta-data",
    "title": "Resources",
    "section": "3 Meta Data",
    "text": "3 Meta Data\nThe computation with dates and times can be accomplished with lubridate (Spinu, Grolemund, and Wickham 2023) package. See also Dates and times in R4DS.\nSuntimes can be obtained with the suncalc (Thieurmel and Elmarhraoui 2022) package.\nThe hms (Müller 2022) package package provides a simple class for storing durations or time-of-day values and displaying them in the hh:mm:ss format."
  },
  {
    "objectID": "resources.html#aggregation",
    "href": "resources.html#aggregation",
    "title": "Resources",
    "section": "4 Aggregation",
    "text": "4 Aggregation\nTables have been produced with gt (Iannone et al. 2022), gtExtras (Mock 2022) and the flextable (Gohel and Skintzos 2023) packages.\nThe broman (Broman 2022) package provided some useful R functions.\nThe glue (Hester and Bryan 2022) package that allows variables to be passed directly into strings."
  },
  {
    "objectID": "resources.html#visualisation",
    "href": "resources.html#visualisation",
    "title": "Resources",
    "section": "5 Visualisation",
    "text": "5 Visualisation\nThe graphics have been produced using the R package ggplot2 (Wickham, Chang, et al. 2023).\nThere are many packages that extend ggplot’s capability:\n\nscales (Wickham and Seidel 2022) package improves the clarity of scales on ggplot graphics.\n\nggrepel (Slowikowski 2023) for tidy graph labels that don’t overlap.\n\ntreemapify package for plotting treemaps.\n\nggthemes (Arnold 2021) package does many graph themes but used mainly for the colour pallet “Tableau 10”\n\nOnline books:\n\nggplot2 by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen; helps understand how ggplot works, giving the power to tailor any plot specifically.\n\nFundamentals of Data Visualization by Claus O. Wilke; aims to provide a guide to making visualizations that reflect the data, tell a story, and look professional.\n\nSee also Graphics for communication in R4DS.\nColour can play a large part in visualisation and colours are easily misused; for an understanding of the issues see the paper Misuse of Colour in Science Communication (Crameri, Shephard, and Heron 2020).\nThe UK civil servants working in government analysis have produced constructive guidance on data visualisation through charts."
  },
  {
    "objectID": "resources.html#maps",
    "href": "resources.html#maps",
    "title": "Resources",
    "section": "6 Maps",
    "text": "6 Maps\nThe excellent online book Geocomputation with R by Robin Lovelace, Jakub Nowosad and Jannes Muenchow. It teaches a range of spatial skills, including: reading, writing and manipulating geographic data; making static and interactive maps; applying geocomputation to solve real-world problems; and modelling geographic phenomena.\nsf (Pebesma 2018, 2023) provides support for simple features, a standardized way to encode spatial vector data2.\nggspatial (Dunnington 2022) allows spatial data to be plotted with the power of the ggplot2. It also gives access to Open Street Map tiles.\nosmdata (Padgham et al. 2023) is an R package for downloading and using data from OpenStreetMap (OSM). Unlike the ggspatial package, which facilitates the download of raster tiles, osmdata provides access to the vector data underlying OSM.\nelevatr (Hollister 2022) a package for accessing elevation data from various sources.\nterra (Hijmans 2023b) a package of methods for spatial data analysis with vector (points, lines, polygons) and raster (grid) data.\ntanaka (Giraud 2022) a package the performs the Tanaka method enhancing the representation of topography on a map using shaded contour lines.\nmetR (Campitelli 2022) a package with several functions and utilities that make R better for handling meteorological data; used here for conour plots.\nraster (Hijmans 2023a) a package for reading, writing, manipulating, analyzing and modeling of spatial data.\nrnaturalearth (Massicotte and South 2023) A package with Natural Earth data including world and country maps."
  },
  {
    "objectID": "resources.html#statistics",
    "href": "resources.html#statistics",
    "title": "Resources",
    "section": "7 Statistics",
    "text": "7 Statistics\nR, specifically base R (R Core Team 2023) is a comprehensive software environment for statistical computing and graphics.\nSummary statistics have been produced with the mosaic (Pruim, Kaplan, and Horton 2022) package.\nbroom (Robinson, Hayes, and Couch 2023) a package that takes the messy output of built-in functions in R and turns them into tidy tibbles; these can be easily tabulated.\ndunn.test (Dinno 2017) a package that performs Dunn’s test of multiple comparisons using rank sums.\ninfer (Bray et al. 2022) a package for statistical inference that coheres with the tidyverse design framework, for example bootstrapping.\nvegan (Oksanen et al. 2022) package of ordination methods, diversity analysis and other functions for community and vegetation ecologists.\nOnline books:\nIntroduction to Modern Statistics by Mine Çetinkaya-Rundel and Johanna Hardin; an contemporary guide to statistical thinking and methods.\nStatistical Inference via Data Science by Chester Ismay and Albert Y. Kim; Statistical Inference via Data Science: A ModernDive into R and the Tidyverse.\nModern Statistics with R by Måns Thulin; covers wrangling and exploring data to inference and predictive modelling.\nOther references:\nThe Office for Statistics Regulation the independent regulatory arm of the UK Statistics Authority has produced two key reference documents that have relevance for data scientists who publish in the public domain3\n\nThe Code of Practice for Statistics sets the standards that producers of official statistics should commit to.\nStatistical Literacy – it’s all in the communication this is first UK official documentation on how statistics should be communicated?"
  },
  {
    "objectID": "resources.html#reporting",
    "href": "resources.html#reporting",
    "title": "Resources",
    "section": "8 Reporting",
    "text": "8 Reporting\nReports can be produced through literate programming (Knuth 1984) with R Markdown (Allaire et al. 2023; Xie, Allaire, and Grolemund 2018; Xie, Dervieux, and Riederer 2020) and Quarto®; to use Quarto with R, the rmarkdown R package should be installed; the rmarkdown package will also install the knitr package (Xie 2014, 2015, 2023) to ensure documents render containing R code.\nRending reports into Microsoft Word or PowerPoint can be greatly enhanced by:\nofficedown (Gohel and Ross 2023) a package facilitating the formatting of Microsoft Word documents produced by R Markdown.\nofficer (Gohel 2023) a package that lets R users manipulate Word .docx and PowerPoint *.pptx documents.\nOnline books:\nofficeverse by David Gohel; reporting from R with the packages officer, officedown}, flextable.\nR Markdown Cookbook by Yihui Xie, Christophe Dervieux, Emily Riederer; a book designed to provide a range of examples on how to extend the functionality of R Markdown documents.\nR Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, Garrett Grolemund; details the large number of tasks that you could do with R Markdown.\nA special mention should go to John MacFarlane who created Pandoc a package to convert Markdown/RMarkdown documents (and many other types of documents) to a large variety of output formats.\nOnline videos:\nR Markdown Advanced Tips to Become a Better Data Scientist… | With Tom Mock\nWelcome to Quarto Workshop! | Led by Tom Mock, RStudio"
  },
  {
    "objectID": "resources.html#interactive",
    "href": "resources.html#interactive",
    "title": "Resources",
    "section": "9 Interactive",
    "text": "9 Interactive\nleaflet (Cheng, Karambelkar, and Xie 2023) one of the most popular open-source JavaScript libraries for interactive maps.\nplotly (Sievert et al. 2022) R graphing library that makes interactive, publication-quality graphs.\nDT (Xie, Cheng, and Tan 2023) DataTables displaying R matrices or data frames as interactive HTML tables that support filtering, pagination, and sorting.\nreactable (Lin 2023) nteractive data tables for R.\nSee also htmlwidgets for R"
  },
  {
    "objectID": "resources.html#footnotes",
    "href": "resources.html#footnotes",
    "title": "Resources",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNearly all the online reference books on R are created within the R environment; most commonly with RMarkdown or Quarto.↩︎\nsee https://en.wikipedia.org/wiki/Simple_Features↩︎\nIn support of a planning application for example.↩︎"
  },
  {
    "objectID": "statistics.html",
    "href": "statistics.html",
    "title": "Statistics",
    "section": "",
    "text": "Statistical tests are undertaken to improve ecological understanding, separating the single from the noise. It enhances the ecological description when writing reports, making the report more evidenced based and therefore more robust and reproducible by others. When the data is not clear, or there is too much data to see, good statistics brings comprehension. Then there is a tendency to perceive connections or meaningful patterns between unrelated or random things, termed apophenia; here statistical testing can demonstrate it is random or unrelated.\nThere are many reference books for ecologists on statistics such as the gentle introductions Statistics for Terrified Biologists (Emden 2008), Practical Statistics for Field Biology (Fowler, Cohen, and Jarvis 1998) and Choosing and Using Statistics: A Biologist’s Guide (Dytham 2011). More comprehensive guides to ecological statistics are available from Numerical Ecology (Legendre and Legendre 2012) and Analysiing Ecological Data (Zuur, Ieno, and Smith 2007). The Numerical Ecology with R (Borcard, Gillet, and Legendre 2011) has a focus on ecological statistics using the R environment, while recent theory and application can be found in Ecological Statistics (Fox, Negrete-Yankelevich, and And 2015)."
  },
  {
    "objectID": "statistics.html#summary-statistics",
    "href": "statistics.html#summary-statistics",
    "title": "Statistics",
    "section": "1 Summary Statistics",
    "text": "1 Summary Statistics\nThe Common Pipistrelle passes have been aggregated for every 30 minutes; Table 1 shows summary statistics for these bat passes during September and October. The statistics for September and October look similar and this is confirmed by the density plot shown in Figure 1.\n\n\nShow the code\nTable &lt;- agg_data  %&gt;%\n  group_by(MonthFull, DateTime30) %&gt;% \n  tally() %&gt;% \n  rename(Month = MonthFull) %&gt;% \n  summarise(Min = min(n, na.rm = T),\n            Q1 = quantile(n, c(0.25), na.rm = T),\n            Mean = mean(n, na.rm = T),\n            Median = median(n, na.rm = T),\n            Q3 = quantile(n, c(0.75), na.rm = T),\n            Max = max(n, na.rm = T),\n            sd = sd(n, na.rm = T),\n            Nr = n())\nTable %&gt;% \nflextable() %&gt;%\n  fontsize(size = 9.5, part = \"all\") %&gt;% \n  width(j = 1, width = 1) %&gt;%\n  width(j = 2:9, width = 0.6) %&gt;%\n  bg(bg = \"black\", part = \"header\") %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;% \n  colformat_int(j = 9, big.mark = \" \") %&gt;% \n  colformat_double(j = c(4, 8), digits = 2)\n\n\n\n\nTable 1:  Summary Statistics for Common Pipistrelle Passes MonthMinQ1MeanMedianQ3MaxsdNrSeptember111.921281.5583October113.0824163.2891\n\n\n\nWhere:\n\nMin:- Minimum value.\n\nQ1:- Lower quartile, or first quartile (Q1), the value under which 25% of data points are found when they are arranged in increasing order.\n\nMean:- Arithmetic mean of a dataset is the sum of all values divided by the total number of values.\n\nMedian:- The middle number; found by ordering all data points and picking out the one in the middle (or if there are two middle numbers, taking the mean of those two numbers).\n\nQ3:- Upper quartile, or third quartile (Q3), is the value under which 75% of data points are found when arranged in increasing order.\nMax:- Maximum value.\n\nsd:- Standard deviation, a summary measure of the differences of each observation from the mean.\n\nNr:- Number of values.\n\n\n\nShow the code\nagg_data2 &lt;- agg_data %&gt;% \n  group_by(MonthFull, DateTime30) %&gt;%\n  tally() %&gt;% \n  rename(Month = MonthFull) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = \"Month\", values_from = \"n\")\n\n\nSep &lt;- agg_data2 %&gt;% \n  select(September) %&gt;% \n  filter(!is.na(September)) %&gt;% \n  mutate(Passes = as.numeric(September),\n         Month = \"September\")\n\nOct &lt;- agg_data2 %&gt;% \n  select(October) %&gt;% \n  filter(!is.na(October)) %&gt;% \n  mutate(Passes = as.numeric(October),\n         Month = \"October\")\n\nCount30 &lt;- bind_rows(Sep, Oct)\n\nggplot(Count30, aes(Passes, fill = Month )) +\n  geom_density(alpha = 0.5) +\n  scale_fill_nejm() +\n  labs(x = \"Passes (Number / 30 minutes)\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\nFigure 1: Comon Pipistrelle Passes September and October"
  },
  {
    "objectID": "statistics.html#comparing-two-groups",
    "href": "statistics.html#comparing-two-groups",
    "title": "Statistics",
    "section": "2 Comparing Two Groups",
    "text": "2 Comparing Two Groups\nUsing the Wilcoxon signed rank test we can decide, using a hypothesis test, whether the population distributions, summarised in Table 1 and Figure 1 are identical. An advantage of the Wilcoxon signed rank test is that it can be undertaken without assuming the data follows the normal distribution; the density plot in Figure 1 shows the data is unlikely to be normal. The two data samples for September and October need to be independent; the number of passes recorded separately in September and October are distinct populations where the passes do not affect each other.\nIt is assumed The survey effort (length of time the bat detectors where deployed and the locations are the same for both months)\nWithout assuming the data to have normal distribution, decide at .01 significance level (p &lt; 0.01)1 if the observations of Common pipistrelle bats (every 30 minutes) for September and October have identical data distribution.\n\nThe null hypothesis H0: is that the common pipistrelle observation data for September and October are identical populations.\n\nThe alternate hypothesis H1: is that the common pipistrelle observation data of September and October are not identical populations.\n\nTo test the hypothesis, we apply the wilcox.test function to compare the independent samples.\n\n\nShow the code\nlibrary(broom)\n\nmw &lt;- wilcox.test(Passes ~ Month, data=Count30) \n\n#Tidy the out put into a table\ntidy(mw) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) \n\n\n\n\n\n\n\n\nTable 2: Summary Statistics for Common Pipistrell Passes\n\n\nstatistic\np.value\nmethod\nalternative\n\n\n\n\n4533\n0.0129358\nWilcoxon rank sum test with continuity correction\ntwo.sided\n\n\n\n\n\n\n\n\nResults from the the wilcox.test are shown in Table 2; as the p-value turns out to be 0.0129358, and is not less than the .01 significance level2, we do not reject the null hypothesis. At .01 significance level (p &lt; 0.01), we conclude that the common pipistrelle observation data for September and October are identical populations."
  },
  {
    "objectID": "statistics.html#comparing-more-than-two-groups",
    "href": "statistics.html#comparing-more-than-two-groups",
    "title": "Statistics",
    "section": "3 Comparing More Than Two Groups",
    "text": "3 Comparing More Than Two Groups\n\n3.1 An Obvious Difference\nThe statics data in the iBats package has some interesting Barbastelle (Barbastella barbastellus) bat activity, it would be interesting and aid our understanding if we compare the activity between static locations and see if they are significantly different.\nBefore undertaking any statistical test always visualise the data the statistical test is applied to. Barbastelle has been recorded at several locations see Figure 2.\nThe average bat pass rate per hour can been calculated for each night and each static location using the formula shown in Equation 1:\n\\[AverageActivity = \\frac{Batpasses}{Nightlength} \\tag{1}\\]\nWhere: Batpasses = number of bat pass during the night at the location\nNightlength = length of the night in decimal hours\nAverageActivity = average (mean) number of bat passes per hour for each night there was activity\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus)\n\n\ngraph_data &lt;- statics_plus %&gt;%\n    filter(Species == \"Barbastella barbastellus\") %&gt;% \n    group_by(Description, Night, night_length_hr) %&gt;%\n    # count number of passes per night by species - makes coloumn \"n\"\"\n    tally() %&gt;% \n    # calculate average bat passes per hour for each Night and species\n    mutate(ave_act_per_hr = n / night_length_hr) %&gt;%\n    # Remove Night Length column from the Table\n    select(-night_length_hr, -n) \n\nggplot(graph_data, aes(y = ave_act_per_hr, x = Description)) +\n                  geom_jitter(fill = \"#1f78b4\", #Barbastelle colour\n                              colour = \"black\", \n                              shape = 23, \n                              alpha = 0.7, \n                              size = 3) +\n                  geom_boxplot(colour = \"grey30\", fill = \"transparent\") + \n                  labs(y = \"Barbastelle Activity  \\n(Nightly Average Passes per Hour)\") +\n                  theme_bw() + \n                  theme(legend.position = \"none\", # No legend\n                  axis.text.x = element_text(size=12, face=\"bold\"), \n                  axis.text.y = element_text(size=12,face=\"bold\"), \n                  axis.title.y = element_text(face=\"bold\"), \n                  axis.title.x = element_blank(), # no y title (just bat names)\n                  panel.grid.major = element_blank(), #remove grid lines\n                  panel.grid.minor = element_blank())\n\n\n\n\n\nFigure 2: Barbastelle Activity at Each Static (Nightly Average Passes per Hour)\n\n\n\n\nThe comparison of locations is undertaken with the Wilcoxon signed rank test or Kruskal-Wallis test. The Kruskal–Wallis test is a rank-based test that is similar to the Wilcoxon signed rank test but can be applied to one-way data with more than two groups. If there are just two locations the Wilcoxon signed rank test should be applied. The Kruskal–Wallis test may be used when there are only two samples, but the Wilcoxon signed rank test is more powerful for two samples and is preferred. Both tests assume that the observations are independent. The probability threshold for statistical significance, which should always be chosen before the test is undertaken, is: P &lt; 0.05.\n\nThe Null Hypothesis: bat pass rates per hour are from distributions with the same median.\nThe Alternative Hypothesis: bat pass rates per hour are from distributions with a different median.\n\nThe function kruskal.test, from base R, is used to undertake the Kruskal-Wallis test. A rule of thumb for the Kruskal–Wallis test is each group, (in this case case the number of nightly average bats pace vales for each static location) must have a sample size of 5 or more.\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus)\n\n\ntest_data &lt;- statics_plus %&gt;%\n  filter(Species == \"Barbastella barbastellus\") %&gt;%\n  group_by(Description, Night, night_length_hr) %&gt;%\n  # count number of passes per night by species - makes coloumn \"n\"\"\n  tally() %&gt;%\n  # calculate average bat passes per hour for each Night and species\n  mutate(ave_act_per_hr = n / night_length_hr) %&gt;%\n  # Remove Night Length column from the Table\n  select(-night_length_hr, -n)\n\n\n# Check at least 2 locations and a minimum of 5 observations per location\n# Only do KW on locations with 5 or more observations\n# if just two locations do Mann Whitney\ncheck_data &lt;- test_data %&gt;%\n  group_by(Description) %&gt;%\n  tally()\n\n# filter for Statics with more than 5 values\nStaticsWithPlus5 &lt;- check_data %&gt;%\n  filter(n &gt;= 5) %&gt;%\n  pull(Description)\n\ntest_data &lt;- test_data %&gt;%\n  filter(Description %in% StaticsWithPlus5)\n\n# Extract the p-value from the kruskal.test\nstat_pvalue &lt;- kruskal.test(ave_act_per_hr ~ Description, data = test_data)$p.value\n\n\nWith reference to Figure 2 there are several static locations where the activity can be compared, this is more than two locations, therefore the Kruskal-Wallis test is undertaken rather than the Mann-Whitney-Wilcoxon test. Location 1 with only three results is excluded from the test.\nThe Kruskal-Wallis test undertaken for the Barbastelle at the following static locations: Static 2, Static 3, Static 4, and Static 5 produced a P value (9.17e-08) less than the chosen threshold for statistical significance of 0.05; therefore the null hypothesis is rejected, activity between some static locations is likely to be different.\nWhat the Kruskal-Wallis test does not indicate, is which static locations are different; to determine this we need to undertake post hoc testing, this can be undertaken with the Dunn’s Test.\n\n\nShow the code\nlibrary(dunn.test)\n\ndunn_result &lt;- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = \"bonferroni\")\n\n\nResults of the Dunn’s test, performed after the Kruskal-Wallis test (post hoc), are shown in Table 3.\n\n\nShow the code\ndf &lt;- tibble(dunn_result$comparisons, dunn_result$P.adjusted)\n\ncolnames(df) &lt;- c(\"Comparison\", \"P.adj\")\n\nresultsTable &lt;- df %&gt;%\n  filter(P.adj &lt; 0.05) %&gt;%\n  select(`Locations with a significant difference (P&lt;0.05)` = Comparison, `adjusted P ` = P.adj)\n\nresultsTable %&gt;%\n  flextable(col_keys = colnames(.)) %&gt;%\n  fontsize(part = \"header\", size = 12) %&gt;%\n  fontsize(part = \"body\", size = 12) %&gt;%\n  bold(part = \"header\") %&gt;%\n  autofit(add_w = 0.1, add_h = 0.1) %&gt;%\n  bg(bg = \"black\", part = \"header\") %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  align(align = \"center\", part = \"header\") %&gt;%\n  align(j = 2, align = \"right\", part = \"body\") %&gt;%\n  bold(j = 1, bold = TRUE, part = \"body\")     \n\n\n\n\nTable 3:  Results of Post-hoc testing with the Dunn’s Test Locations with a significant difference (P&lt;0.05)adjusted P Static 2 - Static 40.0000002372373Static 3 - Static 40.0004837731033Static 4 - Static 50.0013231129871\n\n\n\nThe Dunn’s Test carries out multiple comparisons therefore a P value adjustment needs to be made to avoid a false significant result. For this P value adjustment the Bonferroni method is applied; a simple technique for controlling the overall probability of a false significant result when multiple comparisons are to be carried out.\nTable 3 gives the results of the post hoc testing with the Dunn’s test and shows that Barbastelle activity at Location 4 is significantly different (at P&lt;0.05) to activity at Locations 2, 3, and 5.\nThe statistical tests show that Barbastelle bat activity recorded at Location 4 is significantly different; this knowledge is evidence based and can be stated with confidence when reporting.\n\n\n3.2 Less Obvious Difference\nFigure 3 shows Common pipistrelle activity for the static locations comparison of activity can be undertaken with the Kruskal-Wallis test with the following hypothesis:\n\nThe Null Hypothesis: bat pass rates per hour are from distributions with the same median.\nThe Alternative Hypothesis: bat pass rates per hour are from distributions with a different median.\n\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus)\n\n\ngraph_data &lt;- statics_plus %&gt;%\n    filter(Species == \"Pipistrellus pipistrellus\") %&gt;% \n    group_by(Description, Night, night_length_hr) %&gt;%\n    # count number of passes per night by species - makes coloumn \"n\"\"\n    tally() %&gt;% \n    # calculate average bat passes per hour for each Night and species\n    mutate(ave_act_per_hr = n / night_length_hr) %&gt;%\n    # Remove Night Length column from the Table\n    select(-night_length_hr, -n) \n\nggplot(graph_data, aes(y = ave_act_per_hr, x = Description)) +\n                  geom_jitter(fill = \"#ffff99\", #Common Pipistrelle colour\n                              colour = \"black\", \n                              shape = 23, \n                              alpha = 0.7, \n                              size = 3) +\n                  geom_boxplot(colour = \"grey30\", fill = \"transparent\") + \n                  labs(y = \"Common Pipistrelle Activity  \\n(Nightly Average Passes per Hour)\") +\n                  theme_bw() + \n                  theme(legend.position = \"none\", # No legend\n                  axis.text.x = element_text(size=12, face=\"bold\"), \n                  axis.text.y = element_text(size=12,face=\"bold\"), \n                  axis.title.y = element_text(face=\"bold\"), \n                  axis.title.x = element_blank(), # no y title (just bat names)\n                  panel.grid.major = element_blank(), #remove grid lines\n                  panel.grid.minor = element_blank())\n\n\n\n\n\nFigure 3: Common Pipistrelle Activity at Each Static (Nightly Average Passes per Hour)\n\n\n\n\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus)\n\n\ntest_data &lt;- statics_plus %&gt;%\n  filter(Species == \"Pipistrellus pipistrellus\") %&gt;%\n  group_by(Description, Night, night_length_hr) %&gt;%\n  # count number of passes per night by species - makes coloumn \"n\"\"\n  tally() %&gt;%\n  # calculate average bat passes per hour for each Night and species\n  mutate(ave_act_per_hr = n / night_length_hr) %&gt;%\n  # Remove Night Length column from the Table\n  select(-night_length_hr, -n)\n\n\n# Check at least 2 locations and a minimum of 5 observations per location\n# Only do KW on locations with 5 or more observations\n# if just two locations do Mann Whitney\ncheck_data &lt;- test_data %&gt;%\n  group_by(Description) %&gt;%\n  tally()\n\n# filter for Statics with more than 5 values\nStaticsWithPlus5 &lt;- check_data %&gt;%\n  filter(n &gt;= 5) %&gt;%\n  pull(Description)\n\ntest_data &lt;- test_data %&gt;%\n  filter(Description %in% StaticsWithPlus5)\n\n# Extract the p-value from the kruskal.test\nstat_pvalue &lt;- kruskal.test(ave_act_per_hr ~ Description, data = test_data)$p.value\n\n\nThe Kruskal-Wallis test undertaken for the Common pipistrelle at the following static locations: Static 1, Static 2, Static 3, Static 4, and Static 5 produced a P value (3.30e-16) less than the chosen threshold for statistical significance of 0.05; therefore the null hypothesis is rejected, activity between some static locations is likely to be different. The Dunn’s test can be applied to determine the static locations that are different.\n\n\nShow the code\ndunn_result &lt;- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = \"bonferroni\")\n\n\nResults of the Dunn’s test, performed after the Kruskal-Wallis test (post hoc), are shown in Table 4.\n\n\nShow the code\ndf &lt;- tibble(dunn_result$comparisons, dunn_result$P.adjusted)\n\ncolnames(df) &lt;- c(\"Comparison\", \"P.adj\")\n\nresultsTable &lt;- df %&gt;%\n  filter(P.adj &lt; 0.05) %&gt;%\n  select(`Locations with a significant difference (P&lt;0.05)` = Comparison, `adjusted P ` = P.adj)\n\nresultsTable %&gt;%\n  flextable(col_keys = colnames(.)) %&gt;%\n  fontsize(part = \"header\", size = 12) %&gt;%\n  fontsize(part = \"body\", size = 12) %&gt;%\n  bold(part = \"header\") %&gt;%\n  autofit(add_w = 0.1, add_h = 0.1) %&gt;%\n  bg(bg = \"black\", part = \"header\") %&gt;%\n  color(color = \"white\", part = \"header\") %&gt;%\n  align(align = \"center\", part = \"header\") %&gt;%\n  align(j = 2, align = \"right\", part = \"body\") %&gt;%\n  bold(j = 1, bold = TRUE, part = \"body\")     \n\n\n\n\nTable 4:  Results of Post-hoc testing with the Dunn’s Test Locations with a significant difference (P&lt;0.05)adjusted P Static 1 - Static 20.0000939731690135662070Static 1 - Static 30.0460478959637407314620Static 1 - Static 40.0000000000000007857217Static 2 - Static 40.0000001079868368327319Static 3 - Static 40.0000000296352155723235Static 4 - Static 50.0000000014826746844802\n\n\n\nTable 4 gives the results of the post hoc testing with the Dunn’s test; post P value adjustment with the Bonferroni method showing:\n\nCommon pipistrelle activity at static 4 is significantly different (at P&lt;0.05) to all the other static locations.\n\nCommon pipistrelle activity at static 1 is significantly different to static locations 2, 3 and 4. The significant difference (at P&lt;0.05) between static 1 and static 3 is not easily determined from Figure 3.\n\nCommon pipistrelle activity at static 2, static 3, and static 5 are not significantly different (at P&lt;0.05)."
  },
  {
    "objectID": "statistics.html#bootstrap-confidence-intervals",
    "href": "statistics.html#bootstrap-confidence-intervals",
    "title": "Statistics",
    "section": "4 Bootstrap Confidence Intervals",
    "text": "4 Bootstrap Confidence Intervals\nTable 5 gives summary statistics for Barbastelle (Barbastelle barbastellus) pass observations per night at Static 5.\n\n\nShow the code\n# Libraries (Packages) used\nlibrary(tidyverse)\nlibrary(mosaic)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(iBats)\nlibrary(infer)\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Group by Description and Night and Count the Observations\nbarb_static5 &lt;- statics_plus %&gt;% \n  filter(Species == \"Barbastella barbastellus\", Description == \"Static 5\") %&gt;% \n  group_by(Description, Night) %&gt;% \n  tally() \n\n# The summary statistics are saved into a variable riven_cond_stats \ncond_stats &lt;- favstats(n~Description, data = barb_static5)\n\n# riven_cond_stats is made into a the table (using the code below)\ncond_stats %&gt;% \n  # Create the table with the gt package\n  gt() %&gt;% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  #gt_color_rows(median, palette = \"ggsci::yellow_material\") %&gt;% \n  tab_options(data_row.padding = px(2)) \n\n\n\n\n\n\n\n\nTable 5: Barbastelle Observations (Passes) at Static 5\n\n\nDescription\nmin\nQ1\nmedian\nQ3\nmax\nmean\nsd\nn\nmissing\n\n\n\n\nStatic 5\n1\n1\n2\n4\n11\n3.173913\n2.639769\n23\n0\n\n\n\n\n\n\n\n\nFor Static 5 there is a mean of 3.17 passes per night for the 23 nights the bat detector was deployed. It is valuable to know the confidence of this mean number of passes observed. The population of passes, the number of Barbastelle’s passes for every night in history, is not available; in practice there is only the sample of data and not the entire population. The bootstrap3 is a statistical method that allows us to approximate the sampling distribution (and therefore confidence intervals) even without access to the population.\nIn bootstrapping the sample itself becomes the population. Samples from the population are drawn many times over and every time from all the population. This process is called re-sampling with replacement and creates a bootstrap distribution. The infer package has functions for re-sampling with replacement and estimating confidence limits.\n\n\nShow the code\n# bootstrap the number of Barb pass 1000 time and calculate the mean \nbootstrap_distribution &lt;- barb_static5 %&gt;% \n  specify(response = n) %&gt;% \n  generate(reps = 1000, type = \"bootstrap\") %&gt;% \n  calculate(stat = \"mean\")\n\n#calculation the 95% confidence intervals\npercentile_ci &lt;- bootstrap_distribution %&gt;% \n  get_confidence_interval(level = 0.95, type = \"percentile\")\n\n\nThe 95% confidence interval is computed by piping bootstrap_distribution into the get_confidence_interval() function from the infer package, with the confidence level set to 0.95 and the confidence interval type to be “percentile”. The results are saved in percentile_ci.\nThe 95% confidence interval is the middle 95% of values of the bootstrap distribution, the 2.5th and 97.5th percentiles, which are percentile_ci$lower_ci = 2.26 and percentile_ci$lower_ci = 4.35, respectively. This is known as the percentile method for constructing confidence intervals.\nThe confidence interval (2.26, 4.35) can be visualized, see Figure 4, by piping the bootstrap_distribution data frame into the visualize() function and adding a shade_confidence_interval() layer. The endpoints argument are set to the percentile_ci.\n\n\nShow the code\nvisualize(bootstrap_distribution) + \n  shade_confidence_interval(endpoints = percentile_ci)\n\n\n\n\n\nFigure 4: Boostrap Distribution of the Mean Barbastelle Observations (Passes) at Static 5\n\n\n\n\nThe bootstrapping of confidence intervals can be used for all the factors in a description (e.g. static locations), the month of activity or the species observed. The code below creates Table 6; confidence intervals for nightly species observations (passes) where there is more than 10 bat observations (passes) for the species in total. Figure 5 illustrates the mean nightly species observations with error bars indicating the confidence intervals.\n\n\nShow the code\n#List species with more than 10 passes observed\nSpeciesList &lt;- statics_plus %&gt;%\n  group_by(Species) %&gt;% \n  count() %&gt;% \n  filter(n &gt; 10)\n\nSpeciesList &lt;- levels(factor(SpeciesList$Species))\n\nTable_ci &lt;- NULL #blank data.frame for table\n\nfor(BatName in SpeciesList) {\n\n  \n  night_obs &lt;- statics_plus %&gt;% \n    #filter(Species == \"Pipistrellus pipistrellus\", Description == static) %&gt;% \n    #group_by(Description, Night) %&gt;% \n    filter(Species == BatName) %&gt;% \n    group_by(Species, Night) %&gt;% \n    tally() \n  \n  # Calculate the mean\n  species_mean &lt;- mean(night_obs$n)\n  \n  # bootstrap the number of Barb pass 1000 time and calculate the mean \n  bootstrap_distribution &lt;- night_obs %&gt;% \n    specify(response = n) %&gt;% \n    generate(reps = 1000, type = \"bootstrap\") %&gt;% \n    calculate(stat = \"mean\")\n  \n  #calculation the 95% confidence intervals\n  species_ci &lt;- bootstrap_distribution %&gt;% \n    get_confidence_interval(level = 0.95, type = \"percentile\")\n  \n  species_ci$mean &lt;- species_mean\n  \n  species_ci$species &lt;- BatName\n  \n  Table_ci &lt;- rbind(Table_ci, species_ci)\n  \n}\n\nTable_ci %&gt;% \n  # round numbers to 1 decimal place\n  mutate(mean = round(mean, digits = 1),\n         lower_ci = round(lower_ci, digits = 1),\n         upper_ci = round(upper_ci, digits = 1)) %&gt;% \n  #Arrange descending for readability\n  arrange(desc(mean)) %&gt;% \n  # configure column headings\n  select(Species = species, Mean = mean, `Lower 95% ci` = lower_ci, `Upper 95% ci` = upper_ci) %&gt;% \n  gt() %&gt;% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n    # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n    )\n  ) %&gt;% \n  tab_footnote(\n    footnote = \"Species with more than 10 bat observations (passes) in total\",\n    locations = cells_column_labels(\n      columns = Species\n    )) %&gt;% \n  tab_options(data_row.padding = px(2)) \n\n\n\n\n\n\n\n\nTable 6: Nightly Species Observations (Passes) Mean and 95% Confidence Intervals\n\n\nSpecies1\nMean\nLower 95% ci\nUpper 95% ci\n\n\n\n\nPipistrellus pipistrellus\n77.7\n53.5\n105.8\n\n\nMyotis spp.\n9.5\n7.3\n11.8\n\n\nBarbastella barbastellus\n8.7\n6.4\n11.6\n\n\nNyctalus noctula\n6.1\n4.5\n8.1\n\n\nPipistrellus spp.\n5.7\n4.2\n7.4\n\n\nPlecotus spp.\n4.5\n3.1\n6.1\n\n\nPipistrellus nathusii\n3.6\n2.6\n4.6\n\n\nPipistrellus pygmaeus\n3.6\n2.4\n4.9\n\n\nRhinolophus ferrumequinum\n3.6\n2.3\n5.6\n\n\nRhinolophus hipposideros\n2.1\n1.7\n2.7\n\n\nEptesicus serotinus\n1.3\n1.1\n1.7\n\n\n\n1 Species with more than 10 bat observations (passes) in total\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ngraph_bat_colours &lt;- iBats::bat_colours_default(Table_ci$species)\n\nTable_ci %&gt;% \n  ggplot(aes(x=reorder(species, mean), y=mean, fill=species)) + \n    geom_bar(position=position_dodge(), stat=\"identity\") +\n    geom_errorbar(aes(ymin=lower_ci, ymax=upper_ci),\n                  width=.2,                    # Width of the error bars\n                  position=position_dodge(.9)) +\n  scale_fill_manual(values = graph_bat_colours) +\n  coord_flip() +\n  labs(\n    y = \"Mean Nightly Species Observations\") +\n  theme_bw() +\n  theme(\n    legend.position = \"none\", # No legend\n    axis.text.x = element_text(size = 10, angle = 0, face = \"bold\"),\n    axis.text.y = element_text(size = 10, face = \"bold.italic\"), # bat names italic\n    axis.title.y = element_blank(), # no y title (just bat names)\n    axis.title.x = element_text(size = 10), # no x title\n    panel.grid.major = element_blank(), # remove grid lines\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey20\", linewidth = 0.1, linetype = \"dashed\")\n  )\n\n\n\n\n\nFigure 5: Nightly Species Observations (Passes) and 95% Confidence Intervals (error bars)"
  },
  {
    "objectID": "statistics.html#bat-assemblage",
    "href": "statistics.html#bat-assemblage",
    "title": "Statistics",
    "section": "5 Bat Assemblage",
    "text": "5 Bat Assemblage\nThe assessment of individual species ignores the fact there is also the species assemblage; the taxonomically related group of species (i.e. bats) occupying the same geographical area at the same time. The assemblage of bat species can be explored using multivariate methods.\nFor most surveys the number of species observed is greater than one, making it a biological assemblage. We can relate this assemblage to other factors such as location, habitat, time, weather, etc. Multivariate analysis gives a way of exploring the bat assemblage differences with respect to factors such as the location/habitat or month/year or combination of both.\n\n5.1 Cluster Analysis\nTable 7 shows a summary matrix of bat passes per species for each static (i.e. location) We would like to know which locations are similar/dissimilar.\n\n\nShow the code\nTab_L_S &lt;- statics %&gt;% # Location - Species\n  group_by(Species, Description) %&gt;% \n  count() \n\nmaxValue &lt;- max(Tab_L_S$n, na.rm = T)\n\nTab_L_S &lt;- Tab_L_S %&gt;% \n  pivot_wider(names_from = Species, values_from = n) %&gt;% \n  replace(is.na(.), 0)\n\nncols &lt;- ncol(Tab_L_S)\n\n#Make coloured palette\ncolourer &lt;- scales::col_numeric(\n  palette = c(\"transparent\", \"forestgreen\"),\n  domain = c(0, maxValue))\n\nTab_L_S %&gt;% \n  flextable() %&gt;% \n    bold(part = \"header\") %&gt;% \n    bg(bg = \"black\", part = \"header\") %&gt;% \n    color(color = \"white\", part = \"header\") %&gt;% \n    rotate(j = 2:ncols, rotation = \"tbrl\", align = \"center\", part = \"header\") %&gt;% \n    height_all(height = 2.3, part = \"header\") %&gt;% \n    hrule(rule = \"exact\", part = \"header\") %&gt;%\n    bg(bg = colourer, j = 2:ncols, part = \"body\") %&gt;%\n    width(j = 2:ncols, width = 0.4) %&gt;% \n    width(j = 1, width = 0.8)\n\n\n\n\nTable 7:  Matrix of Location by Species DescriptionBarbastella barbastellusEptesicus serotinusMyotis nattereriMyotis spp.Nyctalus leisleriNyctalus noctulaNyctalus spp.Pipistrellus nathusiiPipistrellus pipistrellusPipistrellus pygmaeusPipistrellus spp.Plecotus spp.Rhinolophus ferrumequinumRhinolophus hipposiderosStatic 1400670350214734000Static 2284116802010107582236956028Static 31001413350182631519208136Static 43048085028023,5693913620148Static 573007401620235788151\n\n\n\nIn multivariate analysis the pre-treament of data (sometimes in more than one way) is usually desirable. For assemblage data, transformations will reduce the dominant contribution of abundant species (i.e. all those pips). Transformations include (None, Square root, Fourth root, Log(X+1), Presence/absence). Table 8 shows Table 7 transformed with the species \\(\\sqrt[2]{count}\\).\n\n\nShow the code\nSpeciesC &lt;- Tab_L_S %&gt;% \n  ungroup() %&gt;% \n  select(2:ncol(.)) %&gt;% \n  mutate_all(funs(sqrt(.)))\n\nTable &lt;- SpeciesC %&gt;% \n  mutate_all(funs(round(., 2)))\n\nMatrix &lt;- Tab_L_S %&gt;%\n  ungroup() %&gt;% \n  select(Description) %&gt;% \n  bind_cols(SpeciesC)\n\n\nMatrixTable &lt;- Tab_L_S %&gt;%\n  ungroup() %&gt;% \n  select(Description) %&gt;% \n  bind_cols(Table)\n\nMatrix &lt;- data.matrix(Matrix[, 2:ncol(Matrix)])\n\nr_names &lt;- Tab_L_S %&gt;%\n  ungroup() %&gt;% \n  pull(Description)\n\nrownames(Matrix) &lt;- r_names\n\n# Number of columns in table\nncols &lt;- ncol(MatrixTable)\n\n#Make coloured palette\ncolourer &lt;- scales::col_numeric(\n  palette = c(\"transparent\", \"forestgreen\"),\n  domain = c(0, maxValue))\n\nMatrixTable %&gt;% \n  flextable() %&gt;% \n    bold(part = \"header\") %&gt;% \n    bg(bg = \"black\", part = \"header\") %&gt;% \n    color(color = \"white\", part = \"header\") %&gt;% \n    rotate(j = 2:ncols, rotation = \"tbrl\", align = \"center\", part = \"header\") %&gt;% \n    height_all(height = 2.3, part = \"header\") %&gt;% \n    hrule(rule = \"exact\", part = \"header\") %&gt;%\n    bg(bg = colourer, j = 2:ncols, part = \"body\") %&gt;%\n    width(j = 2:ncols, width = 0.4) %&gt;% \n    width(j = 1, width = 0.8)\n\n\n\n\nTable 8:  Transformed Matrix DescriptionBarbastella barbastellusEptesicus serotinusMyotis nattereriMyotis spp.Nyctalus leisleriNyctalus noctulaNyctalus spp.Pipistrellus nathusiiPipistrellus pipistrellusPipistrellus pygmaeusPipistrellus spp.Plecotus spp.Rhinolophus ferrumequinumRhinolophus hipposiderosStatic 12.000.0008.190.005.920.001.4112.121.732.000.000.000.00Static 25.292.00112.960.0014.180.003.1627.534.696.009.757.755.29Static 33.160.0016.401.735.920.004.2416.223.874.364.479.006.00Static 417.442.8309.220.005.290.001.4159.746.2411.664.473.742.83Static 58.540.0008.600.004.001.410.0015.332.659.381.002.241.00\n\n\n\nTo assess the differences of activity (in the bat assemblage) between locations (or months, habitat, etc.) we measure the distance between every point of activity with every other point. So activity (e.g. a median or count) at one location for a species is compared(measured) with every other activity for all the species and locations.\nThere are many distance measurements to investigate species similarity/dissimilarity4:\n\nEuclidean distance natural distance between two points\n\nManhattan distance walking around a New York block\n\nBray-Curtis a dissimilarity very useful for ecologists\n\nFor species similarities it may be worth considering the removal of the rarer species (i.e. the less observed) and repeating the analysis.\nIn this example the Bray-Curtis distance measurement has been applied to Table 8 to produce the Bray-Curtis dissimilarity matrix in Table 9.\n\n\nShow the code\nlibrary(vegan)\n\ndist_bray &lt;- vegdist(Matrix, method=\"bray\")\n\ndist_df &lt;- tibble(dist_bray)\n\nfmt2 &lt;- function(dist_num) {\n  \n  temp &lt;- as.character(dist_num)\n  \n  stringr::str_sub(temp, 1L, 7L)\n  \n}\n\nc1 &lt;- c(\"Static 2\", \"Static 3\", \"Static 4\", \"Static 5\")\nc2 &lt;- c(fmt2(dist_df[1,1]), fmt2(dist_df[2,1]), fmt2(dist_df[3,1]), fmt2(dist_df[4,1]))\nc3 &lt;- c(\" \", fmt2(dist_df[5,1]), fmt2(dist_df[6,1]), fmt2(dist_df[7,1]))\nc4 &lt;- c(\" \", \" \", fmt2(dist_df[8,1]), fmt2(dist_df[9,1]))\nc5 &lt;- c(\" \", \" \", \" \", fmt2(dist_df[10,1]))\n\ndist_tbl &lt;- tibble(c1, c2, c3, c4, c5)\n\ncolnames(dist_tbl) &lt;- c(\" \", \"Static 1\", \"Static 2\", \"Static 3\", \"Static 4\")\n\nft &lt;- dist_tbl\nncols &lt;- ncol(ft)\n\nft %&gt;% \n  flextable() %&gt;% \n    bold(part = \"header\") %&gt;% \n    bold(j=1, part = \"body\") %&gt;% \n    bg(bg = \"black\", part = \"header\") %&gt;% \n    bg(j=1, bg = \"black\", part = \"body\") %&gt;% \n    color(color = \"white\", part = \"header\") %&gt;% \n    color(j=1, color = \"white\", part = \"body\")\n\n\n\n\nTable 9:  Bray-Curtis Dissimilarity Matrix  Static 1Static 2Static 3Static 4Static 20.49805   Static 30.366610.25769  Static 40.586130.354220.45871 Static 50.313520.400260.334010.41084\n\n\n\nThe Bray-Curtis dissimilarity matrix can be used in many multivariate methods; here the matix is used in Hierarchical Clustering. Hierarchical clustering is useful because it can create a tree-based representation of the observations called a dendrogram; that is easy to interpret visually. The dendrogram from the Bray-Curtis dissimilarity matrix in Table 9 is shown in Figure 6.\n\n\nShow the code\n# Hierarchical cluster function hclust\nhc_bray &lt;- hclust(dist_bray, method = \"complete\")\n\n# Always visualse\nlibrary(ggdendro)\n#Creates Dendrogram Plot Using ggplot.\nggdendrogram(hc_bray, rotate = TRUE, size = 2) +\n  labs(title = \"Static Location - Complete Cluster - Bray-Curtis\")\n\ndhc &lt;- as.dendrogram(hc_bray)\n\n\n\n\n\nFigure 6: Dendrogram Between Static Locations\n\n\n\n\nClustering refers to a very broad set of techniques for finding subgroups, or clusters, in a data set. Clustering involves grouping a set of objects in such a way that objects in the same group (called a cluster) are more similar (in some sense) to each other than to those in other groups (clusters). Referring to the dendrogram in Figure 6 the lower in the tree fusions occur, the more similar the groups of observations are to each other. While observations that fuse later, near the top of the tree, can be considered less similar.\nFor Figure 6 we can see that for the bat assemblage:\n\nStatics 3 & 2 are similar\nStatics 1 & 5 are similar\nStatic 4 is more similar to Statics 2 & 3 than Statics 1 & 5\nStatics 2 & 3 and Statics 1 & 5 are more similar to Static 4 - than Statics 2 & 3 and Statics 1 & 5 are to each other\n\nNote, the dendrogram is illustrative and we cannot draw conclusions about the degree of similarity of two observations based on their proximity along the vertical axis.\nThis is just an introduction to Hierarchical Clustering, there are many variations and other types of clustering (e.g. k-means). Key variations for hierarchical clustering are:\n\ndistance measurement used e.g. Bray-Curtis, Euclidean, etc.\ntype of linkage e.g. complete, average, single or centroid.\n\n\n\n5.2 K-Means Clustering\nK-means clustering is a simple approach for partitioning a data set into K distinct non-overlapping clusters. To perform K means clustering we must specify the desired number of clusters first. The code below applies k-means clustering to the Bray-Curtis dissimilarity matrix in Table 9 with K=2.\n\n\nShow the code\nresult_km &lt;- kmeans(dist_bray, centers = 2)\n\n\n\n\nShow the code\nclusters &lt;- tibble(names(result_km$cluster), result_km$cluster)\n\ncolnames(clusters) &lt;- c(\"Location\", \"Cluster\")\n\nclusters %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  cols_width(everything() ~ px(150))\n\n\n\n\n\n\n\n\nTable 10: k-means Cluster and Location\n\n\nLocation\nCluster\n\n\n\n\nStatic 1\n1\n\n\nStatic 2\n2\n\n\nStatic 3\n1\n\n\nStatic 4\n2\n\n\nStatic 5\n1\n\n\n\n\n\n\n\n\n\n\nShow the code\ntidy(result_km) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\n\n\nTable 11: Summary on a Per-Cluster Level\n\n\nStatic 1\nStatic 2\nStatic 3\nStatic 4\nStatic 5\nsize\nwithinss\ncluster\n\n\n\n\n0.2267147\n0.3853388\n0.2335433\n0.4852314\n0.2158467\n3\n0.2765864\n1\n\n\n0.5420950\n0.1771132\n0.3582046\n0.1771132\n0.4055556\n2\n0.1496150\n2\n\n\n\n\n\n\n\n\n\n\nShow the code\nglance(result_km) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\n\n\nTable 12: k-means Overall Summary Statistics\n\n\ntotss\ntot.withinss\nbetweenss\niter\n\n\n\n\n0.7733486\n0.4262014\n0.3471472\n1\n\n\n\n\n\n\n\n\nThe output of kmeans is a list of information; the most important:\n\ncluster: Table 10 & Table 11 A vector of integers (from 1:K) indicating the cluster to which each point is allocated.\ncenters: A matrix of cluster centers.\ntotss: Table 12 The total sum of squares.\nwithinss: Table 11 Vector of within-cluster sum of squares, one component per cluster.\ntot.withinss: Table 12 Total within-cluster sum of squares, i.e. sum(withinss).\nbetweenss: Table 12 The between-cluster sum of squares, i.e. \\(totss-tot.withinss\\).\nsize: The number of points in each cluster.\niter: Table 12 The number of (outer) iterations.\n\n\n\n5.3 Non-metric Multidimensional Scaling (NMDS)\nNon-metric Multidimensional Scaling is an ordination technique that reduces dimensionality in multivariate data sets such as the count of bats in Table 13. Dimensionality reduction simply refers to the process of reducing the number of attributes in a dataset while keeping as much of the variation in the original dataset as possible. The goal of NMDS is to collapse information from multiple dimensions (e.g, from multiple communities, sites, etc.) into just a few, so that they can be visualized, (e.g. as a 2D or 3D plot), and interpreted.\nUnlike other ordination techniques that rely on (primarily Euclidean) distances, such as Principal Component Analysis (PCA), NMDS uses rank orders, and thus is an extremely flexible technique that can accommodate a variety of different kinds of data (K. R. Clarke 1993), (K. Robert Clarke 1999); NMDS does require at least one observation per factor (e.g. site or month). In R, the metaMDS() function of the vegan package can execute a NMDS. As input, it expects a community matrix with the factors as rows and the species as columns; Table 13 has two factors, static location and month, that are treated separately.\nBefore undertaking ordination it is best to transform the data; this helps reduce the influence of large counts from dominant species (i.e. Common pipistrelles). Table 14 is Table 13 transformed with \\(\\sqrt[4]{count}\\).\nA measure of how successful the NMDS reduction is stress5. The lower the stress value, the better the ordination. A rule of thumb for stress values:\n\nstress &lt; 0.05 provides an excellent representation in reduced dimensions\nstress &lt; 0.1 is great,\nstress &lt; 0.2 is good,\nstress &gt; 2.0 &lt; 0.3 interpret with caution\nstress &gt; 0.3 provides a poor representation.\n\nFigure 7 (a) shows the two dimensional plot after the NMDS is applied through metaMDS() function to the transformed data shown in Table 14; the NMDS produced a good stress of 0.14. Figure 7 (b) is the Shepard plot showing the scatter around the regression between the interpoint distances in the final configuration (i.e., the distances between each pair of communities) against their original dissimilarities; the desirable outcome from the Shepard plot is a diagonal line with limited scatter in this respect Figure 7 (b) looks reasonable.\nFigure 8 shows the 2D Figure 7 (a): with Figure 8 (a) labelled for static location and Figure 8 (b) labelled for month (Figure 8 (b)).\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(ggthemes) # for colour pallet \"Tableau 10\"\n\n\n\nAttaching package: 'ggthemes'\n\n\nThe following object is masked from 'package:mosaic':\n\n    theme_map\n\n\nShow the code\nlibrary(flextable)\nlibrary(iBats)\nlibrary(vegan)\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Count of bat species by location and month\ndescription_month_count &lt;- statics_plus %&gt;% # Location - Species\n  group_by(Species, Description, Month) %&gt;% \n  count() %&gt;% \n  pivot_wider(names_from = Species, values_from = n) %&gt;% \n  replace(is.na(.), 0)\n\n# Number of columns in table\nncols &lt;- ncol(description_month_count)\n\ndescription_month_count %&gt;% \n  flextable() %&gt;% \n    bold(part = \"header\") %&gt;% \n    bg(bg = \"black\", part = \"header\") %&gt;% \n    color(color = \"white\", part = \"header\") %&gt;% \n    rotate(j = 3:ncols, rotation = \"tbrl\", align = \"center\", part = \"header\") %&gt;% \n    height_all(height = 2.3, part = \"header\") %&gt;% \n    hrule(rule = \"exact\", part = \"header\") %&gt;%\n    width(j = 3:ncols, width = 0.4) %&gt;% \n    width(j = 1:2, width = 0.8)\n\n\n\n\nTable 13:  Count of Species by the Meta Data; Location and month DescriptionMonthBarbastella barbastellusEptesicus serotinusMyotis nattereriMyotis spp.Nyctalus leisleriNyctalus noctulaNyctalus spp.Pipistrellus nathusiiPipistrellus pipistrellusPipistrellus pygmaeusPipistrellus spp.Plecotus spp.Rhinolophus ferrumequinumRhinolophus hipposiderosStatic 1Aug40058012002001000Static 2May7101040212806222Static 2Jun621303200163050236Static 2Aug101010301370026017614184Static 2Sep3003504081085163297Static 2Oct2009020020024717Static 3Jun2012080033010133Static 3Aug2002231900153556615Static 3Sep600170601740910135510Static 4Jun161009070037919072Static 4Jul22202001001,644648101Static 4Aug836037020001,31829481964Static 4Oct3800190002228331011Static 5Jun29002012206609140Static 5Jul270025000065122001Static 5Aug100037040072642010Static 5Oct70010000032015000Static 1May00010400400000Static 1Sep000803021132000Static 2Jul00017022007901072Static 1Jun00000160011201000Static 3May000002013713178\n\n\n\n\n\nShow the code\nspecies_count &lt;- description_month_count[, 3:ncol(description_month_count)]\nmeta_data &lt;- description_month_count[, 1:2]\n\nTransformed_Data &lt;- (species_count)^(1/4)\n\n# Number of columns in table\nncols &lt;- ncol(Transformed_Data)\n\nTransformed_Data %&gt;% \n  flextable() %&gt;% \n    bold(part = \"header\") %&gt;% \n    bg(bg = \"black\", part = \"header\") %&gt;% \n    color(color = \"white\", part = \"header\") %&gt;% \n    rotate(j = 1:ncols, rotation = \"tbrl\", align = \"center\", part = \"header\") %&gt;% \n    height_all(height = 2.3, part = \"header\") %&gt;% \n    hrule(rule = \"exact\", part = \"header\") %&gt;%\n    width(j = 1:ncols, width = 0.4) %&gt;% \n    colformat_double(digits = 3)\n\n\n\n\nTable 14:  Count of Species with Data Transformed by 4th Root Barbastella barbastellusEptesicus serotinusMyotis nattereriMyotis spp.Nyctalus leisleriNyctalus noctulaNyctalus spp.Pipistrellus nathusiiPipistrellus pipistrellusPipistrellus pygmaeusPipistrellus spp.Plecotus spp.Rhinolophus ferrumequinumRhinolophus hipposideros1.4140.0000.0002.7600.0001.8610.0000.0002.1150.0001.0000.0000.0000.0001.6271.0000.0001.0000.0001.4140.0001.1893.3640.0001.5651.1891.1891.1891.5651.1891.0001.3160.0002.3780.0000.0003.5730.0001.4950.0002.1901.5651.7781.0000.0003.1860.0003.4210.0000.0004.0162.0311.5651.9342.0601.4141.3160.0000.0002.4320.0001.4140.0001.6823.2241.4952.0002.3781.7321.6271.1890.0000.0001.7320.0001.1890.0000.0002.1150.0001.1892.6181.0001.6271.1890.0001.0001.1890.0001.6820.0000.0002.3970.0001.0000.0001.8991.3161.1890.0000.0002.1661.3162.0880.0000.0003.5171.4951.4951.5651.5651.9681.5650.0000.0002.0310.0001.5650.0002.0312.5151.7321.7781.8992.7231.7783.5620.0000.0001.7320.0001.6270.0000.0004.4121.0001.7320.0001.6271.1892.1661.1890.0002.1150.0001.0000.0000.0006.3681.5652.6321.0000.0001.0003.0181.5650.0002.4660.0002.1150.0000.0006.0252.3212.6322.0881.5651.4142.4830.0000.0002.0880.0000.0000.0001.1893.8861.3162.3600.0001.0001.0002.3210.0000.0001.1890.0001.8611.1890.0002.8500.0001.7321.0001.4140.0002.2800.0000.0002.2360.0000.0000.0000.0002.8391.0002.1660.0000.0001.0001.7780.0000.0002.4660.0001.4140.0000.0002.9131.5652.5460.0001.0000.0001.6270.0000.0001.7780.0000.0000.0000.0002.3780.0001.9680.0000.0000.0000.0000.0000.0001.0000.0001.4140.0000.0001.4140.0000.0000.0000.0000.0000.0000.0000.0001.6820.0001.3160.0001.1891.8211.3161.1890.0000.0000.0000.0000.0000.0002.0310.0002.1660.0000.0002.9810.0001.0000.0001.6271.1890.0000.0000.0000.0000.0002.0000.0000.0003.2530.0001.0000.0000.0000.0000.0000.0000.0000.0000.0001.1890.0001.0002.4661.0001.3161.0001.6271.682\n\n\n\n\n\nShow the code\n# Nonmetric Multidimensional Scaling (NMDS), \n# and tries to find a stable solution \n# using several random starts\nnMDS_results &lt;- metaMDS(Transformed_Data, distance = \"bray\")\n\n# extract NMDS scores (x and y coordinates) for plotting\nnMDS_coords = as.tibble(scores(nMDS_results)$sites)\n\n# bind the factors (static location and month back)\ngraph_data &lt;- bind_cols(meta_data, nMDS_coords)\n\n\n\n\nShow the code\ngraph_style &lt;- theme_bw() + \n  theme(legend.position = \"none\", # No legend\n  axis.text.x = element_text(size=12, angle = 270, face=\"bold\"), # text bold and vertical\n  axis.text.y = element_text(size=12, face=\"bold.italic\"), # bat names italic\n  strip.text = element_text(size=12, face=\"bold\"), # Bold facet names\n  axis.title.x = element_blank(), # currently not used\n  axis.title.y = element_blank(), # no y title (just bat names)\n  panel.grid.major = element_blank(), #remove grid lines\n  panel.grid.minor = element_blank(),\n  plot.caption = element_text())\n\ng1 &lt;- ggplot(graph_data, aes(x = NMDS1, y = NMDS2)) + \n    geom_point(size = 9, colour = \"dodgerblue\", alpha = 0.8) +\n    scale_x_continuous(expand = c(0.05, 0.05)) +\n    scale_y_continuous(expand = c(0.05, 0.05)) +\n    labs(caption = glue(\"Stress {round(nMDS_results$stress, digits = 2)}\")) +\n    graph_style\n\ng1\nstressplot(nMDS_results)\n\n\n\n\n\n\n\n\n(a) Unlabeled Solution of NMDS (2D)\n\n\n\n\n\n\n\n(b) Stress Plot\n\n\n\n\nFigure 7: Non-metric Multidimensional Scaling Solution and Stress Plot\n\n\n\n\n\nShow the code\ngraph_style &lt;- theme_bw() + \n  theme(legend.position = \"none\", \n  axis.text.x = element_text(size=12, face=\"bold\"),\n  axis.text.y = element_text(size=12, face=\"bold\"), \n  strip.text = element_text(size=12, face=\"bold\"), \n  axis.title.x = element_blank(), \n  axis.title.y = element_blank(), \n  panel.grid.major = element_blank(), \n  panel.grid.minor = element_blank(),\n  plot.title = element_text(size=16, face=\"bold\"))\n\np1 &lt;- ggplot(graph_data, aes(x = NMDS1, y = NMDS2, label=Description)) + \n    geom_point(size = 9, aes(colour = Description), alpha = 0.8) +\n  geom_text(size = 5) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_x_continuous(expand = c(0.05, 0.05)) +\n  scale_y_continuous(expand = c(0.05, 0.05)) +\n  labs(title = \"Static Location\") +\n  graph_style\n\np2 &lt;- ggplot(graph_data, aes(x = NMDS1, y = NMDS2, label=Month)) + \n    geom_point(size = 9, aes(colour = Month), alpha = 0.8) +\n  labs(title = \"Month\") +\n  geom_text(size = 5) +\n scale_fill_tableau(palette = \"Tableau 10\") + \n  scale_x_continuous(expand = c(0.05, 0.05)) +\n  scale_y_continuous(expand = c(0.05, 0.05)) +\n  graph_style\n\n\np1\np2\n\n\n\n\n\n\n\n\n(a) Labelled by Static Location\n\n\n\n\n\n\n\n(b) Labelled by Month\n\n\n\n\nFigure 8: Non-metric Multidimensional Scaling Solution and Stress Plot\n\n\n\n\n5.3.1 ANOSIM\nThe ANOSIM test is similar to an ANOVA hypothesis test; it uses a dissimilarity matrix as input instead of raw data. It is also non-parametric, meaning it doesn’t assume much about the data, a useful attribute for the often-skewed ecological data. As a non-parametric test, ANOSIM uses ranked dissimilarities instead of actual distances, and for this reason complements an NMDS plot. The main point of the ANOSIM test is to determine if the differences between two or more groups are significant.\nThe function anosim from the package vegan can test whether there is a statistical difference between groups (e.g. static locations or months)\n\nnull hypothesis - no differnce\nalternative - difference\n\nThe higher the R value (it has a range 0 to 1), the more dissimilar your groups6 are in terms of bat assemblage. Figure 9 (a) shows the ANOSIM result for the Static Locations, there is a statistical difference of the bat species assemblage for the static location. Figure 9 (b) shows the ANOSIM result for the Month, there is no statistical difference of the bat species assemblage for the Months.\n\n\nShow the code\ngraph_style &lt;- theme_bw() + \n  theme(legend.position = \"none\", \n  axis.text.x = element_text(size=12, face=\"bold\"),\n  axis.text.y = element_text(size=12, face=\"bold\"), \n  strip.text = element_text(size=12, face=\"bold\"), \n  axis.title.x = element_blank(), \n  axis.title.y = element_blank(), \n  panel.grid.major = element_blank(), \n  panel.grid.minor = element_blank(),\n  plot.caption = element_text(size = 12),\n  plot.title = element_text(size=16, face=\"bold\"))\n\nFactor &lt;- \"Static Location\"\n\nano = anosim(Transformed_Data, \n             meta_data$Description, \n             distance = \"bray\", \n             permutations = 9999)\n\n#Tjis is how PrimerE views ANOSIM Results\nRperms&lt;- tibble(ano$perm)\n\nRstat &lt;- ano$statistic\nsigValue &lt;- ano$signif\n\nif(sigValue &lt; 0.05) {\n  \n  SigText &lt;- glue(\"ANOSIM significamce value ({sigValue}) for {Factor} is statistically significant at P&lt;0.05\")\n  \n} else {\n  \n  SigText &lt;- glue(\"ANOSIM significamce value ({sigValue}) for {Factor} is not statistically significant at P&lt;0.05\")\n  \n}\n\ncolnames(Rperms) &lt;- c(\"Rano\")\n\np1_description &lt;- ggplot(Rperms, aes(Rano)) +\n  geom_histogram(fill = \"dodgerblue\") +\n  geom_vline(xintercept = Rstat, colour = \"gold3\", linewidth = 2, linetype = \"dashed\") +\n  annotate(\"text\", x = Rstat, y = 300, label = glue(\"R statistic \\n {round(Rstat, digits = 3)}\")) +\n  labs(title = Factor,\n       y = \"Frequency\",\n       x = \"R\",\n       caption = SigText) +\n  graph_style\n\n\nFactor &lt;- \"Month\"\n\nano = anosim(Transformed_Data, \n             meta_data$Month, \n             distance = \"bray\", \n             permutations = 9999)\n\n#Tjis is how PrimerE views ANOSIM Results\nRperms&lt;- tibble(ano$perm)\n\nRstat &lt;- ano$statistic\nsigValue &lt;- ano$signif\n\nif(sigValue &lt; 0.05) {\n  \n  SigText &lt;- glue(\"ANOSIM significamce value ({sigValue}) for {Factor} is statistically significant at P&lt;0.05\")\n  \n} else {\n  \n  SigText &lt;- glue(\"ANOSIM significamce value ({sigValue}) for {Factor} is not statistically significant at P&lt;0.05\")\n  \n}\n\ncolnames(Rperms) &lt;- c(\"Rano\")\n\np2_month &lt;- ggplot(Rperms, aes(Rano)) +\n  geom_histogram(fill = \"dodgerblue\") +\n  geom_vline(xintercept = Rstat, colour = \"gold3\", linewidth = 2, linetype = \"dashed\") +\n  annotate(\"text\", x = Rstat, y = 300, label = glue(\"R statistic \\n {round(Rstat, digits = 3)}\")) +\n  labs(title = Factor,\n       y = \"Frequency\",\n       x = \"R\",\n       caption = SigText) +\n  graph_style\n\np1_description\np2_month\n\n\n\n\n\n\n\n\n(a) ANOSIM Static Location\n\n\n\n\n\n\n\n(b) ANOSIM Month\n\n\n\n\nFigure 9: ANOSIM: Test is there a Statistical Difference Between Groups"
  },
  {
    "objectID": "statistics.html#footnotes",
    "href": "statistics.html#footnotes",
    "title": "Statistics",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe significance level is always chosen before the test is undertaken.↩︎\nA p-value is a measure of the probability that the observed results of a statistical test occurred by chance, given that the null hypothesis is true. In other words, a p-value helps you determine whether the results of your experiment are statistically significant. If the p-value is low (generally less than 0.05; here 0.01 is chosen), you can reject the null hypothesis and conclude that the observed differences between the groups you are studying are statistically significant.↩︎\nBootstrapping is any test or metric that uses random sampling with replacement; for further information see https://en.wikipedia.org/wiki/Bootstrapping_(statistics).↩︎\nnote it is the dissimilarity that is used, 1- similarity↩︎\nNMDS reduces the rank-based differences between the distances between objects in the original matrix and distances between the ordinated objects. The difference is expressed as stress.↩︎\nThe test to determine which individual group is different (e.g. Static 1, Static 2 …), is not available in R; it can be undertaken in the Primer-E software https://www.primer-e.com/.↩︎"
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Tidy Data",
    "section": "",
    "text": "Tidy Data is a consistent way to organise your data (Wickham 2014) (Tierney and Cook 2023). Getting your data into this format requires some initial work, but that effort pays off in the long term. Once you have tidy data you will spend less time wrangling data from one representation to another, allowing you to spend more time on the analytic questions at hand. Unfortunately, there is a rule of thumb; 80% of time doing data science is spent wrangling data; particularly the effort required in sorting and rearranging the data into the tidy and therefore usable format; illustrated below are ways to make this task less demanding.\nThere are three interrelated rules which make a data set tidy see Figure 1:"
  },
  {
    "objectID": "tidy.html#minimal-data-requirement",
    "href": "tidy.html#minimal-data-requirement",
    "title": "Tidy Data",
    "section": "1 Minimal Data Requirement",
    "text": "1 Minimal Data Requirement\nTo undertake meaningful data analysis, it is recommended that data collected from bat activity surveys is wrangled into tidy data that has the following five variables (columns) as a minimum:\n\nDescription\nDateTime\nSpecies\nLatitude\nLongitude\n\nThe rationale for these variables is as follows:\nDescription a column to help identify the observation for example a location, surveyor or survey number.\nDateTime: the date and time of the bat observation to BS ISO 8601:2004 i.e. yyyymmdd hh:mm:ss. The use of BS ISO 8601:2004 prevents confusion over the date format 1 . Reference bat activity to the local time and specifying an iana2 time zone allows for daylight saving times to considered; the iana code for the UK is Europe/London.\nSpecies: bat species names should follow the “binomial nomenclature” from the International Code of Zoological Nomenclature (ICZN)3 - e.g. Barbastella barbastellus, Eptesicus serotinus, etc… A column of local common names can always be added to the tidy data, i.e. in a separate column see Meta Data. A compiled online database Bats of the World provides taxonomic and geographic information on all Chiroptera 4. As of 10th Mar 2023, 1462 species are recognized. Sound analysis may not be able to distinguish calls to species level; in practice some calls may only be identified to genus or as acoustically similar, Table 11 suggests a naming convention.\nLongitude and Latitude: World Geodetic System 19845 (WGS84); as used by Google earth. A digital, numeric, format should be used. Any other spatial reference system can be used, as these can be stored as an extra column in the tidy data; an example of British National Grid co-ordinates (Easting/Northing) is provided in Meta Data. The prerequisite is that the reference system can be converted to WGS84; which is the case for most national or state co-ordinate systems. Using a global co-ordinate system such as WSG84 gives access to the many open-source application programming interfaces (API) available that assist with data analysis (e.g. assessing sunset and sunrise times or the adjustment to daylight saving)."
  },
  {
    "objectID": "tidy.html#making-bat-data-tidy",
    "href": "tidy.html#making-bat-data-tidy",
    "title": "Tidy Data",
    "section": "2 Making Bat Data Tidy",
    "text": "2 Making Bat Data Tidy\nResults of bat sound analysis can be untidy:\n\ntwo or more species in one cell (see Table 2);\ncount of bats (Table 4);\ntwo of more columns with species of same date and time (Table 6);\ncode names for species rather than the binomial nomenclature (Table 3); and,\nLongitude and Latitude columns with missing values (Table 9)\n\nWhile the bat survey results shown in Table 1 is an example of a tidy data set; the data shown in Table 2, Table 4, Table 6, Table 3 and, Table 9 are untidy and would need to be made tidy to undertake analysis.\nData preparation is not just a first step but must be repeated many times over during analysis; as new problems come to light, or new data is collected. Making bat data into a tidy format, involves cleaning data: parsing dates and numbers, identifying missing values, correcting character encoding, matching similar but not identical values (such as those created by typos); it is an essential step, takes time to do and makes subsequent steps in the analysis much easier.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(gt)\n\nstatics %&gt;% # statics is a tidy data set from the iBats package\n  select(Description, DateTime, Species, Latitude, Longitude) %&gt;%\n  sample_n(10) %&gt;%\n  arrange(DateTime) %&gt;%\n  # Table made with gt()\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;%\n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n    ),\n    locations = cells_body(\n      columns = c(Species)\n    )\n  ) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 1: Tidy Bat data\n\n\nDescription\nDateTime\nSpecies\nLatitude\nLongitude\n\n\n\n\nStatic 4\n2016-06-13 01:50:48\nPipistrellus pipistrellus\n50.33123\n-3.591858\n\n\nStatic 4\n2016-07-27 01:30:04\nPipistrellus pipistrellus\n50.33133\n-3.591748\n\n\nStatic 5\n2016-07-30 00:58:26\nPipistrellus spp.\n50.33105\n-3.590738\n\n\nStatic 4\n2016-07-30 01:27:32\nPipistrellus pipistrellus\n50.33141\n-3.591878\n\n\nStatic 4\n2016-07-31 01:08:12\nPipistrellus pipistrellus\n50.33130\n-3.591848\n\n\nStatic 4\n2016-08-04 23:11:37\nPipistrellus pipistrellus\n50.33136\n-3.591748\n\n\nStatic 4\n2016-08-05 01:58:13\nPipistrellus pipistrellus\n50.33136\n-3.591748\n\n\nStatic 2\n2016-08-15 21:45:25\nPipistrellus pipistrellus\n50.33323\n-3.592583\n\n\nStatic 4\n2016-08-25 01:58:59\nPipistrellus pipistrellus\n50.33133\n-3.591768\n\n\nStatic 2\n2016-10-10 19:39:35\nPlecotus spp.\n50.33323\n-3.592583\n\n\n\n\n\n\n\n\n\n2.1 Too Many Species in a Cell\n\n\nShow the code\nlibrary(gt)\nlibrary(iBats)\n\n# Table made with gt()\nuntidy1 %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 2: Untidy Bat Data Too Many Species in a Cell\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nPIPPYG, NYCLEI\n\n\n2019-10-03 21:15:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nPIPPIP, PIPPYG, NYCLEI\n\n\n2019-10-03 21:35:30\nPIPPIP\n\n\n\n\n\n\n\n\nToo many species in a cell, as in Table 2, can be made tidy by expanding the data so each species observed is in it’s own row, using the function tidyr::separate_rows(Species); as shown below in Table 3. Note that this data has untidy bat names; these are corrected in Section 2.4. The untidy1 data is example untidy data available from the iBats package.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(gt) # Makes table\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\nuntidy1 %&gt;%\n  tidyr::separate_rows(Species) %&gt;%\n  # Table made with gt()\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 3: Tidied Bat Data from Too Many Species in a Cell\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nNYCLEI\n\n\n2019-10-03 21:15:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nPIPPIP\n\n\n2019-10-03 21:25:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nNYCLEI\n\n\n2019-10-03 21:35:30\nPIPPIP\n\n\n\n\n\n\n\n\n\n\n2.2 A Column of Bat Counts\n\n\nShow the code\nlibrary(gt)\nlibrary(iBats)\n\n# Table made with gt()\nuntidy2 %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 4: Untidy Bat Data a Column Giving the Number of Bat Passes\n\n\nDateTime\nSpecies\nNumber\n\n\n\n\n2019-10-05 20:35:15\nPipistrellus pipistrellus\n1\n\n\n2019-10-05 20:38:30\nPipistrellus pygmaeus\n1\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n2\n\n\n2019-10-05 21:05:15\nPipistrellus pipistrellus\n1\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n3\n\n\n2019-10-05 21:25:45\nPipistrellus pipistrellus\n1\n\n\n\n\n\n\n\n\nA count of species, as in Table 4, can be made tidy by un-counting the data so each species observed is in it’s own row, using the function tidyr::uncount(Number); as shown below in Table 5. The untidy2 data is example untidy data available from the iBats package.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(gt) # Makes table\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\nuntidy2 %&gt;%\n  tidyr::uncount(Number) %&gt;%\n  # Table made with gt()\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 5: Tidied Bat Data with the Column Bats Un-counted\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-05 20:35:15\nPipistrellus pipistrellus\n\n\n2019-10-05 20:38:30\nPipistrellus pygmaeus\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n\n\n2019-10-05 21:05:15\nPipistrellus pipistrellus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:25:45\nPipistrellus pipistrellus\n\n\n\n\n\n\n\n\n\n\n2.3 Two or More Columns of Bat Species\n\n\nShow the code\nlibrary(gt)\nlibrary(iBats)\n\n# Table made with gt()\nuntidy3 %&gt;%\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 6: Two or More Columns of Bat Species\n\n\nDateTime\nSpecies\nSpecies2nd\nSpecies3rd\n\n\n\n\n2019-10-04 20:35:15\nCommon pipistrelle\n\n\n\n\n2019-10-04 20:38:30\nSoprano pipistrelle\nNoctule\n\n\n\n2019-10-04 21:05:15\nCommon pipistrelle\n\n\n\n\n2019-10-04 21:15:30\nSoprano pipistrelle\nCommon pipistrelle\nNoctule\n\n\n2019-10-04 21:25:45\nCommon pipistrelle\nCommon pipistrelle\n\n\n\n\n\n\n\n\n\nSeveral columns of species, as in Table 6, can be made tidy by making separate data.frames and binding them together so each species observed is in it’s own row; as shown below in Table 7. The untidy3 data is example untidy data available from the iBats package.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# Select Species column and remove (Species2nd & Species3rd)\ndata1 &lt;- untidy3 %&gt;%\n  select(-Species2nd, -Species3rd)\n\n# Select Species2nd column and remove (Species & Species3rd)\ndata2 &lt;- untidy3 %&gt;%\n  select(-Species, -Species3rd) %&gt;%\n  filter(Species2nd != \"\") %&gt;% # Remove blank rows\n  rename(Species = Species2nd) # Rename column\n\n# Select Species3rd column and remove (Species & Species2nd)\ndata3 &lt;- untidy3 %&gt;%\n  select(-Species, -Species2nd) %&gt;%\n  filter(Species3rd != \"\") %&gt;% # Remove blank rows\n  rename(Species = Species3rd) # Rename column\n\n# Add the datasets together into one\ndplyr::bind_rows(data1, data2, data3) %&gt;%\n  # Table made with gt()\n  gt() %&gt;%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 7: Tidied Bat Data with Two or More Columns put into One\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-04 20:35:15\nCommon pipistrelle\n\n\n2019-10-04 20:38:30\nSoprano pipistrelle\n\n\n2019-10-04 21:05:15\nCommon pipistrelle\n\n\n2019-10-04 21:15:30\nSoprano pipistrelle\n\n\n2019-10-04 21:25:45\nCommon pipistrelle\n\n\n2019-10-04 20:38:30\nNoctule\n\n\n2019-10-04 21:15:30\nCommon pipistrelle\n\n\n2019-10-04 21:25:45\nCommon pipistrelle\n\n\n2019-10-04 21:15:30\nNoctule\n\n\n\n\n\n\n\n\n\n\n2.4 Convert Bat Names to Scientific\nTable 3 is still untidy because the bat species are represented as codes and not in a binomial nomenclature(scientific name). The iBats::make_scientific() function can take a named vector of codes and the scientific name; such as the BatScientific vector below. The case of the bat name codes are ignored; they are all converted to lower case.\n\n\nShow the code\nBatScientific &lt;- c(\"nyclei\" = \"Nyctalus leisleri\",\n                   \"nycnoc\" = \"Nyctalus noctula\",\n                   \"pippip\" = \"Pipistrellus pipistrellus\",\n                   \"pipnat\" = \"Pipistrellus nathusii\",\n                   \"pippyg\" = \"Pipistrellus pygmaeus\",\n                   \"45 pip\" = \"Pipistrellus pipistrellus\",\n                   \"55 pip\" = \"Pipistrellus pygmaeus\",\n                   \"bleb\" = \"Plecotus auritus\",\n                   # If already a scientific name keep it\n                   \"myotis daubentonii\" = \"Myotis daubentonii\") \n\n\nThe BatScientific vector is then used to covert the survey vector of bat names (the Species column in Table 3) so they are all scientific; using the iBats::make_scientific() function. The BatScientific can be expanded to cover many names and codes, if there are duplicate names or codes a conversion will not take place for that name or code. The tidied data with scientific species names is shown in Table 8\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# Remove too many species in a cell\ntidied1 &lt;- untidy1 %&gt;%\n  tidyr::separate_rows(Species)\n\ntidied1$Species &lt;- iBats::make_scientific(BatScientific, tidied1$Species)\n\n\n\n\nShow the code\nlibrary(gt)\n# Table made with gt()\ntidied1 %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 8: Tidied Data with Scientific Names\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPipistrellus pygmaeus\n\n\n2019-10-03 20:58:30\nPipistrellus pygmaeus\n\n\n2019-10-03 20:58:30\nNyctalus leisleri\n\n\n2019-10-03 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-03 21:25:30\nPipistrellus pipistrellus\n\n\n2019-10-03 21:25:30\nPipistrellus pygmaeus\n\n\n2019-10-03 21:25:30\nNyctalus leisleri\n\n\n2019-10-03 21:35:30\nPipistrellus pipistrellus\n\n\n\n\n\n\n\n\n\n\n2.5 Missing Latitude and Longitude Values\nThe BatExplorer data in the iBats package (see Table 9), was recorded on an evening transect bat detector survey. The data has missing longitude and latitude values, shown as NA and is not uncommon when the Global Positioning System (GPS) is trying to calculate its position beneath trees or in a steep valley.\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(iBats)\nlibrary(gt)\n\n# BatExplorer csv file is from the iBats package\nBatExplorer %&gt;% \n  head(n=15L)  %&gt;% \n  select(DateTime = Timestamp, \n         Species = `Species Text`, \n         Latitude = `Latitude [WGS84]`,\n         Longitude = `Longitude [WGS84]`) %&gt;% \n  # Table made with gt()\n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 9: Missing Longitude and Latitude Values (NA)\n\n\nDateTime\nSpecies\nLatitude\nLongitude\n\n\n\n\n06/05/2018 21:05:24\nPipistrellus pygmaeus\nNA\nNA\n\n\n06/05/2018 21:06:51\nNyctalus noctula\nNA\nNA\n\n\n06/05/2018 21:09:23\nNyctalus noctula\nNA\nNA\n\n\n06/05/2018 21:13:20\nNyctalus noctula\nNA\nNA\n\n\n06/05/2018 21:19:16\nPipistrellus pygmaeus\n50.51771\n-4.162705\n\n\n06/05/2018 21:20:33\nPipistrellus pygmaeus\n50.51704\n-4.162595\n\n\n06/05/2018 21:20:40\nPipistrellus pygmaeus\n50.51706\n-4.162693\n\n\n06/05/2018 21:31:51\nPipistrellus pygmaeus\n50.54168\n-4.188790\n\n\n06/05/2018 21:32:35\nPipistrellus pygmaeus\nNA\nNA\n\n\n06/05/2018 21:34:00\nNyctalus noctula\nNA\nNA\n\n\n06/05/2018 21:34:02\nNyctalus noctula\nNA\nNA\n\n\n06/05/2018 21:34:04\nNyctalus noctula\nNA\nNA\n\n\n06/05/2018 21:34:14\nNyctalus noctula\n50.51703\n-4.162153\n\n\n06/05/2018 21:34:27\nPipistrellus pipistrellus\n50.51703\n-4.162153\n\n\n06/05/2018 21:35:27\nRhinolophus hipposideros\n50.49506\n-4.137962\n\n\n\n\n\n\n\n\nThe longitude and latitude gives a position of the bat observation and is also used to determine sunset and sunrise; and if the values are not completed then these observations would be excluded from the analysis. A simple estimate of the missing latitude and longitude can be made by arranging the data in date/time order and using the function:\ntidyr::fill(c(Latitude, Longitude), .direction = \"downup\")\nThis fills the missing values from the nearest complete values; first down and then up. The filled data is shown in Table 10.\n\n\n\n\n\n\nWarning\n\n\n\nLatitude and longitude is required in every row for the sun times can be calculated.\n\n\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# BatExplorer csv file is from the iBats package\nBatExplorer %&gt;%\n  head(n = 15L) %&gt;%\n  select(\n    DateTime = Timestamp,\n    Species = `Species Text`,\n    Latitude = `Latitude [WGS84]`,\n    Longitude = `Longitude [WGS84]`\n  ) %&gt;%\n  arrange(DateTime) %&gt;% \n  tidyr::fill(c(Latitude, Longitude), .direction = \"downup\")\n\n\n\n\nShow the code\n# BatExplorer csv file is from the iBats package\nBatExplorer %&gt;% \n  head(n=15L)  %&gt;% \n  select(DateTime = Timestamp, \n         Species = `Species Text`, \n         Latitude = `Latitude [WGS84]`,\n         Longitude = `Longitude [WGS84]`) %&gt;% \n  fill(Latitude, .direction = \"downup\") %&gt;%\n    fill(Longitude, .direction = \"downup\") %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) %&gt;% \n  cols_align(\n    align = \"left\",\n    columns = DateTime\n  )\n\n\n\n\n\n\n\n\nTable 10: Filled Longitude and Latitude Values\n\n\nDateTime\nSpecies\nLatitude\nLongitude\n\n\n\n\n06/05/2018 21:05:24\nPipistrellus pygmaeus\n50.51771\n-4.162705\n\n\n06/05/2018 21:06:51\nNyctalus noctula\n50.51771\n-4.162705\n\n\n06/05/2018 21:09:23\nNyctalus noctula\n50.51771\n-4.162705\n\n\n06/05/2018 21:13:20\nNyctalus noctula\n50.51771\n-4.162705\n\n\n06/05/2018 21:19:16\nPipistrellus pygmaeus\n50.51771\n-4.162705\n\n\n06/05/2018 21:20:33\nPipistrellus pygmaeus\n50.51704\n-4.162595\n\n\n06/05/2018 21:20:40\nPipistrellus pygmaeus\n50.51706\n-4.162693\n\n\n06/05/2018 21:31:51\nPipistrellus pygmaeus\n50.54168\n-4.188790\n\n\n06/05/2018 21:32:35\nPipistrellus pygmaeus\n50.54168\n-4.188790\n\n\n06/05/2018 21:34:00\nNyctalus noctula\n50.54168\n-4.188790\n\n\n06/05/2018 21:34:02\nNyctalus noctula\n50.54168\n-4.188790\n\n\n06/05/2018 21:34:04\nNyctalus noctula\n50.54168\n-4.188790\n\n\n06/05/2018 21:34:14\nNyctalus noctula\n50.51703\n-4.162153\n\n\n06/05/2018 21:34:27\nPipistrellus pipistrellus\n50.51703\n-4.162153\n\n\n06/05/2018 21:35:27\nRhinolophus hipposideros\n50.49506\n-4.137962"
  },
  {
    "objectID": "tidy.html#sound-analysis-and-naming-bats",
    "href": "tidy.html#sound-analysis-and-naming-bats",
    "title": "Tidy Data",
    "section": "3 Sound Analysis and Naming Bats",
    "text": "3 Sound Analysis and Naming Bats\nSound analysis may not be able to distinguish calls to species level; in practice some calls may only be identified to genus or as acoustically similar; Table 11 suggests a naming convention for UK bat species6\n\n\nShow the code\n# UK_bat_names is from the iBats package\nUK_bat_names %&gt;% \n  select(-Common) %&gt;% \n  mutate_if(is.character, ~replace_na(.,\"\")) %&gt;% \n  rename(Species = Binomial, `Acoustic Group 1` = AcousticallySimilar1, `Acoustic Group 2` = AcousticallySimilar2) %&gt;% \n  gt() %&gt;% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %&gt;% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(everything())\n  )) %&gt;% \n  # reduce cell space\n  tab_options(data_row.padding = px(2)) \n\n\n\n\n\n\n\n\nTable 11: Sound Analysis and Naming Bats\n\n\nSpecies\nGenus\nAcoustic Group 1\nAcoustic Group 2\n\n\n\n\nBarbastella barbastellus\nBarbastella\n\n\n\n\nEptesicus serotinus\nEptesicus\n\nNyctaloid\n\n\nNyctalus leisleri\nNyctalus\nNyctalus spp.\nNyctaloid\n\n\nNyctalus noctula\nNyctalus\nNyctalus spp.\nNyctaloid\n\n\nMyotis alcathoe\nMyotis\nMyotis spp.\n\n\n\nMyotis bechsteinii\nMyotis\nMyotis spp.\n\n\n\nMyotis brandtii\nMyotis\nMyotis spp.\n\n\n\nMyotis daubentonii\nMyotis\nMyotis spp.\n\n\n\nMyotis mystacinus\nMyotis\nMyotis spp.\n\n\n\nMyotis nattereri\nMyotis\nMyotis spp.\n\n\n\nPipistrellus nathusii\nPipistrellus\nPipistrellus spp.\n\n\n\nPipistrellus pipistrellus\nPipistrellus\nPipistrellus spp.\n\n\n\nPipistrellus pygmaeus\nPipistrellus\nPipistrellus spp.\n\n\n\nPlecotus auritus\nPlecotus\nPlecotus spp.\n\n\n\nPlecotus austriacus\nPlecotus\nPlecotus spp.\n\n\n\nRhinolophus ferrumequinum\nRhinolophus\n\n\n\n\nRhinolophus hipposideros\nRhinolophus"
  },
  {
    "objectID": "tidy.html#data-validation",
    "href": "tidy.html#data-validation",
    "title": "Tidy Data",
    "section": "4 Data Validation",
    "text": "4 Data Validation\nMaking tidy data takes time and unintentional mistakes are easily made, its good practice to validate the data before it is used for reporting. The R package validation allows rules to be defined to check the data meets expectations, providing confidence for the data when used in analysis. The code below sets out the rules checking the iBats::statics data:\n\n\nShow the code\nSpeciesList &lt;- c(\n  \"Barbastella barbastellus\",\n  \"Myotis alcathoe\",\n  \"Myotis bechsteinii\",\n  \"Myotis brandtii\",\n  \"Myotis mystacinus\",\n  \"Myotis nattereri\",\n  \"Myotis daubentonii\",\n  \"Myotis spp.\",\n  \"Plecotus auritus\",\n  \"Plecotus spp.\",\n  \"Plecotus austriacus\",\n  \"Pipistrellus pipistrellus\",\n  \"Pipistrellus nathusii\",\n  \"Pipistrellus pygmaeus\",\n  \"Pipistrellus spp.\",\n  \"Rhinolophus ferrumequinum\",\n  \"Rhinolophus hipposideros\",\n  \"Nyctalus noctula\",\n  \"Nyctalus leisleri\",\n  \"Nyctalus spp.\",\n  \"Eptesicus serotinus\"\n)\n\nrules &lt;- validator(\n  # Check column types are corrects class\n  Description.col.type = is.character(Description),\n  DateTime.col.type = is.POSIXct(DateTime),\n  Species.col.type = is.character(Species),\n  Lat.col.type = is.numeric(Latitude),\n  Lon.col.type = is.numeric(Longitude),\n \n  # Ensure that all DateTime values are the length for yyyy-mm-dd hh:mm:ss n = 19\n  DateTime.len = field_length(DateTime, n = 19),\n  \n  # Ensure that there are no duplications of species pass and date/time\n  unique.bat.pass =is_unique(Species, DateTime),\n  \n  # location_vars := var_group(Latitude, Longitude),\n  # lat.missing = !is.na(location_vars),\n  \n  # Ensure that Latitude and Longitude doesn't have any missing values\n  lat.missing = !is.na(Latitude),\n  lon.missing = !is.na(Longitude),\n  \n  # Ensure latitude and longitude are valid locations\n  lat.within.range = in_range(Latitude, min=-90, max=90),\n  lon.within.range = in_range(Longitude, min=-180, max=180),\n  \n  #Check species is valid name\n  species.names = Species %in% SpeciesList\n)\n\n\nThe rules can then be applied to a data set with the confront function; below theconfront function applies these rules to the statics data; an output summary is shown in Table 12. Rules can be constructed and applied to any data set used to make bat reports; the rules can then be re-applied when the data is modified; for example when new data is appended.\n\n\nShow the code\nx &lt;- confront(statics, rules) \n\nsummary(x) %&gt;% \n  flextable() %&gt;% \n  autofit() %&gt;% \n  fontsize(part = \"body\", size = 10) %&gt;%\n    bold(part = \"header\") %&gt;% \n    bg(bg = \"black\", part = \"header\") %&gt;% \n    color(color = \"white\", part = \"header\") %&gt;% \n    align(j = 1, align = \"center\", part = \"header\") \n\n\n\n\nTable 12:  Validation Summary nameitemspassesfailsnNAerrorwarningexpressionDescription.col.type1100FALSEFALSEis.character(Description)DateTime.col.type1100FALSEFALSEis.POSIXct(DateTime)Species.col.type1100FALSEFALSEis.character(Species)Lat.col.type1100FALSEFALSEis.numeric(Latitude)Lon.col.type1100FALSEFALSEis.numeric(Longitude)DateTime.len6,9306,93000FALSEFALSEfield_length(DateTime, n = 19)unique.bat.pass6,9306,92460FALSEFALSEis_unique(Species, DateTime)lat.missing6,9306,93000FALSEFALSE!is.na(Latitude)lon.missing6,9306,93000FALSEFALSE!is.na(Longitude)lat.within.range6,9306,93000FALSEFALSEin_range(Latitude, min = -90, max = 90)lon.within.range6,9306,93000FALSEFALSEin_range(Longitude, min = -180, max = 180)species.names6,9306,93000FALSEFALSESpecies %vin% SpeciesList\n\n\n\nIn Table 12 the is_unique(Species, DateTime) rule shows 6 fails in the statics data; to view these fails the violating function is used. Table 13 lists the fails in the statics data allowing the discrepancies in the data to be judged; although here the date/time and species is a duplication the Description’s are different (and therefore not a duplication). A better rule too use would be validator(is_unique(Description, Species, DateTime)).\n\n\nShow the code\nrule &lt;- validator(is_unique(Species, DateTime))\nout &lt;- confront(statics, rule)\n\nviolating(statics, out) %&gt;% \n  flextable() %&gt;% \n  autofit() %&gt;% \n    bold(part = \"header\") %&gt;% \n    bg(bg = \"black\", part = \"header\") %&gt;% \n    color(color = \"white\", part = \"header\") %&gt;% \n    align(j = 1, align = \"center\", part = \"header\") \n\n\n\n\nTable 13:  Failed rows in the statics data DescriptionDateTimeSpeciesLongitudeLatitudeStatic 22016-07-30 23:16:59Pipistrellus pipistrellus-3.59258350.33323Static 42016-07-30 23:16:59Pipistrellus pipistrellus-3.59184850.33130Static 22016-08-04 22:12:36Pipistrellus pipistrellus-3.59258350.33323Static 42016-08-04 22:12:36Pipistrellus pipistrellus-3.59174850.33136Static 42016-08-25 22:08:10Pipistrellus pipistrellus-3.59173850.33133Static 52016-08-25 22:08:10Pipistrellus pipistrellus-3.59095850.33105"
  },
  {
    "objectID": "tidy.html#footnotes",
    "href": "tidy.html#footnotes",
    "title": "Tidy Data",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nthe standard is recommended by .gov.ukhttps://www.gov.uk/government/publications/open-standards-for-government/date-times-and-time-stamps-standard↩︎\na full list of time zones can be found here https://en.wikipedia.org/wiki/List_of_tz_database_time_zones↩︎\nhttps://www.iczn.org/the-code/the-international-code-of-zoological-nomenclature/the-code-online/↩︎\nSimmons, N.B. and A.L. Cirranello. 2023. Bat Species of the World: A taxonomic and geographic database. Version 1.3. Accessed on 03/14/2023.↩︎\nhttps://en.wikipedia.org/wiki/World_Geodetic_System↩︎\nAdapted from EcoBat’s naming convention.↩︎"
  },
  {
    "objectID": "visualisation.html",
    "href": "visualisation.html",
    "title": "Visualisation",
    "section": "",
    "text": "Good visualisation tells a story, removing the noise from the data and illuminating the useful information. We visualise to present information to a lay audience; it also helps interpretation and discussion within the survey team. Geospatial visualisation is shown on the Maps page.\nDiagrams, charts, figures are ubiquitous; do we still notice them? When a diagram is good it can have great influence, as shown in 100 Diagrams That Changed the World (Christianson 2014). Visualisation is the best way of communicating quantitative data and there are many modern examples on how to this; from the ground breaking work of Edward Tufte (Tufte 1983) (Tufte 2020) through to Alan Smith, at the Financial Times, with How Charts Work (Smith 2022). Other examples of data visualisation are: Information is Beautiful (McCandless 2012); Data Points - Visualization that means something (Yau 2013); and, Visualize This - The Flowing Data Guide to Design, Visualization, and Statistics (Yau 2011)."
  },
  {
    "objectID": "visualisation.html#bat-colours",
    "href": "visualisation.html#bat-colours",
    "title": "Visualisation",
    "section": "1 Bat Colours",
    "text": "1 Bat Colours\nColour can enhance visualisation, the choice and combination of colours is important to the communication (Crameri, Shephard, and Heron 2020). A consistent colour applied to individual bat species and a group of colours accessible to people with a visual impairment, helps make the visualisations readable. Unfortunately, accessibility is challenging with more than 8 or 10 colours; if this is the case consider separating the visualisation into different components, creating more than one graph or just highlighting the key species with one colour, with the remaining species shaded as grey.\nTable 1 lists the set of colours used in the iBats::bat_colours_default function and are used for most of the visualisations on this page. The iBats::bat_colours() function allows any colour to be associated with any bat name (including common names); Section 5.2 gives an example chart with common bat names.\n\n\nShow the code\nbat_colours_sci &lt;- c(\"Barbastella barbastellus\" = \"#1f78b4\", \n                     \"Myotis alcathoe\" = \"#a52a2a\",\n                     \"Myotis bechsteinii\" = \"#7fff00\",\n                     \"Myotis brandtii\" = \"#b2df8a\", \n                     \"Myotis mystacinus\" = \"#6a3d9a\", \n                     \"Myotis nattereri\" = \"#ff7f00\", \n                     \"Myotis daubentonii\" = \"#a6cee3\", \n                      \"Myotis spp.\" = \"#bcee68\",\n                      \"Plecotus auritus\" = \"#8b0000\", \n                      \"Plecotus spp.\" = \"#8b0000\", \n                      \"Plecotus austriacus\" = \"#000000\",\n                      \"Pipistrellus pipistrellus\" = \"#ffff99\", \n                      \"Pipistrellus nathusii\" = \"#8a2be2\", \n                      \"Pipistrellus pygmaeus\" = \"#b15928\", \n                      \"Pipistrellus spp.\" = \"#fdbf6f\", \n                      \"Rhinolophus ferrumequinum\" = \"#e31a1c\", \n                      \"Rhinolophus hipposideros\" = \"#33a02c\", \n                      \"Nyctalus noctula\" = \"#cab2d6\", \n                      \"Nyctalus leisleri\" = \"#fb9a99\", \n                      \"Nyctalus spp.\" = \"#eee8cd\", \n                      \"Eptesicus serotinus\" = \"#008b8b\")\n\nbat_colour_table &lt;- tibble(names(bat_colours_sci), unname(bat_colours_sci))\n\ncolnames(bat_colour_table) &lt;- c(\"Scientific Name\", \"Colour (Hex)\")\n\nbat_colour_table %&gt;% \n  # Table made with library(flextable)\n    flextable(col_keys = colnames(.)) %&gt;% \n    bold(part = \"header\") %&gt;% \n    autofit() %&gt;% \n    #autofit(add_w = 0.1, add_h = 0.1) %&gt;% \n    #bg(bg = \"black\", part = \"header\") %&gt;% \n    bg(j = 2, i = 1, bg = bat_colour_table$`Colour (Hex)`[1], part = \"body\") %&gt;% \n    bg(j = 2, i = 2, bg = bat_colour_table$`Colour (Hex)`[2], part = \"body\") %&gt;% \n    bg(j = 2, i = 3, bg = bat_colour_table$`Colour (Hex)`[3], part = \"body\") %&gt;% \n    bg(j = 2, i = 4, bg = bat_colour_table$`Colour (Hex)`[4], part = \"body\") %&gt;% \n    bg(j = 2, i = 5, bg = bat_colour_table$`Colour (Hex)`[5], part = \"body\") %&gt;% \n    bg(j = 2, i = 6, bg = bat_colour_table$`Colour (Hex)`[6], part = \"body\") %&gt;% \n    bg(j = 2, i = 7, bg = bat_colour_table$`Colour (Hex)`[7], part = \"body\") %&gt;% \n    bg(j = 2, i = 8, bg = bat_colour_table$`Colour (Hex)`[8], part = \"body\") %&gt;% \n    bg(j = 2, i = 9, bg = bat_colour_table$`Colour (Hex)`[9], part = \"body\") %&gt;% \n    bg(j = 2, i = 10, bg = bat_colour_table$`Colour (Hex)`[10], part = \"body\") %&gt;% \n    bg(j = 2, i = 11, bg = bat_colour_table$`Colour (Hex)`[11], part = \"body\") %&gt;% \n    color(j = 2, i = 11, color = \"white\", part = \"body\") %&gt;% \n    bg(j = 2, i = 12, bg = bat_colour_table$`Colour (Hex)`[12], part = \"body\") %&gt;% \n    bg(j = 2, i = 13, bg = bat_colour_table$`Colour (Hex)`[13], part = \"body\") %&gt;% \n    bg(j = 2, i = 14, bg = bat_colour_table$`Colour (Hex)`[14], part = \"body\") %&gt;% \n    bg(j = 2, i = 15, bg = bat_colour_table$`Colour (Hex)`[15], part = \"body\") %&gt;% \n    bg(j = 2, i = 16, bg = bat_colour_table$`Colour (Hex)`[16], part = \"body\") %&gt;% \n    bg(j = 2, i = 17, bg = bat_colour_table$`Colour (Hex)`[17], part = \"body\") %&gt;% \n    bg(j = 2, i = 18, bg = bat_colour_table$`Colour (Hex)`[18], part = \"body\") %&gt;% \n    bg(j = 2, i = 19, bg = bat_colour_table$`Colour (Hex)`[19], part = \"body\") %&gt;% \n    bg(j = 2, i = 20, bg = bat_colour_table$`Colour (Hex)`[20], part = \"body\") %&gt;% \n    bg(j = 2, i = 21, bg = bat_colour_table$`Colour (Hex)`[21], part = \"body\") %&gt;% \n   # color(color = \"white\", part = \"header\") %&gt;% \n    align(align = \"center\", part = \"header\" ) %&gt;% \n    align(j = 2, align = \"right\", part = \"body\") %&gt;% \n    italic(j = 1, italic = TRUE, part = \"body\") \n\n\n\n\nTable 1:  Bat Name and Colour Scientific NameColour (Hex)Barbastella barbastellus#1f78b4Myotis alcathoe#a52a2aMyotis bechsteinii#7fff00Myotis brandtii#b2df8aMyotis mystacinus#6a3d9aMyotis nattereri#ff7f00Myotis daubentonii#a6cee3Myotis spp.#bcee68Plecotus auritus#8b0000Plecotus spp.#8b0000Plecotus austriacus#000000Pipistrellus pipistrellus#ffff99Pipistrellus nathusii#8a2be2Pipistrellus pygmaeus#b15928Pipistrellus spp.#fdbf6fRhinolophus ferrumequinum#e31a1cRhinolophus hipposideros#33a02cNyctalus noctula#cab2d6Nyctalus leisleri#fb9a99Nyctalus spp.#eee8cdEptesicus serotinus#008b8b"
  },
  {
    "objectID": "visualisation.html#time-bats-were-active",
    "href": "visualisation.html#time-bats-were-active",
    "title": "Visualisation",
    "section": "2 Time Bats Were Active",
    "text": "2 Time Bats Were Active\nFigure 1 illustrates bat activity through one night near an Oak tree in the River Tavy valley, Devon. Rather than depicting a bat pass the time the bat was present is shown. The y-axis is expanded to spread the bat activity making the graph more readable.\nThe data used TavyOak is from the iBats package. The bat species colour for the graph were made using the iBats::bat_colours() function; this provided the colour values used by ggplot's manual scale function scale_fill_manual().\n\n\nShow the code\nbat_colours_sci &lt;- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n# graph anotation\ngraph_sunrise &lt;- TavyOak$sunrise[1]\ngraph_sunset &lt;- TavyOak$sunset[1]\n\n# graph time limits x-axis\ngraph_limit1 &lt;- TavyOak$sunset[1] - lubridate::hours(1)\ngraph_limit2 &lt;- TavyOak$sunrise[1] + lubridate::hours(1)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours(TavyOak$Species, colour_vector = bat_colours_sci)\n\nggplot(TavyOak, aes(y = 1, x = DateTime, fill = Species, size = bat_time)) +\n  geom_jitter(shape = 21, alpha = 0.7) +\n  geom_vline(\n    xintercept = graph_sunset,\n    colour = \"brown1\",\n    linetype = \"dashed\",\n    linewidth = 1,\n    alpha = 0.8\n  ) +\n  geom_vline(\n    xintercept = graph_sunrise,\n    colour = \"mediumblue\",\n    linetype = \"dashed\",\n    linewidth = 1,\n    alpha = 0.8\n  ) +\n  annotate(\"text\",\n    x = graph_sunset - lubridate::minutes(20),\n    y = 1,\n    label = \"Sunset\",\n    color = \"brown1\",\n    angle = 270\n  ) +\n  annotate(\"text\",\n    x = graph_sunrise + lubridate::minutes(20),\n    y = 1,\n    label = \"Sunrise\",\n    color = \"mediumblue\",\n    angle = 270\n  ) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  scale_x_datetime(\n    date_labels = \"%H:%M hrs\",\n    date_breaks = \"1 hour\",\n    limits = c(graph_limit1, graph_limit2)\n  ) +\n  labs(\n    fill = \"Species\",\n    size = \"Time Bat Was Present\\n(seconds)\",\n    y = \"For clarity activity is spread across the verstical scale\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"right\",\n    panel.grid.major.x = element_line(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10, angle = 270),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"),\n    legend.text = element_text(face = \"italic\"),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 10)\n  ) +\n  #Make the point size larger on the legend to show the colour\n  guides(fill = guide_legend(override.aes = list(size=4)))\n\n\n\n\n\nFigure 1: Time Bats Were Active Through The Night"
  },
  {
    "objectID": "visualisation.html#emergence-time-of-bats",
    "href": "visualisation.html#emergence-time-of-bats",
    "title": "Visualisation",
    "section": "3 Emergence Time of Bats",
    "text": "3 Emergence Time of Bats\nFigure 2 illustrates emergence times for UK bats based on the work of (Andrews and Pearson 2022).\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours_default(Andrews$Species)\n\nggplot(Andrews) +\n  geom_segment(aes(x = reorder(Species, -meanExit), xend = Species, y = firstExit95, yend = lastExit95), color = \"grey\", size = 2) +\n  geom_point(aes(x = reorder(Species, -meanExit), y = meanExit, fill = Species), color = \"black\", size = 5, shape = 21) +\n  scale_y_continuous(breaks = c(-20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", colour = \"purple\", size = 1) +\n  scale_fill_manual(values = graph_bat_colours) +\n  coord_flip() +\n  labs(\n    y = \"Minutes After Sunset\",\n    caption = \"adapted from (Andrews and Pearson, 2022)\\ngrey bar is indicative of the emergence time range\\ncoloured point is the mean emergence time\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_text(face = \"italic\"),\n    axis.title.y = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\n\n\n\nFigure 2: Roost Emergence Times After Sunset"
  },
  {
    "objectID": "visualisation.html#graphing-a-count-of-bats",
    "href": "visualisation.html#graphing-a-count-of-bats",
    "title": "Visualisation",
    "section": "4 Graphing a Count of Bats",
    "text": "4 Graphing a Count of Bats\nOne of the problems with presenting a count of bat passes observed in the UK is the relative abundance of the Common Pipistrelle (Pipistrellus pipistrellus). Figure 3 tries to resolve this issue by using a log scale, not a friendly scale to the lay reader but some mitigation is achieved by placing the actual count of bat passes on the graph. Figure 3 shows the count of bat species in the statics data.\n\n4.1 Dot Graph\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(broman) # useful add_commas function - \n# see https://cran.r-project.org/web/packages/broman/index.html\nlibrary(glue) # for joining text and variables\nlibrary(ggrepel) # for tidy graph labels\n\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\ngraph_data &lt;- statics %&gt;% #statics is a bat survey data set from the iBats package\n  group_by(Species) %&gt;%\n  count() %&gt;%\n  # Add a graph species label; commas added with library(broman)\n  mutate(\n    total = add_commas(n),\n    label = glue(\"{Species}: {total}\")\n  )\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours_default(graph_data$Species)\n\n\nggplot(graph_data, aes(y = reorder(Species, n), x = n, fill = Species)) +\n  geom_point(colour = \"black\", size = 5) +\n  geom_label_repel(\n    data = graph_data, aes(label = label),\n    nudge_y = -0.25,\n    nudge_x = ifelse(graph_data$n &lt; 100, 0.33, -0.33),\n    alpha = 0.7\n  ) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_x_log10(sec.axis = dup_axis()) +\n  annotation_logticks(sides = \"tb\") +\n  labs(\n    x = \"Bat Observations (Number of Passes)\",\n    caption = \"Note: Log scale used\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 12, face = \"bold\"),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"),\n    axis.title.x = element_text(size = 12, face = \"bold\"),\n    axis.title.y = element_blank()\n  )\n\n\n\n\n\nFigure 3: Count of All Species Observations\n\n\n\n\n\n\n4.2 Tree Map Description\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(treemapify) # extension to ggplot for plotting treemaps - \n# see https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\ngraph_data &lt;- statics %&gt;% #statics is a bat survey data set from the iBats package\n  group_by(Species, Description) %&gt;%\n  tally()\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours_default(graph_data$Species)\n\nggplot(graph_data, aes(area = n, fill = Species, label = Species, subgroup = Description)) +\n  scale_fill_manual(values = graph_bat_colours) +\n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(\n    place = \"centre\", grow = T, alpha = 0.9, colour =\n      \"grey20\", min.size = 0\n  ) +\n  geom_treemap_text(\n    colour = \"grey90\", place = \"topleft\", fontface = \"italic\",\n    reflow = T, min.size = 0, alpha = 0.9\n  ) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n\n\n\n\n\nFigure 4: Species and Location with the Area as the Number of Passes\n\n\n\n\n\n\n4.3 Tree Map Month\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(treemapify) # extension to ggplot for plotting treemaps - \n# see https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html\nlibrary(ggthemes) # for colour pallet \"Tableau 10\"\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\ngraph_data &lt;- statics_plus %&gt;%\n  group_by(Species, Month) %&gt;%\n  tally()\n\n\nggplot(graph_data, aes(area = n, fill = Month, label = Species, subgroup = Month)) +\n  scale_fill_tableau(palette = \"Tableau 10\") + # \n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(\n    place = \"centre\", grow = T, alpha = 0.9, colour =\n      \"grey20\", min.size = 0\n  ) +\n  geom_treemap_text(\n    colour = \"grey90\", place = \"topleft\", fontface = \"italic\",\n    reflow = T, min.size = 0, alpha = 0.9\n  ) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n\n\n\n\n\nFigure 5: Species and Month with the Area as the Number of Passes"
  },
  {
    "objectID": "visualisation.html#identifying-roosts",
    "href": "visualisation.html#identifying-roosts",
    "title": "Visualisation",
    "section": "5 Identifying Roosts",
    "text": "5 Identifying Roosts\n\n5.1 Evening Bats and Roost Potential\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus)\n\n# Add roost emergence times adapted from (Andrews and Pearson, 2022)\nstatics_plus &lt;- dplyr::left_join(statics_plus, Andrews, by = \"Species\")\n\n# Graph text\nyLab &lt;- \"Time before and after sunset (mins)\"\nCaption &lt;- \"Vertical dotted line represents sunset \\nHorizontal bars are emergence times from (Andrews and Pearson, 2022)\"\n\n# Just choose Observations 90 mins or less after sunset\ngraph_data &lt;- statics_plus %&gt;%\n  filter(post_set_min &lt;= 90)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours_default(graph_data$Species)\n\nggplot(graph_data, aes(x = Species, y = post_set_min, fill = Species)) +\n  geom_linerange(aes(x = Species, ymin = firstExit95, ymax = lastExit95),\n    size = 3, colour = \"floralwhite\"\n  ) +\n  geom_jitter(size = 3, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = 0, linetype = \"dotted\", colour = \"floralwhite\", linewidth = 2) +\n  facet_grid(Description ~ ., scales = \"free_y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = yLab,\n    caption = Caption\n  ) +\n  scale_y_continuous(breaks = c(-30, -15, 0, 15, 30, 45, 60, 75, 90, 105), limits = c(-30, 105)) +\n  coord_flip() +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.caption = element_text(colour = \"grey30\", face = \"bold\"), # white\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(colour = \"grey30\", size = 12),\n    axis.text.x = element_text(hjust = 1, colour = \"grey30\", face = \"bold\"),\n    axis.text.y = element_text(colour = \"grey30\", face = \"bold.italic\"),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"), # Bold facet names\n    panel.background = element_rect(fill = \"midnightblue\"),\n    panel.grid.major.x = element_line(colour = \"transparent\", linetype = \"dotted\"), # grey70\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.background = element_rect(fill = \"transparent\"), # grey70\n    axis.ticks = element_blank(),\n    strip.background = element_rect(fill = \"black\")\n  )\n\n\n\n\n\nFigure 6: Bats Observed Around Dusk and Roost Potential\n\n\n\n\n\n\n5.2 Dawn Bats and Roost Potential\n\n\nShow the code\n# List of bat common names and the scientific names\nBatCommon &lt;- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Myotis alcathoe\" = \"Alcathoe\",\n  \"Myotis bechsteinii\" = \"Bechstein's\",\n  \"Myotis brandtii\" = \"Brandt's\",\n  \"Myotis daubentonii\" = \"Daubenton's\",\n  \"Myotis mystacinus\" = \"Whiskered\",\n  \"Myotis spp.\" = \"Myotis\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\",\n  \"Nyctalus leisleri\" = \"Leisler's\",\n  \"Plecotus auritus\" = \"Brown long-eared\",\n  \"Plecotus austriacus\" = \"Grey long-eared\",\n  \"Pipistrellus nathusii\" = \"Nathusius pipistrelle\",\n  \"Myotis nattereri\" = \"Natterer's\",\n  \"Nyctalus noctula\" = \"Noctule\",\n  \"Nyctalus spp.\" = \"Noctule or Leisler's\",\n  \"Eptesicus serotinus\" = \"Serotine\",\n  \"Pipistrellus pipistrellus\" = \"Common pipistrelle\",\n  \"Pipistrellus pygmaeus\" = \"Soprano pipistrelle\",\n  \"Pipistrellus spp.\" = \"Pipistrelle\",\n  \"Plecotus spp.\" = \"Long-eared\")\n\n# From Scientific name create a Common Name Vector \nstatics$Common &lt;-  unname(BatCommon[statics$Species])\n\n# Add data and time information to the statics data using theiBats::date_time_info\nstatics_plus &lt;- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus &lt;- iBats::sun_night_metrics(statics_plus)\n\n# Add roost emergence times adapted from (Andrews and Pearson, 2022)\nstatics_plus &lt;- dplyr::left_join(statics_plus, Andrews, by = \"Species\")\n\n# From Scientific name create a Common Name Vector \nstatics_plus$Common &lt;-  unname(BatCommon[statics_plus$Species])\n\n# Graph text\nyLab &lt;- \"Time before and after sunrise (mins)\"\nCaption &lt;- \"Vertical dotted line represents sunrise\"\n\n# Just choose Observations 90 mins or less after sunset\ngraph_data &lt;- statics_plus %&gt;%\n  filter(pre_rise_min &lt;= 90) %&gt;%\n  mutate(pre_rise_min = pre_rise_min * (-1)) # For correct orientation on the graph\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(x = Common, y = pre_rise_min, fill = Species)) +\n  geom_jitter(size = 3, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = 0, linetype = \"dotted\", colour = \"floralwhite\", linewidth = 2) +\n  facet_grid(Description ~ ., scales = \"free_y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = yLab,\n    caption = Caption\n  ) +\n  scale_y_continuous(breaks = c(-90, -75, -60, -45, -30, -15, 0, 15), limits = c(-90, 15)) +\n  coord_flip() +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.caption = element_text(colour = \"grey30\", face = \"bold\"), # white\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(colour = \"grey30\", size = 12),\n    axis.text.x = element_text(hjust = 1, colour = \"grey30\", face = \"bold\"),\n    axis.text.y = element_text(colour = \"grey30\", face = \"bold.italic\"),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"), # Bold facet names\n    panel.background = element_rect(fill = \"midnightblue\"),\n    panel.grid.major.x = element_line(colour = \"transparent\", linetype = \"dotted\"), # grey70\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.background = element_rect(fill = \"transparent\"), # grey70\n    axis.ticks = element_blank(),\n    strip.background = element_rect(fill = \"black\")\n  )\n\n\n\n\n\nFigure 7: Bats Observed Around Dawn and Roost Potential"
  },
  {
    "objectID": "visualisation.html#standard-graphs",
    "href": "visualisation.html#standard-graphs",
    "title": "Visualisation",
    "section": "6 Standard Graphs",
    "text": "6 Standard Graphs\nBar charts (Figure 8 (a)) and pie charts (Figure 8 (b)) are part of the standard repertoire for reporting bat surveys. These flat graphs can be hard to interpret when there are a large number of variables to display, as in this case with the number of different species in Figure 8; and/or a high value, such as the Pipistrellus pipistrellus species in Figure 8, that can hide other values. These charts are more effective when they are interactive; example pie chart and bar charts are demonstrated on the Interactive Reports page.\n\n\nShow the code\ngraph_data &lt;- statics %&gt;%\n  group_by(Species) %&gt;%\n  count()\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours &lt;- iBats::bat_colours_default(graph_data$Species)\n\n\ng1 &lt;- ggplot(graph_data, aes(x = \"\", y = n, fill = Species)) +\n  geom_bar(width = 1, stat = \"identity\") +\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = \"Bat Pass Observations (Nr)\",\n    fill = \"Species\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"right\",\n    legend.text = element_text(face = \"italic\"),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    strip.text = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_blank()\n  )\n\n\ng2 &lt;- ggplot(graph_data, aes(x = reorder(Species, n), y = n, fill = Species)) +\n  geom_col() +\n  scale_y_continuous(label = comma) +\n  coord_flip() +\n  scale_fill_manual(values = graph_bat_colours) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\", # No legend\n    axis.text.x = element_text(size = 12, angle = 0, face = \"bold\"),\n    axis.text.y = element_text(size = 12, face = \"bold.italic\"), # bat names italic\n    axis.title.y = element_blank(), # no y title (just bat names)\n    axis.title.x = element_blank(), # no x title\n    panel.grid.major = element_blank(), # remove grid lines\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey20\", linewidth = 0.1, linetype = \"dashed\")\n  )\n\ng1\ng2\n\n\n\n\n\n\n\n\n(a) Pie Chart\n\n\n\n\n\n\n\n(b) Bar Chart\n\n\n\n\nFigure 8: Conventional Graphs used for Reporting Bat Surveys"
  }
]