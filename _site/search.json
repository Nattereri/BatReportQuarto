[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "A simple bat report from minimal data demonstrating literate programming with Quarto (or the world beyond Excel)."
  },
  {
    "objectID": "index.html#install-r-rstudio-and-packages",
    "href": "index.html#install-r-rstudio-and-packages",
    "title": "Getting Started",
    "section": "Install R RStudio and Packages",
    "text": "Install R RStudio and Packages\n\nDownload and install the latest version of R https://cran.r-project.org/bin/windows/base/. Download the version for your operating system; R can be downloaded for Windows, Mac & Linux.\n\nIt is recommended R is used through the RStudio IDE. Download and install the latest version of RStudio from their web page https://www.rstudio.com/products/rstudio/#Desktop. Download the free desktop version.\n\n\nInstall the iBats Package from GitHub\nThe iBats package contains functions that help with the Data Science of bat survey results. To install this package use the code below in the console (see Figure ); one line at a time. The package is installed from GitHub.\n\ninstall.packages(\"devtools\")\n\ndevtools::install_github(\"Nattereri/iBats\")"
  },
  {
    "objectID": "meta.html",
    "href": "meta.html",
    "title": "Meta Data",
    "section": "",
    "text": "Many other columns would be added to a tidy dataset so it becomes more useful for analysis; some of these are described below."
  },
  {
    "objectID": "meta.html#date-and-time-information",
    "href": "meta.html#date-and-time-information",
    "title": "Meta Data",
    "section": "Date and Time Information",
    "text": "Date and Time Information\n\nThe Night\nBats are active through the night; the date of the night is the date at sunset and lasts to sunrise the morning of the following day. The Night is a variable column that is added to the tidy data; it is useful convention that helps avoid the confusion of having contiguous bat activity over two dates.\nThe Night can be obtained from the iBats package using the date_time_info function. It requires a data.frame or tibble with a DateTime column, the time zone can be specified the default is Europe/London.\nThe code below takes the static_data set from the iBats package and adds the Night column, Table 1 shows a random selection of 5 rows from the static_data set.\n\n\nShow the code\nstatic_data_with_night <- iBats::date_time_info(static_data)\n\n\n\n\nShow the code\nstatic_data_with_night %>% \n  sample_n(5) %>% \n  select(Description, Night, DateTime, Species, Latitude, Longitude) %>% \n  #Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = Night\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = Night\n    )\n  )\n\n\n\n\n\n\nTable 1:  The Night from the DateTime Column \n  \n  \n    \n      Description\n      Night\n      DateTime\n      Species\n      Latitude\n      Longitude\n    \n  \n  \n    Static 4\n2016-07-28\n2016-07-28 22:36:52\nPipistrellus pipistrellus\n50.33141\n-3.591878\n    Static 2\n2016-06-22\n2016-06-23 02:25:20\nNyctalus noctula\n50.33323\n-3.592583\n    Static 4\n2016-07-31\n2016-08-01 04:33:35\nBarbastella barbastellus\n50.33126\n-3.591808\n    Static 5\n2016-06-06\n2016-06-07 04:15:05\nBarbastella barbastellus\n50.33095\n-3.590775\n    Static 4\n2016-06-07\n2016-06-07 23:28:47\nPipistrellus pipistrellus\n50.33133\n-3.591778\n  \n  \n  \n\n\n\n\n\n\n\nOther Date and Time Information added\nThe function iBats::date_time_info() adds other date and time information: month, year and time see Table 2 (note: not all columns are shown).\n\n\nShow the code\nstatic_data_with_night %>% \n  sample_n(5) %>% \n  select(Description, Month, MonthFull, Year, JustTime, DateTime, Species, Latitude, Longitude) %>% \n  #Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  )\n\n\n\n\n\n\nTable 2:  Other Date and Time Information from the DateTime Column \n  \n  \n    \n      Description\n      Month\n      MonthFull\n      Year\n      JustTime\n      DateTime\n      Species\n      Latitude\n      Longitude\n    \n  \n  \n    Static 4\nAug\nAugust\n2016\n13:27:25\n2016-08-28 01:27:25\nPipistrellus pipistrellus\n50.33136\n-3.591798\n    Static 2\nSep\nSeptember\n2016\n10:34:22\n2016-09-18 22:34:22\nPipistrellus nathusii\n50.33323\n-3.592583\n    Static 2\nJul\nJuly\n2016\n10:46:48\n2016-07-29 22:46:48\nPipistrellus pipistrellus\n50.33323\n-3.592583\n    Static 4\nAug\nAugust\n2016\n12:30:54\n2016-08-04 00:30:54\nPipistrellus pipistrellus\n50.33136\n-3.591748\n    Static 1\nAug\nAugust\n2016\n09:40:57\n2016-08-13 21:40:57\nPipistrellus pipistrellus\n50.33218\n-3.594968"
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Tidy Data",
    "section": "",
    "text": "Tidy Data is a consistent way to organise your data [@wickham_tidy_2014]. Getting your data into this format requires some initial work, but that effort pays off in the long term. Once you have tidy data you will spend less time wrangling data from one representation to another, allowing you to spend more time on the analytic questions at hand. Unfortunately, there is a rule of thumb; 80% of time doing data science is spent wrangling data; particularly the effort required in sorting and rearranging the data into the tidy and therefore usable format.\nThere are three interrelated rules which make a dataset tidy, such as the data shown in Table @ref(tab:table01):"
  },
  {
    "objectID": "tidy.html#minimal-data-requirement",
    "href": "tidy.html#minimal-data-requirement",
    "title": "Tidy Data",
    "section": "Minimal Data Requirement",
    "text": "Minimal Data Requirement\nTo undertake meaningful data analysis, it is recommended that data collected from bat activity surveys is wrangled into tidy data that has the following five variables (columns) as a minimum:\n\nDescription\nDateTime\nSpecies\nLatitude\nLongitude\n\nThe rationale for these variables is as follows:\nDescription a column to help identify the observation for example a location, surveyor or survey number.\nDateTime: the date and time of the bat observation to BS ISO 8601:2004 i.e. yyyymmdd hh:mm:ss. The use of BS ISO 8601:2004 prevents confusion over the date format 1 . Reference bat activity to the local time and specifying an iana2 time zone allows for daylight saving times to considered; the iana code for the UK is Europe/London.\nSpecies: bat species names should follow the “binomial nomenclature” from the International Code of Zoological Nomenclature (ICZN)3 - e.g. Barbastella barbastellus, Eptesicus serotinus, etc… A column of local common names can always be added to the tidy data, i.e. in a separate column see Appendix 8. Sound analysis may not be able to distinguish calls to species level; in practice some calls may only be identified to genus or less; Table @ref(tab:table04) gives a practical and consistent guide to naming4.\nLongitude and Latitude: World Geodetic System 19845 (WGS84); as used by Google earth. A digital, numeric, format should be used. Any other spatial reference system can be used (e.g. British National Grid Easting/Northing), as this can be stored as an extra column in the tidy data, the prerequisite is that the reference system can be converted to WGS84; which is the case for most national or state co-ordinate systems. Using a global co-ordinate system such as WSG84 give access to the many open-source application programming interfaces (API) available that assist with data analysis (e.g. assessing sunset and sunrise times or the adjustment to daylight saving)."
  },
  {
    "objectID": "tidy.html#making-bat-data-tidy",
    "href": "tidy.html#making-bat-data-tidy",
    "title": "Tidy Data",
    "section": "Making Bat Data Tidy",
    "text": "Making Bat Data Tidy\nResults of bat sound analysis can be untidy:\n\ntwo or more species in one cell (see Table Table 2);\ncount of bats (Tables Table 4); and,\ntwo of more columns with species of same date and time.\nLongitude and Latitude columns with missing values\n\nWhile the bat survey results shown in Table Table 1 is an example of a tidy data set; the data sets in Table 2 and Table 4 are untidy and would need to be made tidy to undertake analysis.\nData preparation is not just a first step but must be repeated many times over during analysis; as new problems come to light, or new data is collected. Apart from making bat data into a tidy format, there are many other tasks involved in cleaning data: parsing dates and numbers, identifying missing values, correcting character encodings, matching similar but not identical values (such as those created by typos).\n\n\nShow the code\nTable <- static_data %>% # static_data is a tidy data set from the iBats package\n  #select(DateTime, Species, Latitude, Longitude, Description) %>% \n  rename(`Date and Time` = DateTime,  `Bat Species` = Species) %>% \n  sample_n(10) %>% \n  arrange(`Date and Time`)\n\nknitr::kable(Table)\n\n\n\n\nTable 1: Tidy Bat data\n\n\n\n\n\n\n\n\n\nDescription\nDate and Time\nBat Species\nLongitude\nLatitude\n\n\n\n\nStatic 2\n2016-05-30 04:43:35\nPipistrellus pipistrellus\n-3.592583\n50.33323\n\n\nStatic 2\n2016-05-31 00:32:59\nPipistrellus pipistrellus\n-3.592583\n50.33323\n\n\nStatic 4\n2016-07-31 22:27:46\nPipistrellus pipistrellus\n-3.591808\n50.33126\n\n\nStatic 5\n2016-08-04 05:21:23\nPipistrellus pipistrellus\n-3.590898\n50.33094\n\n\nStatic 4\n2016-08-05 01:06:19\nPipistrellus pipistrellus\n-3.591748\n50.33136\n\n\nStatic 2\n2016-08-12 22:22:56\nPipistrellus pipistrellus\n-3.592583\n50.33323\n\n\nStatic 4\n2016-08-27 23:09:56\nPipistrellus pipistrellus\n-3.591798\n50.33136\n\n\nStatic 2\n2016-09-18 02:55:28\nPipistrellus pipistrellus\n-3.592583\n50.33323\n\n\nStatic 2\n2016-09-19 00:36:06\nMyotis spp.\n-3.592583\n50.33323\n\n\nStatic 4\n2016-10-17 02:52:04\nPipistrellus pipistrellus\n-3.591798\n50.33132\n\n\n\n\n\n\n\nToo Many Species in a Cell\n\n\nShow the code\nSpecies <- c(\"PIPPYG\", \n             \"PIPPYG, NYCLEI\", \n             \"PIPPYG\", \n             \"PIPPIP, PIPPYG, NYCLEI\", \n             \"PIPPIP\")\n\nDateTime <- c(\"2019-10-03 20:55:30\", \n              \"2019-10-03 20:58:30\",\n              \"2019-10-03 21:15:30\",\n              \"2019-10-03 21:25:30\",\n              \"2019-10-03 21:35:30\")\n\nuntidy1 <- tibble(DateTime, Species)\n\nknitr::kable(untidy1)\n\n\n\n\nTable 2: Untidy Bat Data Too Many Species in a Cell\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nPIPPYG, NYCLEI\n\n\n2019-10-03 21:15:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nPIPPIP, PIPPYG, NYCLEI\n\n\n2019-10-03 21:35:30\nPIPPIP\n\n\n\n\n\n\nToo many species in a cell, as in Table 2, can be made tidy by expanding the data so each species observed is in it’s own row; as shown below in Table 3\n\n\nShow the code\ntidied1 <- untidy1 %>% \n  tidyr::separate_rows(Species)\n\nknitr::kable(tidied1)\n\n\n\n\nTable 3: Tidied Bat Data from Too Many Species in a Cell\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nNYCLEI\n\n\n2019-10-03 21:15:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nPIPPIP\n\n\n2019-10-03 21:25:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nNYCLEI\n\n\n2019-10-03 21:35:30\nPIPPIP\n\n\n\n\n\n\n\n\nA Column of Bat Counts\n\n\nShow the code\nDateTime <- c(\"2019-10-05 20:35:15\", \n              \"2019-10-05 20:38:30\",\n              \"2019-10-05 20:49:40\",\n              \"2019-10-05 21:05:15\",\n              \"2019-10-05 21:15:30\",\n              \"2019-10-05 21:25:45\")\n\nSpecies <- c(\"Pipistrellus pipistrellus\", \n             \"Pipistrellus pygmaeus\", \n             \"Nyctalus noctula\",\n             \"Pipistrellus pipistrellus\", \n             \"Pipistrellus pygmaeus\", \n             \"Pipistrellus pipistrellus\")\n\nNumber <- c(1, 1, 2, 1, 3, 1)\n\nuntidy2 <- tibble(DateTime, Species, Number)\n\nknitr::kable(untidy2)\n\n\n\n\nTable 4: Untidy Bat Data a Column of Counting the Bats\n\n\nDateTime\nSpecies\nNumber\n\n\n\n\n2019-10-05 20:35:15\nPipistrellus pipistrellus\n1\n\n\n2019-10-05 20:38:30\nPipistrellus pygmaeus\n1\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n2\n\n\n2019-10-05 21:05:15\nPipistrellus pipistrellus\n1\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n3\n\n\n2019-10-05 21:25:45\nPipistrellus pipistrellus\n1\n\n\n\n\n\n\nA count of species, as in Table 4, can be made tidy by un-counting the data so each species observed is in it’s own row; as shown below in Table 5\n\n\nShow the code\ntidied2 <- untidy2 %>% \n  tidyr::uncount(Number)\n\nknitr::kable(tidied2)\n\n\n\n\nTable 5: Tidied Bat Data with the Column Bats Un-counted\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-05 20:35:15\nPipistrellus pipistrellus\n\n\n2019-10-05 20:38:30\nPipistrellus pygmaeus\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n\n\n2019-10-05 21:05:15\nPipistrellus pipistrellus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:25:45\nPipistrellus pipistrellus"
  }
]