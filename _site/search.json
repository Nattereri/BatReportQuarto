[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Reporting Bat Survey Data compliments the data science chapters of the forthcoming BCT Bat Survey Guidelines 4th Edition. Unlike the guidelines it has the R code making the analysis; which can be copied and used.\nThese web pages are written by Steve Markham, Director and Data Scientist at Marquis & Lord Ltd. Over my 40-year career I have developed and used software applications in water management and more recently, the last 15 years; applied data science to a wide range of projects using the R software environment. I have held a Natural England Roost Visitors Licence since 1997, and Survey and Research Licence Level 2; undertaking numerous commercial bat projects and voluntary bat work, including being a Trustee of the Bat Conservation Trust from 2012 to 2021. As a Fellow of the Royal Statistical Society I advocate the importance of statistics and data. As a member of the editorial board of all editions of the Bat Survey Guidelines1, I encourage ecologists to make the most of their bat survey data; these web pages hopefully make it easier to do this, and more rewarding - its good for bats!\nThis web site also introduces the iBats package2. iBats is a package with a range of functions that hopefully enhances and smooths the data science of bat data collected from bat detectors post sound identification.\n\nFinally a special thanks to the bat workers who have put up with my incessant data talk, especially: Amanda, Anna, Kevin, Liat, Phil, Richard and, Suzy.\n\n\n\n\n\nFootnotes\n\n\nThere have been four editions (2007, 2012, 2016 and 2023), For the 4th edition (due early 2023), the sections on bat survey design and data analysis were completely revised to incorporate a data science approach to bat surveys: tidy data, data aggregation, visualization, statistical analysis, and reproducibility. The current version of the Bat Survey Guidelines can be found here: https://www.bats.org.uk/resources/guidance-for-professionals/bat-surveys-for-professional-ecologists-good-practice-guidelines-3rd-edition↩︎\nthe iBats package is held on GitHub: https://github.com/Nattereri/iBats↩︎"
  },
  {
    "objectID": "aggregation.html",
    "href": "aggregation.html",
    "title": "Aggregation",
    "section": "",
    "text": "Data aggregation is one of the pillars of data analysis, the process where tidy data is gathered and expressed in a summary form. Bat survey data tends to be aggregated in two ways:\nThe bat survey data statics in the iBats package has 6,930 bat observations; a random selection of 5 rows is shown in Table 1."
  },
  {
    "objectID": "aggregation.html#count-of-bats",
    "href": "aggregation.html#count-of-bats",
    "title": "Aggregation",
    "section": "1 Count of Bats",
    "text": "1 Count of Bats\nThe simplest form of aggregation is a count of bats1; as shown in Table 2\n\n\nShow the code\nstatics %>%\n  group_by(Species) %>% \n  count() %>% \n  #arrange descending\n  arrange(desc(n)) %>% \n  # rename n as count\n  rename(`Bat Species` = Species, Count = n) %>% \n  # so table is produced with individual species on one row\n  ungroup() %>% \n  # Table made gt()\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(`Bat Species`)\n    )\n  )\n\n\n\n\n\n\nTable 2:  A Count by Species \n  \n  \n    \n      Bat Species\n      Count\n    \n  \n  \n    Pipistrellus pipistrellus\n4972\n    Myotis spp.\n435\n    Barbastella barbastellus\n419\n    Nyctalus noctula\n315\n    Pipistrellus spp.\n283\n    Rhinolophus ferrumequinum\n160\n    Plecotus spp.\n136\n    Pipistrellus pygmaeus\n86\n    Rhinolophus hipposideros\n73\n    Pipistrellus nathusii\n32\n    Eptesicus serotinus\n12\n    Nyctalus leisleri\n3\n    Myotis nattereri\n2\n    Nyctalus spp.\n2\n  \n  \n  \n\n\n\n\n\nMore informative tables can be made by adding meta data such as the Month and Year of the observations. This is easy done on a tidy data conforming to the minimal data requirement with the date_time_info function in the iBats package. Table 3 shows the monthly count (bat passes) of Annex II species2; .\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# re-order months column with rev so months run top to bottom of the table\nstatics_plus <- statics_plus %>%\n   mutate(MonthFull = factor(MonthFull, levels = rev(month_levels_full), ordered = T))\n\nAnnexII <- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\ntable_border <- fp_border(color = \"black\", width = 1) # from library(officer)\n\nstatics_plus %>%\n  filter(Species %in% AnnexII) %>%\n  group_by(MonthFull, Species) %>%\n  count() %>%\n  # arrange descending\n  arrange(desc(MonthFull)) %>%\n  # rename n as count\n  rename(Month = MonthFull, `Bat Species` = Species, Count = n) %>%\n  # Table made with flextable\n  flextable(col_keys = colnames(.)) %>%\n  italic(j = 2, italic = TRUE, part = \"body\") %>% \n  fontsize(part = \"header\", size = 12) %>%\n  fontsize(part = \"body\", size = 12) %>%\n  colformat_double(j = \"Count\", digits = 4, big.mark = \",\") %>%\n  width(j = 1, width = 2) %>%\n  width(j = 2, width = 2.5) %>%\n  width(j = 3, width = 1) %>%\n  merge_v(j = 1) %>%\n  border_inner_h(part = \"body\", border = table_border) %>%\n  hline_bottom(part = \"body\", border = table_border) %>%\n  bg(bg = \"black\", part = \"header\") %>%\n  color(color = \"white\", part = \"header\")\n\n\n\n\nTable 3:  A Count of Annex II Bats Grouped by Month MonthBat SpeciesCountMayBarbastella barbastellus7Rhinolophus ferrumequinum9Rhinolophus hipposideros10JuneBarbastella barbastellus198Rhinolophus ferrumequinum47Rhinolophus hipposideros11JulyBarbastella barbastellus49Rhinolophus ferrumequinum7Rhinolophus hipposideros4AugustBarbastella barbastellus109Rhinolophus ferrumequinum31Rhinolophus hipposideros23SeptemberBarbastella barbastellus9Rhinolophus ferrumequinum64Rhinolophus hipposideros17OctoberBarbastella barbastellus47Rhinolophus ferrumequinum2Rhinolophus hipposideros8\n\n\n\nTables of numbers can be frustrating to read. To help readability the table can be annotated highlighting the count on a colour scale linked to the magnitude of the result. This is shown in Table 4 for the count of bats shown in Table 3.\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# re-order months column with rev so months run top to bottom of the table\nstatics_plus <- statics_plus %>%\n   mutate(MonthFull = factor(MonthFull, levels = rev(month_levels_full), ordered = T))\n\nAnnexII <- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\ntable_border <- fp_border(color = \"black\", width = 1) # from library(officer)\n\ntable_data <- statics_plus %>%\n  filter(Species %in% AnnexII) %>%\n  group_by(MonthFull, Species) %>%\n  count() %>%\n  # arrange descending\n  arrange(desc(MonthFull)) %>%\n  # rename n as count\n  rename(Month = MonthFull, `Bat Species` = Species, Count = n) \n\n# Find max and min counts\nmaxCount <- max(table_data$Count, na.rm = T)\nminCount <- min(table_data$Count, na.rm = T)\n\n#Make coloured palette\ncolourer <- scales::col_numeric(\n  palette = c(\"transparent\", \"orangered2\"),\n  domain = c(minCount, maxCount)) \n\n# Table made with flextable\ntable_data %>% \n  flextable(col_keys = colnames(.)) %>%\n  italic(j = 2, italic = TRUE, part = \"body\") %>% \n  fontsize(part = \"header\", size = 12) %>%\n  fontsize(part = \"body\", size = 12) %>%\n  colformat_double(j = \"Count\", digits = 4, big.mark = \",\") %>%\n  width(j = 1, width = 2) %>%\n  width(j = 2, width = 2.5) %>%\n  width(j = 3, width = 1) %>%\n  merge_v(j = 1) %>%\n  # Scale colour to count\n  bg(bg = colourer, j = \"Count\", part = \"body\") %>%\n  border_inner_h(part = \"body\", border = table_border) %>%\n  hline_bottom(part = \"body\", border = table_border) %>%\n  bg(bg = \"black\", part = \"header\") %>%\n  color(color = \"white\", part = \"header\")\n\n\n\n\nTable 4:  A Count (Highlighted) of Annex II Bats Grouped by Month MonthBat SpeciesCountMayBarbastella barbastellus7Rhinolophus ferrumequinum9Rhinolophus hipposideros10JuneBarbastella barbastellus198Rhinolophus ferrumequinum47Rhinolophus hipposideros11JulyBarbastella barbastellus49Rhinolophus ferrumequinum7Rhinolophus hipposideros4AugustBarbastella barbastellus109Rhinolophus ferrumequinum31Rhinolophus hipposideros23SeptemberBarbastella barbastellus9Rhinolophus ferrumequinum64Rhinolophus hipposideros17OctoberBarbastella barbastellus47Rhinolophus ferrumequinum2Rhinolophus hipposideros8"
  },
  {
    "objectID": "aggregation.html#summary-statistics",
    "href": "aggregation.html#summary-statistics",
    "title": "Aggregation",
    "section": "2 Summary Statistics",
    "text": "2 Summary Statistics\nSummary statistics for the Common pipistrelle (Pipistrellus pipistrellus) observations at all static locations for each night is shown in Table 5; to make the table easier to read, the median column is highlighted with a graduated colour scale. The summary statistics are calculated with the favstats function from the mosaic package.\n\n\nShow the code\nlibrary(mosaic)\nlibrary(gt)\nlibrary(gtExtras)\n\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Group by Description and Night and Count the Observations\ngrouped_data <- statics_plus %>% \n  filter(Species == \"Pipistrellus pipistrellus\") %>% \n  group_by(Description, Night) %>% \n  tally()\n\n# The summary statistics are saved into a variable riven_cond_stats \ncond_stats <- favstats(n~Description, data = grouped_data)\n\n# riven_cond_stats is made into a the table (using the code below)\ncond_stats %>% \n  # Create the table with the gt package\n  gt() %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  gt_color_rows(median, palette = \"ggsci::yellow_material\")\n\n\n\n\n\n\nTable 5:  Common Pipstrelle Observations (Passes) at the Static Locations \n  \n  \n    \n      Description\n      min\n      Q1\n      median\n      Q3\n      max\n      mean\n      sd\n      n\n      missing\n    \n  \n  \n    Static 1\n1\n1.0\n2\n3.5\n73\n6.391304\n15.570190\n23\n0\n    Static 2\n1\n6.0\n10\n17.5\n42\n12.031746\n8.820738\n63\n0\n    Static 3\n1\n3.5\n6\n11.0\n40\n9.740741\n10.323955\n27\n0\n    Static 4\n10\n33.5\n78\n155.5\n438\n115.129032\n121.519749\n31\n0\n    Static 5\n1\n4.0\n7\n9.0\n31\n8.103448\n6.586484\n29\n0\n  \n  \n  \n\n\n\n\n\nTable 6 shows the summary statistics for Annex II Bat Species3 observations by month; with the maximum number of nightly bat passes highlighted. The table can be grouped by Month through switching Common and MonthFull names in the code below; this alternative table is shown in Table 7 with the mean (average) number of nightly bat passes highlighted.\n\n\nShow the code\nlibrary(mosaic)\nlibrary(gt)\nlibrary(gtExtras)\n\n# Annex II Bats (in the static)\nAnnexII <- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# List of bat common names and the scientific names\nBatCommon <- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\")\n\n# From Scientific name create a Common Name Vector \nstatics_plus$Common <-  unname(BatCommon[statics_plus$Species])\n\n# Group by Description and Night and Count the Observations\ngrouped_data <- statics_plus %>% \n  filter(Species %in% AnnexII) %>%\n  group_by(Common, MonthFull, Night) %>% \n  tally() %>% \n  summarise(Minimum = round(min(n, na.rm = T), 2),\n              Q1 = round(quantile(n, c(0.25), na.rm = T), 2),\n              Mean = round(mean(n, na.rm = T), 2),\n              Median = round(median(n, na.rm = T), 2),\n              Q3 = round(quantile(n, c(0.75), na.rm = T), 2),\n              Maximum = round(max(n, na.rm = T), 2),\n              SD = round(sd(n, na.rm = T), 2),\n              Nr = n())\n\n\n\n# riven_cond_stats is made into a the table (using the code below)\ngrouped_data %>% \n  # Create the table with the gt package\n  gt(rowname_col = \"MonthFull\",\n    groupname_col = \"Common\") %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = MonthFull\n    )) %>% \n  gt_color_rows(Maximum, palette = \"ggsci::purple_material\")\n\n\n\n\n\n\nTable 6:  Nightly Species Observations (Passes) by Month \n  \n  \n    \n      \n      Minimum\n      Q1\n      Mean\n      Median\n      Q3\n      Maximum\n      SD\n      Nr\n    \n  \n  \n    \n      Barbastelle\n    \n    May\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n    June\n1\n1.50\n18.00\n18.0\n31.50\n42\n15.67\n11\n    July\n4\n5.75\n8.17\n8.0\n10.25\n13\n3.43\n6\n    August\n1\n3.00\n7.27\n6.0\n8.00\n22\n6.13\n15\n    September\n1\n1.00\n1.80\n1.0\n2.00\n4\n1.30\n5\n    October\n4\n5.00\n6.71\n6.0\n7.00\n13\n2.98\n7\n    \n      Greater horseshoe\n    \n    May\n2\n2.50\n3.00\n3.0\n3.50\n4\n1.00\n3\n    June\n1\n1.50\n3.13\n3.0\n4.00\n7\n1.81\n15\n    July\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n    August\n1\n1.00\n2.07\n2.0\n3.00\n6\n1.39\n15\n    September\n3\n3.25\n10.67\n4.0\n6.25\n43\n15.91\n6\n    October\n1\n1.00\n1.00\n1.0\n1.00\n1\n0.00\n2\n    \n      Lesser horseshoe\n    \n    May\n1\n1.00\n2.50\n1.5\n3.00\n6\n2.38\n4\n    June\n1\n1.00\n1.38\n1.0\n2.00\n2\n0.52\n8\n    July\n1\n1.50\n2.00\n2.0\n2.50\n3\n1.41\n2\n    August\n1\n1.00\n2.30\n1.5\n3.00\n6\n1.70\n10\n    September\n1\n1.50\n2.43\n3.0\n3.00\n4\n1.13\n7\n    October\n1\n1.00\n2.67\n1.0\n3.50\n6\n2.89\n3\n  \n  \n  \n\n\n\n\n\n\n\nShow the code\nlibrary(mosaic)\nlibrary(gt)\nlibrary(gtExtras)\n\n# Annex II Bats (in the static)\nAnnexII <- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\")\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# List of bat common names and the scientific names\nBatCommon <- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\")\n\n# From Scientific name create a Common Name Vector \nstatics_plus$Common <-  unname(BatCommon[statics_plus$Species])\n\n# Group by Description and Night and Count the Observations\ngrouped_data <- statics_plus %>% \n  filter(Species %in% AnnexII) %>%\n  group_by(Common, MonthFull, Night) %>% \n  tally() %>% \n  summarise(Minimum = round(min(n, na.rm = T), 2),\n              Q1 = round(quantile(n, c(0.25), na.rm = T), 2),\n              Mean = round(mean(n, na.rm = T), 2),\n              Median = round(median(n, na.rm = T), 2),\n              Q3 = round(quantile(n, c(0.75), na.rm = T), 2),\n              Maximum = round(max(n, na.rm = T), 2),\n              SD = round(sd(n, na.rm = T), 2),\n              Nr = n())\n\n\n\n# riven_cond_stats is made into a the table (using the code below)\ngrouped_data %>% \n  # Create the table with the gt package\n  gt(rowname_col = \"Common\",\n    groupname_col = \"MonthFull\") %>% \n  # Style the header to black fill and white text\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  gt_color_rows(Mean, palette = \"ggsci::green_material\")\n\n\n\n\n\n\nTable 7:  Nightly Species Observations by Month (Alternative Grouping) \n  \n  \n    \n      \n      Minimum\n      Q1\n      Mean\n      Median\n      Q3\n      Maximum\n      SD\n      Nr\n    \n  \n  \n    \n      May\n    \n    Barbastelle\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n    Greater horseshoe\n2\n2.50\n3.00\n3.0\n3.50\n4\n1.00\n3\n    Lesser horseshoe\n1\n1.00\n2.50\n1.5\n3.00\n6\n2.38\n4\n    \n      June\n    \n    Barbastelle\n1\n1.50\n18.00\n18.0\n31.50\n42\n15.67\n11\n    Greater horseshoe\n1\n1.50\n3.13\n3.0\n4.00\n7\n1.81\n15\n    Lesser horseshoe\n1\n1.00\n1.38\n1.0\n2.00\n2\n0.52\n8\n    \n      July\n    \n    Barbastelle\n4\n5.75\n8.17\n8.0\n10.25\n13\n3.43\n6\n    Greater horseshoe\n1\n1.00\n1.75\n1.5\n2.25\n3\n0.96\n4\n    Lesser horseshoe\n1\n1.50\n2.00\n2.0\n2.50\n3\n1.41\n2\n    \n      August\n    \n    Barbastelle\n1\n3.00\n7.27\n6.0\n8.00\n22\n6.13\n15\n    Greater horseshoe\n1\n1.00\n2.07\n2.0\n3.00\n6\n1.39\n15\n    Lesser horseshoe\n1\n1.00\n2.30\n1.5\n3.00\n6\n1.70\n10\n    \n      September\n    \n    Barbastelle\n1\n1.00\n1.80\n1.0\n2.00\n4\n1.30\n5\n    Greater horseshoe\n3\n3.25\n10.67\n4.0\n6.25\n43\n15.91\n6\n    Lesser horseshoe\n1\n1.50\n2.43\n3.0\n3.00\n4\n1.13\n7\n    \n      October\n    \n    Barbastelle\n4\n5.00\n6.71\n6.0\n7.00\n13\n2.98\n7\n    Greater horseshoe\n1\n1.00\n1.00\n1.0\n1.00\n1\n0.00\n2\n    Lesser horseshoe\n1\n1.00\n2.67\n1.0\n3.50\n6\n2.89\n3"
  },
  {
    "objectID": "dynamic.html",
    "href": "dynamic.html",
    "title": "Interactive Reports",
    "section": "",
    "text": "Show the code\n# Pallet of colours for bat species on Leaflet map\npal <- colorFactor(ColourVector$LeafColours, domain = ColourVector$Species)\n\nLydford %>%\n    mutate(Popup_text = stringr::str_c(Common, # Make popup text string\n                                       \" \",\n                                       as.character(round(post_set_min, 0)), \n                                       \" minutes after sunset\")) %>% \n    leaflet() %>% \n    addTiles() %>% \n    addCircleMarkers(\n      lng = ~Longitude, lat = ~Latitude,\n      radius = 7,\n      color = ~pal(Species),\n      stroke = TRUE, fillOpacity = 0.7,\n      popup = ~Popup_text, label = ~Popup_text\n    )\n\n\n\n\n\nFigure 1: Bat Observations From Lydford School’s Bat Walk\n\n\n\nFigure 1 shows Lydford Primary School’s bat walk observations from Wednesday evening 18th September 2019. The walk, between the School and the River Lyd, on the western edge of Dartmoor, started at sunset 6:27pm and continued for just over an hour. The observations were made with a Batlogger M bat detector that records the sound of the bat as it passes together with the time and postion; using a built-in Global Positioning System (GPS). These sounds where then analysed with software designed to help determine which species made the echolocation; BatExplorer was the software used.\nFigure 1 is an interactive map; hovering the mouse over the coloured point will show the species and the time, in minutes, after sunset the bat was observed.\nThe data shown in Figure 1, Lydford is available from the iBats package."
  },
  {
    "objectID": "dynamic.html#graphs",
    "href": "dynamic.html#graphs",
    "title": "Interactive Reports",
    "section": "2 Graphs",
    "text": "2 Graphs\n\n2.1 Making ggplot Interactive\nPlotly1 allows easy translation of ggplot2 graphics into an interactive web-based version. Hovering the mouse over a graph point will reveal the bat species, the time bat was recorded and the length in seconds of the activity. The graph can be copied to the clipboard plus zoomed and panned; the home symbol will reset the axes.\n\n\nShow the code\n# graph anotation\ngraph_sunrise <- TavyOak$sunrise[1]\ngraph_sunset <- TavyOak$sunset[1]\n\n# graph time limits x-axis\ngraph_limit1 <- TavyOak$sunset[1] - lubridate::hours(1)\ngraph_limit2 <- TavyOak$sunrise[1] + lubridate::hours(1)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- bat_colours(TavyOak$Species, colour_vector = bat_colours_sci)\n\n\np <- TavyOak %>% \n  rename(`Date & Time` = DateTime,\n         `Bat species` = Species,\n         `Activity time (secs)` = bat_time) %>% \n  ggplot(aes(x = `Date & Time`, \n                      y = 1, \n                      fill = `Bat species`, \n                      size = `Activity time (secs)`)) +\n  geom_jitter(shape = 21, alpha = 0.7) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  scale_x_datetime(\n    date_labels = \"%H:%M hrs\",\n    date_breaks = \"1 hour\",\n    limits = c(graph_limit1, graph_limit2)\n  ) +\n  labs(\n    title = \"One Night's Bat Activity \\nAt a West Devon Oak Tree - June 2018\",\n    y = \"For clarity activity is spread across the verstical scale\"\n  ) +\n  theme_bw() +\n  theme(\n    plot.margin = margin(1, 1, 1, 1, \"cm\"),\n    legend.position = \"none\",\n    panel.grid.major.x = element_line(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    plot.background = element_rect(fill = \"midnightblue\", colour = \"black\"),\n    axis.text.x = element_text(size = 12, angle = 45, colour = \"white\"),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 12, colour = \"white\"),\n    plot.title = element_text(size=16, colour = \"white\")\n  )\n\n# Make `ggplot` interactive\nggplotly(p) \n\n\n\n\n\nFigure 2: Time Bats Were Active Through The Night\n\n\n\n\n\n2.2 Bar Chart\nFigure 3 shows a bar chart of monthly activity, it was drawn with the plotly library2. Hovering the mouse over a bar will reveal the bat species and the number of bat passes; toggling the species name in the legend will remove (or add) the species bar from the chart, and; at any view the graph can be copied to the clipboard.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n# Annex II Species of Bat in the UK\nAnnexII <- c(\"Barbastella barbastellus\", \n             \"Rhinolophus ferrumequinum\", \n             \"Rhinolophus hipposideros\", \n             \"Myotis bechsteinii\")\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics) %>% \n   filter(Species %in% AnnexII)\n\nstatics_plus %>% \n  count(MonthFull, Species) %>% \n  plot_ly(x = ~MonthFull, y = ~n, color = ~Species,\n          hoverinfo = \"text\",\n          text = ~paste(\"Species:\", Species, \"<br>\",\n                        \"Count:\", n)) %>%\n  add_bars(colors = c(\"#1f78b4\", \"#e31a1c\", \"#33a02c\")) %>%\n  layout(barmode = \"stack\",\n         xaxis = list(title=\"\"),\n         yaxis = list(title=\"Count of Bat Passes (Nr)\"))\n\n\n\n\n\nFigure 3: Monthly Activity of Annex II Species\n\n\n\nFigure 4 shows a bar chart of species activity relative to the static location, it was drawn with the plotly library3. Hovering the mouse over a bar will reveal the bat species and the number of bat passes; toggling the species name in the legend will remove (or add) the species bar from the chart, and; at any view the graph can be copied to the clipboard.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n# bat species colours\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\nlocation_count <- statics %>% \n  count(Description, Species) \n\nlist_species <- levels(factor(location_count$Species))\n\n# get a vector of colours from the bat_pass_counts data.frame\ncolors <- unname(bat_colours_sci[list_species])\n\n\n  plot_ly(location_count, y = ~Description, x = ~n, color = ~Species,\n          orientation = 'h') %>%\n  add_bars(colors = colors) %>%\n  layout(barmode = \"stack\",\n         yaxis = list(title=\"\"),\n         xaxis = list(title=\"Count of Bat Passes (Nr)\"))\n\n\n\n\n\nFigure 4: Species Activity for Each Static Location\n\n\n\n\n\n2.3 Pie Chart\nFigure 5 shows a pie chart of bat activity, it was drawn with the plotly library4. Hovering the mouse over a bar will reveal the bat species and the number of bat passes; toggling the species name in the legend will remove (or add) the species slice from the chart, and; at any view the graph can be copied to the clipboard.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(plotly)\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# bat species colours\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n# count the number of pass per species\nbat_pass_counts <- statics_plus %>%\n  count(Species)\n\n# get a vector of colours from the bat_pass_counts data.frame\ncolors <- unname(bat_colours_sci[bat_pass_counts$Species])\n\n# plot a pie chart with plotly\nplot_ly(bat_pass_counts,\n  labels = ~Species, values = ~n,\n  type = \"pie\",\n  marker = list(colors = colors)\n) %>%\n  layout(\n    title = \"Bat Species Passes\",\n    xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n    yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)\n  )\n\n\n\n\n\nFigure 5: Interactive Pie Chart of Species Passes"
  },
  {
    "objectID": "dynamic.html#tables",
    "href": "dynamic.html#tables",
    "title": "Interactive Reports",
    "section": "3 Tables",
    "text": "3 Tables\n\n3.1 datatable\nThe package datatable is used to create the interactive table below with the Lydford data from the iBats package.\n\npost_set_min- time in minutes the bat was observed after sun set\nbat_time - time in seconds the bat was observed\n\n\n\nShow the code\nLydford %>% \n  select(DateTime, Species, post_set_min, bat_time) %>% \n  mutate(post_set_min = round(post_set_min, 2)) %>% \n  # show the data with datatable function from the DT packag\n  DT::datatable(options = list(pageLength = 10), \n                caption = 'Principal Lydford Transect Data')\n\n\n\n\n\n\n\n\n\n3.2 reactable\nThe package reactable is used to create the interactive table below with the statics data from the iBats package.\n\npost_set_min- time in minutes the bat was observed after sun set\n\n\n\nShow the code\n# https://glin.github.io/reactable/\n\nlibrary(tidyverse)\nlibrary(reactable)\nlibrary(iBats)\nlibrary(hms)\n\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus) %>%\n  select(Night, Location = Description, Month = MonthFull, Species, post_set_min) %>%\n  mutate(post_set_min = as.integer(post_set_min))\n\n\nreactable(statics_plus,\n  defaultPageSize = 12,\n  filterable = TRUE,\n  searchable = TRUE,\n  bordered = TRUE,\n  highlight = TRUE,\n  defaultColDef = colDef(\n    header = function(value) gsub(\".\", \" \", value, fixed = TRUE),\n    cell = function(value) format(value, nsmall = 1),\n    align = \"center\",\n    format = colFormat(digits = 1),\n    minWidth = 60,\n    headerStyle = list(color = \"#000000\", background = \"#CCCCCC\")\n  ),\n  columns = list(\n    Location = colDef(sticky = \"left\", minWidth = 60, sortable = TRUE),\n    Night = colDef(minWidth = 60, sortable = TRUE, format = colFormat(date = TRUE, locales = \"en-GB\")),\n    Species = colDef(minWidth = 100, sortable = TRUE),\n    Month = colDef(minWidth = 60, sortable = TRUE),\n    post_set_min = colDef(sortable = TRUE)\n  )\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "These web pages compliment the data science chapters of the forthcoming BCT Bat Survey Guidelines 4th Edition, and hopefully encourage ecologists to make the most of their bat survey data. They also demonstrate literate programming with Quarto®1 and R Markdown2 which can vastly improve workflow (welcome to the world beyond Excel).\nLiterate programming (Knuth 1984) enables efficient reporting of bat data3 from a simple table, such as a count of bats, to the output and interpretation of machine learning; plus everything in-between, see Figure 1. The code used in these pages is R4, literate programming also facilitates other coding languages such as Python5, and Julia6. Coding languages can be mixed in the same literate programming document; with a chuck of R code doing the data manipulation and another chunk of Python code performing the machine learning. Coding languages applied to data science are developing rapidly in terms of their ability, speed of execution, and user friendliness7; literate programming provides the framework for ecologists to keep their data science skills moving forward.\nTo help ecologists get started, all the code making the graphs and analysis is freely available to copy and use; just click on Show the code, copy to the clipboard 8, paste into the R environment and run (to get going in R see Section 1).\nA Show the code is given below, the code produces Figure 2. The code copied to the clipboard is designed to run as a standalone chunk; with all the R libraries, data and code."
  },
  {
    "objectID": "index.html#sec-installr",
    "href": "index.html#sec-installr",
    "title": "Getting Started",
    "section": "1 Install R, RStudio and Packages",
    "text": "1 Install R, RStudio and Packages\n\nDownload and install the latest version of R https://cran.r-project.org/bin/windows/base/. Download the version for your operating system; R can be downloaded for Windows, Mac & Linux.\n\nIt is recommended R is used through the RStudio IDE. Download and install the latest version of RStudio from their web page https://www.rstudio.com/products/rstudio/#Desktop. Download the free desktop version.\n\n\n1.1 Install the iBats Package from GitHub\nThe iBats package contains example data and functions that help with the Data Science of bat survey results. To install this package use the code below in the console (see Figure ); one line at a time. The package is installed from GitHub.\n\n\n\n\n\nShow the code\ninstall.packages(\"devtools\")\n\ndevtools::install_github(\"Nattereri/iBats\")"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Getting Started",
    "section": "2 Acknowledgements",
    "text": "2 Acknowledgements\nThese web pages were built on the shoulders of others:\nThe visualisation and analysis has been undertaken in R (R Core Team 2022) using R version 4.2.2 (2022-10-31 ucrt); R is an open-source statistical programming language.\nThis document has been produced dynamically using knitr (Xie 2022) and QUARTO, integrating the data, analysis and reporting. The analysis has undertaken a tidyverse approach (Wickham et al. 2019).\nThe graphics have been produced using the R package ggplot2 (Wickham, Chang, et al. 2022). The scales (Wickham and Seidel 2022) package improves the clarity of scales on ggplot graphics.\nThe wrangling of data was undertaken with dplyr (Wickham, François, et al. 2022) and tidyr packages. The data in csv and Excel files has been imported with readr (Wickham, Hester, and Bryan 2022) and readxl (Wickham and Bryan 2022) packages respectivily. The computation with dates and times has been accomplished with lubridate (Spinu, Grolemund, and Wickham 2021) package. Suntimes have been obtained with the suncalc (Thieurmel and Elmarhraoui 2019) package.\nThe manipulation of text was through the stringr (Wickham 2022) package. Summary statistics have been produced with the mosaic (Pruim, Kaplan, and Horton 2021) package.\nTables have been produced with knitr (Xie 2022) with kableExtra (Zhu 2021), gt (Xie 2022) and the flextable (Gohel 2022) packages. The broman (Broman 2022) package provided some useful R functions."
  },
  {
    "objectID": "meta.html",
    "href": "meta.html",
    "title": "Meta Data",
    "section": "",
    "text": "Many columns would be added to a tidy data set so it becomes more useful for analysis; some of these are described below."
  },
  {
    "objectID": "meta.html#date-and-time-information",
    "href": "meta.html#date-and-time-information",
    "title": "Meta Data",
    "section": "1 Date and Time Information",
    "text": "1 Date and Time Information\n\n1.1 The Night\nBats are active through the night; the date of the night is the date at sunset and lasts until sunrise the morning of the following day. The Night is a variable column that is added to the tidy data; it is useful convention that helps avoid the confusion of having contiguous bat activity over two dates.\nThe Night can be obtained from the iBats package using the date_time_info function. It requires a data.frame or tibble with a DateTime column, the iana1 time zone can be specified; the default is Europe/London.\nThe code below takes the statics set from the iBats package and adds the Night column, Table 1 shows a selection of 5 rows from the statics data.\n\n\nShow the code\nstatics_with_night <- iBats::date_time_info(statics)\n\n\n\n\nShow the code\nstatics_with_night %>% \n  sample_n(5) %>% \n  select(Description, Night, DateTime, Species) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = Night\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = Night\n    )\n  )\n\n\n\n\n\n\nTable 1:  The Night from the DateTime Column \n  \n  \n    \n      Description\n      Night\n      DateTime\n      Species\n    \n  \n  \n    Static 4\n2016-08-24\n2016-08-25 01:58:59\nPipistrellus pipistrellus\n    Static 4\n2016-08-04\n2016-08-04 23:11:37\nPipistrellus pipistrellus\n    Static 4\n2016-06-12\n2016-06-13 01:50:48\nPipistrellus pipistrellus\n    Static 4\n2016-07-30\n2016-07-31 01:08:12\nPipistrellus pipistrellus\n    Static 2\n2016-10-10\n2016-10-10 19:39:35\nPlecotus spp.\n  \n  \n  \n\n\n\n\n\n\n\n1.2 Other Date and Time Information\nThe function iBats::date_time_info() adds other date and time information: month, year and time see Table 2 (note: not all columns are shown). Table 2 shows a random selection of 5 rows from the statics set.\n\n\nShow the code\nstatics_with_night %>% \n  sample_n(5) %>% \n  select(Description, DateTime, Species, Month, MonthFull, Year, JustTime) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  )\n\n\n\n\n\n\nTable 2:  Other Date and Time Information from the DateTime Column \n  \n  \n    \n      Description\n      DateTime\n      Species\n      Month\n      MonthFull\n      Year\n      JustTime\n    \n  \n  \n    Static 2\n2016-08-15 01:44:55\nPipistrellus pygmaeus\nAug\nAugust\n2016\n13:44:55\n    Static 3\n2016-08-13 22:10:52\nPipistrellus pipistrellus\nAug\nAugust\n2016\n10:10:52\n    Static 2\n2016-06-26 00:19:49\nRhinolophus ferrumequinum\nJun\nJune\n2016\n12:19:49\n    Static 2\n2016-06-05 04:11:35\nPipistrellus pipistrellus\nJun\nJune\n2016\n16:11:35\n    Static 4\n2016-07-31 21:16:24\nPipistrellus pipistrellus\nJul\nJuly\n2016\n09:16:24"
  },
  {
    "objectID": "meta.html#sun-times",
    "href": "meta.html#sun-times",
    "title": "Meta Data",
    "section": "2 Sun Times",
    "text": "2 Sun Times\nA useful approach for bat data analysis is to reference all bat activity (i.e. DateTime) to the time of sunset and sunrise for the Night and location(i.e. Latitude and Longitude). From this starting point, the minutes after sunset (and minutes before sunrise) that each bat activity occurred can be calculated; these can then be converted to decimal hours and integer hours so bat activity can be visualised in ways that help interpret the bat activity.\nReferencing the DateTime of bat activity to sunset and sunrise is achieved with the use of the suncalc package (Thieurmel and Elmarhraoui 2019). The iBats package makes use of suncalc in its sun_night_metrics fuction; this takes a dataframe that must include the columns: Night, DateTime, Latitude and, Longitude - and calculates the following columns:\n\nsunset - sun set time for the Night date and Latitude and, Longitude\nsunrise - sun rise time for the Night date and Latitude and, Longitude\npost_set_min- time in minutes the bat was observed after sun set\npre_rise_min - time in minutes the bat was observed before sun rise\npost_set_hr - time in hours (decimal) the bat was observed after sun set\npre_rise_hr - time in hours (decimal) the bat was observed before sun rise\npost_set_hr_int - time in hours (integer) the bat was observed after sun set\npre_rise_hr_int - time in hours (integer) the bat was observed before sun rise\n\nnight_length_hr - night length in hours (decimal) difference between sunset and sunrise\n\nTable 3 shows a selection of 5 rows from the statics data that includes the columns Species and DateTime and then calculates the columns listed above, the following columns are shown: sunset, post_set_min, post_set_hr and, post_set_hr_int.\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\nstatics_plus %>% \n  sample_n(5) %>% \n  select(Species, DateTime, sunset, post_set_min, post_set_hr, post_set_hr_int) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"pink\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(sunset, post_set_min, post_set_hr, post_set_hr_int)\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"pink\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(sunset, post_set_min, post_set_hr, post_set_hr_int)\n    )\n  )\n\n\n\n\n\n\nTable 3:  Sun Time Information from the Night and DateTime Columns \n  \n  \n    \n      Species\n      DateTime\n      sunset\n      post_set_min\n      post_set_hr\n      post_set_hr_int\n    \n  \n  \n    Pipistrellus pipistrellus\n2016-07-30 03:04:26\n2016-07-29 21:04:06\n360.33333\n6.0055556\n6\n    Pipistrellus pipistrellus\n2016-08-04 22:47:09\n2016-08-04 20:54:49\n112.33333\n1.8722222\n2\n    Pipistrellus pipistrellus\n2016-06-07 22:45:34\n2016-06-07 21:23:08\n82.43333\n1.3738889\n1\n    Pipistrellus pipistrellus\n2016-07-30 05:15:40\n2016-07-29 21:04:06\n491.56667\n8.1927778\n8\n    Myotis spp.\n2016-06-07 22:00:01\n2016-06-07 21:23:08\n36.88333\n0.6147222\n1"
  },
  {
    "objectID": "meta.html#common-bat-names",
    "href": "meta.html#common-bat-names",
    "title": "Meta Data",
    "section": "3 Common Bat Names",
    "text": "3 Common Bat Names\nCommon bat names are readily understood by the lay reader and should be available for graphs and tables; it is easily added as an additional column using the Scientific names column as a starting point.\nBy convention scientific names are written as italic; to highlight the common names in Table 4 the column is written in bold.\n\n\nShow the code\nlibrary(iBats)\n\n# List of bat common names and the scientific names\nBatCommon <- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Myotis alcathoe\" = \"Alcathoe\",\n  \"Myotis bechsteinii\" = \"Bechstein's\",\n  \"Myotis brandtii\" = \"Brandt's\",\n  \"Myotis daubentonii\" = \"Daubenton's\",\n  \"Myotis mystacinus\" = \"Whiskered\",\n  \"Myotis spp.\" = \"Myotis\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\",\n  \"Nyctalus leisleri\" = \"Leisler's\",\n  \"Plecotus auritus\" = \"Brown long-eared\",\n  \"Plecotus austriacus\" = \"Grey long-eared\",\n  \"Pipistrellus nathusii\" = \"Nathusius pipistrelle\",\n  \"Myotis nattereri\" = \"Natterer's\",\n  \"Nyctalus noctula\" = \"Noctule\",\n  \"Nyctalus spp.\" = \"Noctule or Leisler's\",\n  \"Eptesicus serotinus\" = \"Serotine\",\n  \"Pipistrellus pipistrellus\" = \"Common pipistrelle\",\n  \"Pipistrellus pygmaeus\" = \"Soprano pipistrelle\",\n  \"Pipistrellus spp.\" = \"Pipistrelle\",\n  \"Plecotus spp.\" = \"Long-eared\")\n\n# From Scientific name create a Common Name Vector \nstatics$Common <-  unname(BatCommon[statics$Species])\n\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(gt)\n\nstatics %>% \n  sample_n(10) %>% \n  select(Description, DateTime, Species, Common) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %>% \n     # Make bat common name bold\n  tab_style(\n    style = list(\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = Common\n    )\n  )\n\n\n\n\n\n\nTable 4:  From the Scientific Name Create a Common Name Vector \n  \n  \n    \n      Description\n      DateTime\n      Species\n      Common\n    \n  \n  \n    Static 4\n2016-06-13 02:14:51\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 1\n2016-06-06 00:20:18\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 4\n2016-07-30 22:25:21\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 4\n2016-07-29 00:07:42\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 4\n2016-07-27 03:54:21\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 2\n2016-09-19 21:01:39\nPipistrellus spp.\nPipistrelle\n    Static 4\n2016-07-31 22:39:33\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 4\n2016-07-29 01:26:49\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 1\n2016-06-21 01:06:47\nPipistrellus pipistrellus\nCommon pipistrelle\n    Static 4\n2016-10-16 19:13:08\nPipistrellus pipistrellus\nCommon pipistrelle"
  },
  {
    "objectID": "meta.html#national-grid-coordinates",
    "href": "meta.html#national-grid-coordinates",
    "title": "Meta Data",
    "section": "4 National Grid Coordinates",
    "text": "4 National Grid Coordinates\nAdding a A Country’s grid reference coordinates as meta data is useful; it allows a friendly export to other GIS and engineering drawing software (e.g. QGIS, ArcView® and AutoCAD®). A Country’s grid reference coordinates can be transformed from the Longitude and Latitude; in the tidy statics data longitude and latitude are based on the World Geodetic System 19842 (WGS84), the green column in Table 5 shows the British National Grid coordinates obtained from the longitude and latitude.\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(sf) # Simple features access between data and GIS\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# Select Longitude & Latitude from the statics data in the iBats package\nlon_lat <- statics %>% \n  select(lon = Longitude, lat = Latitude)\n\nlon_lat = st_as_sf(lon_lat, coords = c(\"lon\", \"lat\"))\n\n# Set the original coordinate reference system (CRS)\n# The EPSG code is used to define the CRS\ndata_WSG84 = st_set_crs(lon_lat, 4326)\n\n# Transform the existing coordinates to the new projection\n# British National Grid is the new projection which as an EPSG:27700\ndata_BNG = st_transform(data_WSG84, 27700)\n\n# Create simple feature geometry list column\ndata_BNG_geom <- st_geometry(data_BNG)\nnc2 = st_sf(geom=data_BNG_geom)\n\n# retrieve coordinates in matrix form\ndata_BNG_matrix <- st_coordinates(nc2) \n\n#Assign Eastings and Northings to seperate columns\nEasting <- data_BNG_matrix[,1]\nNorthing <- data_BNG_matrix[,2]\n\n# Make a data.frame\ndata_BNG_df <- tibble(Easting, Northing)\n\n# Make a British National Grid Reference column (\"GridRef) \n# keep the Easting & Northings columns\ndata_BNG_df <- data_BNG_df %>% \n  unite(\"GridRef\", c(\"Easting\", \"Northing\"), sep = \",\", remove = FALSE) \n\n# Add columns to the statics data set\nstatics_plus <- cbind(statics, data_BNG_df)\n\n\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(gt)\n\nstatics_plus %>% \n  sample_n(10) %>% \n  select(Species, Longitude, Latitude, GridRef) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"forestgreen\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(GridRef)\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"forestgreen\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_column_labels(\n      columns = c(GridRef)\n    )\n  )\n\n\n\n\n\n\nTable 5:  From the Longitude and Latitude Create a Vector of the British National Grid Coordinates \n  \n  \n    \n      Species\n      Longitude\n      Latitude\n      GridRef\n    \n  \n  \n    Pipistrellus pipistrellus\n-3.591048\n50.33094\n286854.431403263,49101.2549532561\n    Myotis spp.\n-3.591808\n50.33126\n286801.102694949,49137.9914956368\n    Pipistrellus pipistrellus\n-3.591798\n50.33132\n286801.957123455,49144.6474465514\n    Pipistrellus pipistrellus\n-3.591878\n50.33141\n286796.477591845,49154.7760258182\n    Pipistrellus pipistrellus\n-3.595008\n50.33221\n286575.621663931,49248.4957881758\n    Pipistrellus pipistrellus\n-3.591768\n50.33133\n286804.11602111,49145.7136310115\n    Pipistrellus pipistrellus\n-3.591758\n50.33132\n286804.803937794,49144.5865421783\n    Pipistrellus pipistrellus\n-3.592228\n50.33091\n286770.378328093,49099.7158903753\n    Plecotus spp.\n-3.592583\n50.33323\n286750.61980236,49357.5417145688\n    Pipistrellus pipistrellus\n-3.593018\n50.33101\n286714.381797414,49111.5932755259"
  },
  {
    "objectID": "meta.html#bat-activity-time",
    "href": "meta.html#bat-activity-time",
    "title": "Meta Data",
    "section": "5 Bat Activity Time",
    "text": "5 Bat Activity Time\nBat identification software that use full spectrum recording, generate other characteristics from a bat call, or sequence of calls; these characteristics can be used to calculate indices of activity. Elekon’s BatExplorer3 and Wildlife Acoustics’ Kaleidoscope4 produce the number of calls or pulses in an recording together with the:\n\naverage duration of the call or sequence of calls\n\naverage span of time between calls\n\nThe calls, duration and span characteristics, see Figure 1, supply an opportunity to calculate the time a bat is present (i.e near the detector); this bat activity time provides the length of time a bat is nearby during the observation, and is a helpful measurement when assessing bat activity.\nThe Bat Activity Time , in seconds, can be calculated with Equation 1:\n\\[BatActivityTime\\ =\\ \\dfrac{calls\\left(duration\\ + span\\right)}{1000} \\tag{1}\\]\nWhere:\ncalls - number of calls\nduration - average call length (ms)\nspan - average time between calls (ms)\nThe division by 1000 is to convert milliseconds(ms) to seconds\n\n\n\nFigure 1: Calculating Bat Activity Time\n\n\nTable 6 shows the calculated BatActivityTime from a .csv file(BatExplorer) exported from Elekon AG BatExplorer software. The BatExplorer csv file is in the iBats package and describes a transect recorded with a Batlogger M bat detector near the the River Tavy, West Devon.\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# BatExplorer csv file is from the iBats package\nBatExplorer %>% \n  mutate(calls = `Calls [#]`,\n         duration = `Mean Call Lenght [ms]`,\n         span = `Mean Call Distance [ms]`,\n         # Calculate BatActivityTime in seconds\n         BatActivityTime = calls * (duration + span) / 1000) \n\n\n\n\nShow the code\nlibrary(gt)\n\nBatExplorer %>% \n  mutate(calls = `Calls [#]`,\n         duration = `Mean Call Lenght [ms]`,\n         span = `Mean Call Distance [ms]`,\n         # Calculate BatActivityTime in seconds\n         BatActivityTime = calls * (duration + span) / 1000) %>% \n  #Select just the columns used in the calculation and a few rows of data\n  select(Species = `Species Text`, \n         calls, \n         duration, \n         span, \n         `BatActivityTime (seconds)` = BatActivityTime) %>% \n  head(n=10L) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"wheat\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_body(\n      columns = c(`BatActivityTime (seconds)`)\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"wheat\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(`BatActivityTime (seconds)`)\n    )\n  )\n\n\n\n\n\n\nTable 6:  BatActivityTime from a .csv exported from BatExplorer \n  \n  \n    \n      Species\n      calls\n      duration\n      span\n      BatActivityTime (seconds)\n    \n  \n  \n    Pipistrellus pygmaeus\n12\n7.0\n90\n1.1640\n    Nyctalus noctula\n18\n23.8\n340\n6.5484\n    Nyctalus noctula\n34\n16.0\n150\n5.6440\n    Nyctalus noctula\n10\n14.0\n480\n4.9400\n    Pipistrellus pygmaeus\n30\n7.0\n90\n2.9100\n    Pipistrellus pygmaeus\n31\n5.0\n80\n2.6350\n    Pipistrellus pygmaeus\n30\n5.0\n80\n2.5500\n    Pipistrellus pygmaeus\n39\n5.0\n90\n3.7050\n    Pipistrellus pygmaeus\n48\n5.0\n90\n4.5600\n    Nyctalus noctula\n1\n8.5\n0\n0.0085"
  },
  {
    "objectID": "reporting.html",
    "href": "reporting.html",
    "title": "One Click Reporting",
    "section": "",
    "text": "A full bat survey report produced, with one mouse click, from sound analysis data (i.e. after identifying the bat detector calls to species or genus with sound analysis) see Figure 1. One click reporting is achieved through literate programming (Knuth 1984); a procedure of mixing code and descriptive writing, in order to undertake and explain data analysis simultaneously in the same document. This is an efficient practice of workflow!"
  },
  {
    "objectID": "reporting.html#why-do-this",
    "href": "reporting.html#why-do-this",
    "title": "One Click Reporting",
    "section": "1 Why Do This?",
    "text": "1 Why Do This?\nThe advantages of this approach to bat data science are appreciable:\n\nWorkflow\n\nReduces (and can eliminate) any copy and paste activity\nReports are easily created (one click) with new data or updated with revised data\nThe time and effort producing reports can be reduced; by several orders of magnitude!\n\nReproducible\n\nThe report is reproducible by yourself (and others1); convenient when returning to a project after many months or years!\n\n\nOpen Source\n\nThe Quarto or R Markdown file, the literate program document, is simple text that can be edited with any text editor; although it’s recommended to use friendly integrated development environments like RStudio2.\n\nThe software3 which reads the literate program document and makes the report in: Word, PDF, PowerPoint or Dashboard are open source and free to use.\n\n\nWhat’s the disadvantage?\n\nCoding\n\nThe literate program document requires coding skills to write (these web pages are designed to help with the coding).\nCoding skills in ecology are generally underdeveloped (although university education of ecology is increasingly taking a coding approach to data science); it should be noted little or no coding skills are required to render the report."
  },
  {
    "objectID": "reporting.html#bat-report-from-tidy-data",
    "href": "reporting.html#bat-report-from-tidy-data",
    "title": "One Click Reporting",
    "section": "2 Bat Report from Tidy Data",
    "text": "2 Bat Report from Tidy Data\nThe complete R Markdown text (the .Rmd file) that produces a simple bat report from the statics tidy data4 is shown below; it can be copied to the clip board and rendered (knitted) into the Word report illustrated in Figure 2.\n---\ntitle: \"Simple Bat Report\"\noutput: \n  officedown::rdocx_document: default\ndate: \"08 December, 2022\"\nauthor: \"An Ecologist\"\n---\n\n```{r include=FALSE}\nlibrary(knitr)\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(ggrepel)\nlibrary(broman)\nlibrary(flextable)\nlibrary(officer)\nlibrary(officedown)\nlibrary(treemapify)\nlibrary(ggthemes) \n\nknitr::opts_chunk$set(echo = FALSE, warnings = FALSE, message = FALSE)\nknitr::opts_chunk$set(fig.cap = TRUE)\n\n# A vector used to give the species a specific colour in the graphic; the colours\n# can be changed and other species added.\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n```\n\n__CONTENTS__\n<!---BLOCK_TOC--->\n__List of Figures__\n<!---BLOCK_TOC{seq_id: 'fig'}--->\n__List of Tables__\n<!---BLOCK_TOC{seq_id: 'tab'}--->\n\n```{r include=FALSE}\n##### Load your TIDY bat data here:\n# TidyBatData <- read_csv(\"YourTidyData.csv\", col_names = TRUE)\n\n# Tidy bat data - example data from the iBats package\nTidyBatData <- statics\n```\n\n\\newpage\n# TABLES\n\nThe simplest form of aggregation is a count of bats[^1]; as shown in Table \\@ref(tab:table01)\n[^1]: note:- in this case it is a count of bat passes\n\n```{r tab.id=\"table01\", tab.cap=\"Species and Number of Bat Passes\"}\nTidyBatData %>%\n  group_by(Species) %>% \n  count() %>% \n  #arrange descending\n  arrange(desc(n)) %>% \n  # rename n as count\n  rename(`Bat Species` = Species, Count = n) %>% \n  # so table is produced with individual species on one row\n  ungroup() %>% \n  flextable() %>%\n  width(j = 1, width = 2.5) %>%\n  italic(j = 1, italic = TRUE, part = \"body\") %>%\n  bg(bg = \"black\", part = \"header\") %>%\n  color(color = \"white\", part = \"header\")\n```\n\n\\newpage\n# FIGURES  \n\nFigure \\@ref(fig:graph01) shows the count of all the species observations as a dot chart and Figure \\@ref(fig:graph02) shows a treemap of monthly bat pass activity.\n\n```{r graph01, fig.cap=\"Count of All Species Observations\", fig.height=7, fig.width=6}\n\ng_data <- TidyBatData %>% \ngroup_by(Species) %>% \ncount() %>% \nmutate(total = add_commas(n),\n       label = stringr::str_c(Species, \": \", total))\n  \ngraph_bat_colours <- iBats::bat_colours(g_data$Species, colour_vector = bat_colours_sci)\n\np <- ggplot(g_data, aes(y = reorder(Species, n), x = n, fill = Species)) +\n  geom_point(colour = \"black\", size = 5) +\n  geom_label_repel(data = g_data, aes(label = label),\n                   nudge_y = -0.25,\n                   nudge_x = ifelse(g_data$n < 100, 0.33, -0.33),\n                   alpha = 0.7) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_x_log10(sec.axis = dup_axis()) +\n  annotation_logticks(sides = \"tb\") +\n  labs(x = \"Bat Observations (Number of Passes)\",\n       caption = \"Note: Log scale used\") +\n  theme_bw() + \n  theme(legend.position = \"none\", \n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.text.x = element_text(size=12, face=\"bold\"), \n        axis.text.y = element_blank(), \n        axis.ticks.y = element_blank(),\n        strip.text = element_text(size=12, face=\"bold\", colour = \"white\"), \n        axis.title.x = element_text(size=12, face=\"bold\"), \n        axis.title.y = element_blank())\n\np\n```\n\n\\newpage\n```{r graph02, fig.cap=\"Monthly Bat Activity\", fig.height=7, fig.width=6}\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\ngraph_data <- statics_plus %>%\n  group_by(Species, Month) %>%\n  tally()\n\nggplot(graph_data, aes(area = n, fill = Month, label = Species, subgroup = Month)) +\n  scale_fill_tableau(palette = \"Tableau 10\") + #\n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(place = \"centre\", grow = T, alpha = 0.9, colour = \"grey20\", min.size = 0) +\n  geom_treemap_text(colour = \"grey90\", place = \"topleft\", fontface = \"italic\", reflow = T, min.size = 0, alpha = 0.9) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n```\nThe three page Word report shown in Figure 2 is a rudimentary example; it could be expanded to include any of the tables and graphs shown on these web pages. The .Rmd file is rendered into a Microsoft Word document; this is a convenient file format easily allowing further editing by others in the survey team. The simple report in Figure 2 has a tables of contents and cross referencing it can also be rendered directly into the house/company style by specifying a reference_docx file5.\n\nFigure 2: Bat Survey Word Report"
  },
  {
    "objectID": "statistics.html",
    "href": "statistics.html",
    "title": "Statistics",
    "section": "",
    "text": "Statistical tests are undertaken to improve ecological understanding, separating the single from the noise. It enhances the ecological description when writing reports, making the report more evidenced based and therefore more robust and reproducible by others. When the data is not clear, or there is too much data to see, good statistics brings comprehension. Then there is a tendency to perceive connections or meaningful patterns between unrelated or random things, termed apophenia; here statistical testing can demonstrate it is random or unrelated."
  },
  {
    "objectID": "statistics.html#individual-species-activity",
    "href": "statistics.html#individual-species-activity",
    "title": "Statistics",
    "section": "1 Individual Species Activity",
    "text": "1 Individual Species Activity\n\n1.1 An Obvious Difference\nThe statics data in the iBats package has some interesting Barbastelle (Barbastella barbastellus) bat activity, it would be interesting and aid our understanding if we compare the activity between static locations and see if they are significantly different.\nBefore undertaking any statistical test always visualise the data the statistical test is applied to. Barbastelle has been recorded at several locations see Figure 1.\nThe average bat pass rate per hour can been calculated for each night and each static location using the formula shown in Equation 1:\n\\[AverageActivity = \\frac{Batpasses}{Nightlength} \\tag{1}\\]\nWhere: Batpasses = number of bat pass during the night at the location\nNightlength = length of the night in decimal hours\nAverageActivity = average (mean) number of bat passes per hour for each night there was activity\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n\ngraph_data <- statics_plus %>%\n    filter(Species == \"Barbastella barbastellus\") %>% \n    group_by(Description, Night, night_length_hr) %>%\n    # count number of passes per night by species - makes coloumn \"n\"\"\n    tally() %>% \n    # calculate average bat passes per hour for each Night and species\n    mutate(ave_act_per_hr = n / night_length_hr) %>%\n    # Remove Night Length column from the Table\n    select(-night_length_hr, -n) \n\nggplot(graph_data, aes(y = ave_act_per_hr, x = Description)) +\n                  geom_jitter(fill = \"#1f78b4\", #Barbastelle colour\n                              colour = \"black\", \n                              shape = 23, \n                              alpha = 0.7, \n                              size = 3) +\n                  geom_boxplot(colour = \"grey30\", fill = \"transparent\") + \n                  labs(y = \"Barbastelle Activity  \\n(Nightly Average Passes per Hour)\") +\n                  theme_bw() + \n                  theme(legend.position = \"none\", # No legend\n                  axis.text.x = element_text(size=12, face=\"bold\"), \n                  axis.text.y = element_text(size=12,face=\"bold\"), \n                  axis.title.y = element_text(face=\"bold\"), \n                  axis.title.x = element_blank(), # no y title (just bat names)\n                  panel.grid.major = element_blank(), #remove grid lines\n                  panel.grid.minor = element_blank())\n\n\n\n\n\nFigure 1: Barbastelle Activity at Each Static (Nightly Average Passes per Hour)\n\n\n\n\nThe comparison of locations is undertaken with the Mann-Whitney-Wilcoxon or Kruskal-Wallis test. The Kruskal–Wallis test is a rank-based test that is similar to the Mann-Whitney-Wilcoxon test but can be applied to one-way data with more than two groups. If there are just two locations the Mann-Whitney-Wilcoxon test is applied. The Kruskal–Wallis test may be used when there are only two samples, but the Mann-Whitney-Wilcoxon is more powerful for two samples and is preferred. Both tests assume that the observations are independent. The probability threshold for statistical significance, which should always be chosen before the test is undertaken, is: P < 0.05.\n\nThe Null Hypothesis: bat pass rates per hour are from distributions with the same median.\nThe Alternative Hypothesis: bat pass rates per hour are from distributions with a different median.\n\nThe function kruskal.test, from base R, is used to undertake the Kruskal-Wallis test. A rule of thumb for the Kruskal–Wallis test is each group, (in this case case the number of nightly average bats pace vales for each static location) must have a sample size of 5 or more.\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n\ntest_data <- statics_plus %>%\n  filter(Species == \"Barbastella barbastellus\") %>%\n  group_by(Description, Night, night_length_hr) %>%\n  # count number of passes per night by species - makes coloumn \"n\"\"\n  tally() %>%\n  # calculate average bat passes per hour for each Night and species\n  mutate(ave_act_per_hr = n / night_length_hr) %>%\n  # Remove Night Length column from the Table\n  select(-night_length_hr, -n)\n\n\n# Check at least 2 locations and a minimum of 5 observations per location\n# Only do KW on locations with 5 or more observations\n# if just two locations do Mann Whitney\ncheck_data <- test_data %>%\n  group_by(Description) %>%\n  tally()\n\n# filter for Statics with more than 5 values\nStaticsWithPlus5 <- check_data %>%\n  filter(n >= 5) %>%\n  pull(Description)\n\ntest_data <- test_data %>%\n  filter(Description %in% StaticsWithPlus5)\n\n# Extract the p-value from the kruskal.test\nstat_pvalue <- kruskal.test(ave_act_per_hr ~ Description, data = test_data)$p.value\n\n\nWith reference to Figure 1 there are several static locations where the activity can be compared, this is more than two locations, therefore the Kruskal-Wallis test is undertaken rather than the Mann-Whitney-Wilcoxon test. Location 1 with only three results is excluded from the test.\nThe Kruskal-Wallis test undertaken for the Barbastelle at the following static locations: Static 2, Static 3, Static 4, and Static 5 produced a P value (9.17e-08) less than the chosen threshold for statistical significance of 0.05; therefore the null hypothesis is rejected, activity between some static locations is likely to be different.\nWhat the Kruskal-Wallis test does not indicate, is which static locations are different; to determine this we need to undertake post hoc testing, this can be undertaken with the Dunn’s Test.\n\n\nShow the code\ndunn_result <- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = \"bonferroni\")\n\n\nResults of the Dunn’s test, performed after the Kruskal-Wallis test (post hoc), are shown in Table 1.\n\n\nShow the code\ndf <- tibble(dunn_result$comparisons, dunn_result$P.adjusted)\n\ncolnames(df) <- c(\"Comparison\", \"P.adj\")\n\nresultsTable <- df %>%\n  filter(P.adj < 0.05) %>%\n  select(`Locations with a significant difference (P<0.05)` = Comparison, `adjusted P ` = P.adj)\n\nresultsTable %>%\n  flextable(col_keys = colnames(.)) %>%\n  fontsize(part = \"header\", size = 12) %>%\n  fontsize(part = \"body\", size = 12) %>%\n  bold(part = \"header\") %>%\n  autofit(add_w = 0.1, add_h = 0.1) %>%\n  bg(bg = \"black\", part = \"header\") %>%\n  color(color = \"white\", part = \"header\") %>%\n  align(align = \"center\", part = \"header\") %>%\n  align(j = 2, align = \"right\", part = \"body\") %>%\n  bold(j = 1, bold = TRUE, part = \"body\")     \n\n\n\n\nTable 1:  Results of Post-hoc testing with the Dunn’s Test Locations with a significant difference (P<0.05)adjusted P Static 2 - Static 40.0000002372373Static 3 - Static 40.0004837731033Static 4 - Static 50.0013231129871\n\n\n\nThe Dunn’s Test carries out multiple comparisons therefore a P value adjustment needs to be made to avoid a false significant result. For this P value adjustment the Bonferroni method is applied; a simple technique for controlling the overall probability of a false significant result when multiple comparisons are to be carried out.\nTable 1 gives the results of the post hoc testing with the Dunn’s test and shows that Barbastelle activity at Location 4 is significantly different (at P<0.05) to activity at Locations 2, 3, and 5.\nThe statistical tests show that Barbastelle bat activity recorded at Location 4 is significantly different; this knowledge is evidence based and can be stated with confidence when reporting.\n\n\n1.2 Less Obvious Difference\nFigure 2 shows Common pipistrelle activity for the static locations comparison of activity can be undertaken with the Kruskal-Wallis test with the following hypothesis:\n\nThe Null Hypothesis: bat pass rates per hour are from distributions with the same median.\nThe Alternative Hypothesis: bat pass rates per hour are from distributions with a different median.\n\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n\ngraph_data <- statics_plus %>%\n    filter(Species == \"Pipistrellus pipistrellus\") %>% \n    group_by(Description, Night, night_length_hr) %>%\n    # count number of passes per night by species - makes coloumn \"n\"\"\n    tally() %>% \n    # calculate average bat passes per hour for each Night and species\n    mutate(ave_act_per_hr = n / night_length_hr) %>%\n    # Remove Night Length column from the Table\n    select(-night_length_hr, -n) \n\nggplot(graph_data, aes(y = ave_act_per_hr, x = Description)) +\n                  geom_jitter(fill = \"#ffff99\", #Common Pipistrelle colour\n                              colour = \"black\", \n                              shape = 23, \n                              alpha = 0.7, \n                              size = 3) +\n                  geom_boxplot(colour = \"grey30\", fill = \"transparent\") + \n                  labs(y = \"Common Pipistrelle Activity  \\n(Nightly Average Passes per Hour)\") +\n                  theme_bw() + \n                  theme(legend.position = \"none\", # No legend\n                  axis.text.x = element_text(size=12, face=\"bold\"), \n                  axis.text.y = element_text(size=12,face=\"bold\"), \n                  axis.title.y = element_text(face=\"bold\"), \n                  axis.title.x = element_blank(), # no y title (just bat names)\n                  panel.grid.major = element_blank(), #remove grid lines\n                  panel.grid.minor = element_blank())\n\n\n\n\n\nFigure 2: Common Pipistrelle Activity at Each Static (Nightly Average Passes per Hour)\n\n\n\n\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n\ntest_data <- statics_plus %>%\n  filter(Species == \"Pipistrellus pipistrellus\") %>%\n  group_by(Description, Night, night_length_hr) %>%\n  # count number of passes per night by species - makes coloumn \"n\"\"\n  tally() %>%\n  # calculate average bat passes per hour for each Night and species\n  mutate(ave_act_per_hr = n / night_length_hr) %>%\n  # Remove Night Length column from the Table\n  select(-night_length_hr, -n)\n\n\n# Check at least 2 locations and a minimum of 5 observations per location\n# Only do KW on locations with 5 or more observations\n# if just two locations do Mann Whitney\ncheck_data <- test_data %>%\n  group_by(Description) %>%\n  tally()\n\n# filter for Statics with more than 5 values\nStaticsWithPlus5 <- check_data %>%\n  filter(n >= 5) %>%\n  pull(Description)\n\ntest_data <- test_data %>%\n  filter(Description %in% StaticsWithPlus5)\n\n# Extract the p-value from the kruskal.test\nstat_pvalue <- kruskal.test(ave_act_per_hr ~ Description, data = test_data)$p.value\n\n\nThe Kruskal-Wallis test undertaken for the Common pipistrelle at the following static locations: Static 1, Static 2, Static 3, Static 4, and Static 5 produced a P value (3.30e-16) less than the chosen threshold for statistical significance of 0.05; therefore the null hypothesis is rejected, activity between some static locations is likely to be different. The Dunn’s test can be applied to determine the static locations that are different.\n\n\nShow the code\ndunn_result <- dunn.test(test_data$ave_act_per_hr, factor(test_data$Description), method = \"bonferroni\")\n\n\nResults of the Dunn’s test, performed after the Kruskal-Wallis test (post hoc), are shown in Table 2.\n\n\nShow the code\ndf <- tibble(dunn_result$comparisons, dunn_result$P.adjusted)\n\ncolnames(df) <- c(\"Comparison\", \"P.adj\")\n\nresultsTable <- df %>%\n  filter(P.adj < 0.05) %>%\n  select(`Locations with a significant difference (P<0.05)` = Comparison, `adjusted P ` = P.adj)\n\nresultsTable %>%\n  flextable(col_keys = colnames(.)) %>%\n  fontsize(part = \"header\", size = 12) %>%\n  fontsize(part = \"body\", size = 12) %>%\n  bold(part = \"header\") %>%\n  autofit(add_w = 0.1, add_h = 0.1) %>%\n  bg(bg = \"black\", part = \"header\") %>%\n  color(color = \"white\", part = \"header\") %>%\n  align(align = \"center\", part = \"header\") %>%\n  align(j = 2, align = \"right\", part = \"body\") %>%\n  bold(j = 1, bold = TRUE, part = \"body\")     \n\n\n\n\nTable 2:  Results of Post-hoc testing with the Dunn’s Test Locations with a significant difference (P<0.05)adjusted P Static 1 - Static 20.0000939731690135662070Static 1 - Static 30.0460478959637407314620Static 1 - Static 40.0000000000000007857217Static 2 - Static 40.0000001079868368327319Static 3 - Static 40.0000000296352155723235Static 4 - Static 50.0000000014826746844802\n\n\n\nTable 2 gives the results of the post hoc testing with the Dunn’s test; post P value adjustment with the Bonferroni method showing:\n\nCommon pipistrelle activity at static 4 is significantly different (at P<0.05) to all the other static locations.\n\nCommon pipistrelle activity at static 1 is significantly different to static locations 2, 3 and 4. The significant difference (at P<0.05) between static 1 and static 3 is not easily determined from Figure 2.\n\nCommon pipistrelle activity at static 2, static 3, and static 5 are not significantly different (at P<0.05)."
  },
  {
    "objectID": "statistics.html#bat-assemblage",
    "href": "statistics.html#bat-assemblage",
    "title": "Statistics",
    "section": "2 Bat Assemblage",
    "text": "2 Bat Assemblage\nThe assessment of individual species ignores the fact there is also the species assemblage; the taxonomically related group of species (i.e. bats) occupying the same geographical area at the same time. The assemblage of bat species can be explored using multivariate methods.\nFor most surveys the number of species observed is greater than one, making it a biological assemblage. We can relate this assemblage to other factors such as location, habitat, time, weather, etc. Multivariate analysis gives a way of exploring the bat assemblage differences with respect to factors such as the location/habitat or month/year or combination of both.\n\n2.1 Cluster Analysis\nTable 3 shows a summary matrix of bat passes per species for each static (i.e. location) We would like to know which locations are similar/dissimilar.\n\n\nShow the code\nTab_L_S <- statics %>% # Location - Species\n  group_by(Species, Description) %>% \n  count() \n\nmaxValue <- max(Tab_L_S$n, na.rm = T)\n\nTab_L_S <- Tab_L_S %>% \n  pivot_wider(names_from = Species, values_from = n) %>% \n  replace(is.na(.), 0)\n\nncols <- ncol(Tab_L_S)\n\n#Make coloured palette\ncolourer <- scales::col_numeric(\n  palette = c(\"transparent\", \"forestgreen\"),\n  domain = c(0, maxValue))\n\nTab_L_S %>% \n  flextable() %>% \n    bold(part = \"header\") %>% \n    bg(bg = \"black\", part = \"header\") %>% \n    color(color = \"white\", part = \"header\") %>% \n    rotate(j = 2:ncols, rotation = \"tbrl\", align = \"center\", part = \"header\") %>% \n    height_all(height = 2.3, part = \"header\") %>% \n    hrule(rule = \"exact\", part = \"header\") %>%\n    bg(bg = colourer, j = 2:ncols, part = \"body\") %>%\n    width(j = 2:ncols, width = 0.4) %>% \n    width(j = 1, width = 0.8)\n\n\n\n\nTable 3:  Matrix of Location by Species DescriptionBarbastella barbastellusEptesicus serotinusMyotis nattereriMyotis spp.Nyctalus leisleriNyctalus noctulaNyctalus spp.Pipistrellus nathusiiPipistrellus pipistrellusPipistrellus pygmaeusPipistrellus spp.Plecotus spp.Rhinolophus ferrumequinumRhinolophus hipposiderosStatic 1400670350214734000Static 2284116802010107582236956028Static 31001413350182631519208136Static 43048085028023,5693913620148Static 573007401620235788151\n\n\n\nIn multivariate analysis the pre-treament of data (sometimes in more than one way) is usually desirable. For assemblage data, transformations will reduce the dominant contribution of abundant species (i.e. all those pips). Transformations include (None, Square root, Fourth root, Log(X+1), Presence/absence). Table 4 shows Table 3 transformed with the species \\(\\sqrt[2]{count}\\).\n\n\nShow the code\nSpeciesC <- Tab_L_S %>% \n  ungroup() %>% \n  select(2:ncol(.)) %>% \n  mutate_all(funs(sqrt(.)))\n\nTable <- SpeciesC %>% \n  mutate_all(funs(round(., 2)))\n\nMatrix <- Tab_L_S %>%\n  ungroup() %>% \n  select(Description) %>% \n  bind_cols(SpeciesC)\n\n\nMatrixTable <- Tab_L_S %>%\n  ungroup() %>% \n  select(Description) %>% \n  bind_cols(Table)\n\nMatrix <- data.matrix(Matrix[, 2:ncol(Matrix)])\n\nr_names <- Tab_L_S %>%\n  ungroup() %>% \n  pull(Description)\n\nrownames(Matrix) <- r_names\n\nncols <- ncol(MatrixTable)\n\n#Make coloured palette\ncolourer <- scales::col_numeric(\n  palette = c(\"transparent\", \"forestgreen\"),\n  domain = c(0, maxValue))\n\nMatrixTable %>% \n  flextable() %>% \n    bold(part = \"header\") %>% \n    bg(bg = \"black\", part = \"header\") %>% \n    color(color = \"white\", part = \"header\") %>% \n    rotate(j = 2:ncols, rotation = \"tbrl\", align = \"center\", part = \"header\") %>% \n    height_all(height = 2.3, part = \"header\") %>% \n    hrule(rule = \"exact\", part = \"header\") %>%\n    bg(bg = colourer, j = 2:ncols, part = \"body\") %>%\n    width(j = 2:ncols, width = 0.4) %>% \n    width(j = 1, width = 0.8)\n\n\n\n\nTable 4:  Transformed Matrix DescriptionBarbastella barbastellusEptesicus serotinusMyotis nattereriMyotis spp.Nyctalus leisleriNyctalus noctulaNyctalus spp.Pipistrellus nathusiiPipistrellus pipistrellusPipistrellus pygmaeusPipistrellus spp.Plecotus spp.Rhinolophus ferrumequinumRhinolophus hipposiderosStatic 12.000.0008.190.005.920.001.4112.121.732.000.000.000.00Static 25.292.00112.960.0014.180.003.1627.534.696.009.757.755.29Static 33.160.0016.401.735.920.004.2416.223.874.364.479.006.00Static 417.442.8309.220.005.290.001.4159.746.2411.664.473.742.83Static 58.540.0008.600.004.001.410.0015.332.659.381.002.241.00\n\n\n\nTo assess the differences of activity (in the bat assemblage) between locations (or months, habitat, etc.) we measure the distance between every point of activity with every other point. So activity (e.g. a median or count) at one location for a species is compared(measured) with every other activity for all the species and locations.\nThere are many distance measurements to investigate species similarity/dissimilarity1:\n\nEuclidean distance natural distance between two points\n\nManhattan distance walking around a New York block\n\nBray-Curtis a dissimilarity very useful for ecologists\n\nFor species similarities it may be worth considering the removal of the rarer species (i.e. the less observed) and repeating the analysis.\nIn this example the Bray-Curtis distance measurement has been applied to Table 4 to produce the Bray-Curtis dissimilarity matrix in Table 5.\n\n\nShow the code\nlibrary(vegan)\n\ndist_bray <- vegdist(Matrix, method=\"bray\")\n\ndist_df <- tibble(dist_bray)\n\nfmt2 <- function(dist_num) {\n  \n  temp <- as.character(dist_num)\n  \n  stringr::str_sub(temp, 1L, 7L)\n  \n}\n\nc1 <- c(\"Static 2\", \"Static 3\", \"Static 4\", \"Static 5\")\nc2 <- c(fmt2(dist_df[1,1]), fmt2(dist_df[2,1]), fmt2(dist_df[3,1]), fmt2(dist_df[4,1]))\nc3 <- c(\" \", fmt2(dist_df[5,1]), fmt2(dist_df[6,1]), fmt2(dist_df[7,1]))\nc4 <- c(\" \", \" \", fmt2(dist_df[8,1]), fmt2(dist_df[9,1]))\nc5 <- c(\" \", \" \", \" \", fmt2(dist_df[10,1]))\n\ndist_tbl <- tibble(c1, c2, c3, c4, c5)\n\ncolnames(dist_tbl) <- c(\" \", \"Static 1\", \"Static 2\", \"Static 3\", \"Static 4\")\n\nft <- dist_tbl\nncols <- ncol(ft)\n\nft %>% \n  flextable() %>% \n    bold(part = \"header\") %>% \n    bold(j=1, part = \"body\") %>% \n    bg(bg = \"black\", part = \"header\") %>% \n    bg(j=1, bg = \"black\", part = \"body\") %>% \n    color(color = \"white\", part = \"header\") %>% \n    color(j=1, color = \"white\", part = \"body\")\n\n\n\n\nTable 5:  Bray-Curtis Dissimilarity Matrix  Static 1Static 2Static 3Static 4Static 20.49805   Static 30.366610.25769  Static 40.586130.354220.45871 Static 50.313520.400260.334010.41084\n\n\n\nThe Bray-Curtis dissimilarity matrix can be used in many multivariate methods; here the matix is used in Hierarchical Clustering. Hierarchical clustering is useful because it can create a tree-based representation of the observations called a dendrogram; that is easy to interpret visually. The dendrogram from the Bray-Curtis dissimilarity matrix in Table 5 is shown in Figure 3.\n\n\nShow the code\n# Hierarchical cluster function hclust\nhc_bray <- hclust(dist_bray, method = \"complete\")\n\n# Always visualse\nlibrary(ggdendro)\n#Creates Dendrogram Plot Using ggplot.\nggdendrogram(hc_bray, rotate = TRUE, size = 2) +\n  labs(title = \"Static Location - Complete Cluster - Bray-Curtis\")\n\ndhc <- as.dendrogram(hc_bray)\n\n\n\n\n\nFigure 3: Dendrogram Between Static Locations\n\n\n\n\nClustering refers to a very broad set of techniques for finding subgroups, or clusters, in a data set. Clustering involves grouping a set of objects in such a way that objects in the same group (called a cluster) are more similar (in some sense) to each other than to those in other groups (clusters). Referring to the dendrogram in Figure 3 the lower in the tree fusions occur, the more similar the groups of observations are to each other. While observations that fuse later, near the top of the tree, can be considered less similar.\nFor Figure 3 we can see that for the bat assemblage:\n\nStatics 3 & 2 are similar\nStatics 1 & 5 are similar\nStatic 4 is more similar to Statics 2 & 3 than Statics 1 & 5\nStatics 2 & 3 and Statics 1 & 5 are more similar to Static 4 - than Statics 2 & 3 and Statics 1 & 5 are to each other\n\nNote, the dendrogram is illustrative and we cannot draw conclusions about the degree of similarity of two observations based on their proximity along the vertical axis.\nThis is just an introduction to Hierarchical Clustering, there are many variations and other types of clustering (e.g. k-means). Key variations for hierarchical clustering are:\n\ndistance measurement used e.g. Bray-Curtis, Euclidean, etc.\ntype of linkage e.g. complete, average, single or centroid.\n\n\n\n2.2 K-Means Clustering\nK-means clustering is a simple approach for partitioning a data set into K distinct non-overlapping clusters. To perform K means clustering we must specify the desired number of clusters first. The code below applies k-means clustering to the Bray-Curtis dissimilarity matrix in Table 5 with K=2.\n\n\nShow the code\nresult_km <- kmeans(dist_bray, centers = 2)\n\n\n\n\nShow the code\nclusters <- tibble(names(result_km$cluster), result_km$cluster)\n\ncolnames(clusters) <- c(\"Location\", \"Cluster\")\n\nclusters %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  cols_width(everything() ~ px(150))\n\n\n\n\n\n\nTable 6:  k-means Cluster and Location \n  \n    \n    \n  \n  \n  \n    \n      Location\n      Cluster\n    \n  \n  \n    Static 1\n2\n    Static 2\n1\n    Static 3\n2\n    Static 4\n1\n    Static 5\n2\n  \n  \n  \n\n\n\n\n\n\n\nShow the code\ntidy(result_km) %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 7:  Summary on a Per-Cluster Level \n  \n  \n    \n      Static 1\n      Static 2\n      Static 3\n      Static 4\n      Static 5\n      size\n      withinss\n      cluster\n    \n  \n  \n    0.5420950\n0.1771132\n0.3582046\n0.1771132\n0.4055556\n2\n0.1496150\n1\n    0.2267147\n0.3853388\n0.2335433\n0.4852314\n0.2158467\n3\n0.2765864\n2\n  \n  \n  \n\n\n\n\n\n\n\nShow the code\nglance(result_km) %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 8:  k-means Overall Summary Statistics \n  \n  \n    \n      totss\n      tot.withinss\n      betweenss\n      iter\n    \n  \n  \n    0.7733486\n0.4262014\n0.3471472\n1\n  \n  \n  \n\n\n\n\n\nThe output of kmeans is a list of information; the most important:\n\ncluster: Table 6 & Table 7 A vector of integers (from 1:K) indicating the cluster to which each point is allocated.\ncenters: A matrix of cluster centers.\ntotss: Table 8 The total sum of squares.\nwithinss: Table 7 Vector of within-cluster sum of squares, one component per cluster.\ntot.withinss: Table 8 Total within-cluster sum of squares, i.e. sum(withinss).\nbetweenss: Table 8 The between-cluster sum of squares, i.e. \\(totss-tot.withinss\\).\nsize: The number of points in each cluster.\niter: Table 8 The number of (outer) iterations."
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Tidy Data",
    "section": "",
    "text": "Tidy Data is a consistent way to organise your data (Wickham 2014). Getting your data into this format requires some initial work, but that effort pays off in the long term. Once you have tidy data you will spend less time wrangling data from one representation to another, allowing you to spend more time on the analytic questions at hand. Unfortunately, there is a rule of thumb; 80% of time doing data science is spent wrangling data; particularly the effort required in sorting and rearranging the data into the tidy and therefore usable format.\nThere are three interrelated rules which make a data set tidy see Figure 1:"
  },
  {
    "objectID": "tidy.html#minimal-data-requirement",
    "href": "tidy.html#minimal-data-requirement",
    "title": "Tidy Data",
    "section": "1 Minimal Data Requirement",
    "text": "1 Minimal Data Requirement\nTo undertake meaningful data analysis, it is recommended that data collected from bat activity surveys is wrangled into tidy data that has the following five variables (columns) as a minimum:\n\nDescription\nDateTime\nSpecies\nLatitude\nLongitude\n\nThe rationale for these variables is as follows:\nDescription a column to help identify the observation for example a location, surveyor or survey number.\nDateTime: the date and time of the bat observation to BS ISO 8601:2004 i.e. yyyymmdd hh:mm:ss. The use of BS ISO 8601:2004 prevents confusion over the date format 1 . Reference bat activity to the local time and specifying an iana2 time zone allows for daylight saving times to considered; the iana code for the UK is Europe/London.\nSpecies: bat species names should follow the “binomial nomenclature” from the International Code of Zoological Nomenclature (ICZN)3 - e.g. Barbastella barbastellus, Eptesicus serotinus, etc… A column of local common names can always be added to the tidy data, i.e. in a separate column see Appendix 8. Sound analysis may not be able to distinguish calls to species level; in practice some calls may only be identified to genus or less; Table @ref(tab:table04) gives a practical and consistent guide to naming4.\nLongitude and Latitude: World Geodetic System 19845 (WGS84); as used by Google earth. A digital, numeric, format should be used. Any other spatial reference system can be used (e.g. British National Grid Easting/Northing), as this can be stored as an extra column in the tidy data, the prerequisite is that the reference system can be converted to WGS84; which is the case for most national or state co-ordinate systems. Using a global co-ordinate system such as WSG84 give access to the many open-source application programming interfaces (API) available that assist with data analysis (e.g. assessing sunset and sunrise times or the adjustment to daylight saving)."
  },
  {
    "objectID": "tidy.html#making-bat-data-tidy",
    "href": "tidy.html#making-bat-data-tidy",
    "title": "Tidy Data",
    "section": "2 Making Bat Data Tidy",
    "text": "2 Making Bat Data Tidy\nResults of bat sound analysis can be untidy:\n\ntwo or more species in one cell (see Table 2);\ncount of bats (Table 4);\ntwo of more columns with species of same date and time (Table 6);\ncode names for species rather than the binomial nomenclature (Table 3); and,\nLongitude and Latitude columns with missing values (Table 9)\n\nWhile the bat survey results shown in Table 1 is an example of a tidy data set; the data shown in Table 2, Table 4, Table 6, Table 3 and, Table 9 are untidy and would need to be made tidy to undertake analysis.\nData preparation is not just a first step but must be repeated many times over during analysis; as new problems come to light, or new data is collected. Making bat data into a tidy format, involves cleaning data: parsing dates and numbers, identifying missing values, correcting character encoding, matching similar but not identical values (such as those created by typos); it is an essential step, takes time to do and makes subsequent steps in the analysis much easier.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(iBats)\nlibrary(gt)\n\nstatics %>% # statics is a tidy data set from the iBats package\n  select(Description, DateTime, Species, Latitude, Longitude) %>%\n  sample_n(10) %>%\n  arrange(DateTime) %>%\n  # Table made with gt()\n  gt() %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>%\n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n    ),\n    locations = cells_body(\n      columns = c(Species)\n    )\n  )\n\n\n\n\n\n\nTable 1:  Tidy Bat data \n  \n  \n    \n      Description\n      DateTime\n      Species\n      Latitude\n      Longitude\n    \n  \n  \n    Static 4\n2016-06-13 01:50:48\nPipistrellus pipistrellus\n50.33123\n-3.591858\n    Static 4\n2016-07-27 01:30:04\nPipistrellus pipistrellus\n50.33133\n-3.591748\n    Static 5\n2016-07-30 00:58:26\nPipistrellus spp.\n50.33105\n-3.590738\n    Static 4\n2016-07-30 01:27:32\nPipistrellus pipistrellus\n50.33141\n-3.591878\n    Static 4\n2016-07-31 01:08:12\nPipistrellus pipistrellus\n50.33130\n-3.591848\n    Static 4\n2016-08-04 23:11:37\nPipistrellus pipistrellus\n50.33136\n-3.591748\n    Static 4\n2016-08-05 01:58:13\nPipistrellus pipistrellus\n50.33136\n-3.591748\n    Static 2\n2016-08-15 21:45:25\nPipistrellus pipistrellus\n50.33323\n-3.592583\n    Static 4\n2016-08-25 01:58:59\nPipistrellus pipistrellus\n50.33133\n-3.591768\n    Static 2\n2016-10-10 19:39:35\nPlecotus spp.\n50.33323\n-3.592583\n  \n  \n  \n\n\n\n\n\n\n2.1 Too Many Species in a Cell\n\n\nShow the code\nlibrary(gt)\nlibrary(iBats)\n\n# Table made with gt()\nuntidy1 %>%\n  gt() %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 2:  Untidy Bat Data Too Many Species in a Cell \n  \n  \n    \n      DateTime\n      Species\n    \n  \n  \n    2019-10-03 20:55:30\nPIPPYG\n    2019-10-03 20:58:30\nPIPPYG, NYCLEI\n    2019-10-03 21:15:30\nPIPPYG\n    2019-10-03 21:25:30\nPIPPIP, PIPPYG, NYCLEI\n    2019-10-03 21:35:30\nPIPPIP\n  \n  \n  \n\n\n\n\n\nToo many species in a cell, as in Table 2, can be made tidy by expanding the data so each species observed is in it’s own row, using the function tidyr::separate_rows(Species); as shown below in Table 3. Note that this data has untidy bat names; these are corrected in Section 2.4. The untidy1 data is example untidy data available from the iBats package.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(gt) # Makes table\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\nuntidy1 %>%\n  tidyr::separate_rows(Species) %>%\n  # Table made with gt()\n  gt() %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 3:  Tidied Bat Data from Too Many Species in a Cell \n  \n  \n    \n      DateTime\n      Species\n    \n  \n  \n    2019-10-03 20:55:30\nPIPPYG\n    2019-10-03 20:58:30\nPIPPYG\n    2019-10-03 20:58:30\nNYCLEI\n    2019-10-03 21:15:30\nPIPPYG\n    2019-10-03 21:25:30\nPIPPIP\n    2019-10-03 21:25:30\nPIPPYG\n    2019-10-03 21:25:30\nNYCLEI\n    2019-10-03 21:35:30\nPIPPIP\n  \n  \n  \n\n\n\n\n\n\n\n2.2 A Column of Bat Counts\n\n\nShow the code\nlibrary(gt)\nlibrary(iBats)\n\n# Table made with gt()\nuntidy2 %>%\n  gt() %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 4:  Untidy Bat Data a Column Giving the Number of Bat Passes \n  \n  \n    \n      DateTime\n      Species\n      Number\n    \n  \n  \n    2019-10-05 20:35:15\nPipistrellus pipistrellus\n1\n    2019-10-05 20:38:30\nPipistrellus pygmaeus\n1\n    2019-10-05 20:49:40\nNyctalus noctula\n2\n    2019-10-05 21:05:15\nPipistrellus pipistrellus\n1\n    2019-10-05 21:15:30\nPipistrellus pygmaeus\n3\n    2019-10-05 21:25:45\nPipistrellus pipistrellus\n1\n  \n  \n  \n\n\n\n\n\nA count of species, as in Table 4, can be made tidy by un-counting the data so each species observed is in it’s own row, using the function tidyr::uncount(Number); as shown below in Table 5. The untidy2 data is example untidy data available from the iBats package.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(gt) # Makes table\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\nuntidy2 %>%\n  tidyr::uncount(Number) %>%\n  # Table made with gt()\n  gt() %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 5:  Tidied Bat Data with the Column Bats Un-counted \n  \n  \n    \n      DateTime\n      Species\n    \n  \n  \n    2019-10-05 20:35:15\nPipistrellus pipistrellus\n    2019-10-05 20:38:30\nPipistrellus pygmaeus\n    2019-10-05 20:49:40\nNyctalus noctula\n    2019-10-05 20:49:40\nNyctalus noctula\n    2019-10-05 21:05:15\nPipistrellus pipistrellus\n    2019-10-05 21:15:30\nPipistrellus pygmaeus\n    2019-10-05 21:15:30\nPipistrellus pygmaeus\n    2019-10-05 21:15:30\nPipistrellus pygmaeus\n    2019-10-05 21:25:45\nPipistrellus pipistrellus\n  \n  \n  \n\n\n\n\n\n\n\n2.3 Two or More Columns of Bat Species\n\n\nShow the code\nlibrary(gt)\nlibrary(iBats)\n\n# Table made with gt()\nuntidy3 %>%\n  gt() %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  )\n\n\n\n\n\n\nTable 6:  Two or More Columns of Bat Species \n  \n  \n    \n      DateTime\n      Species\n      Species2nd\n      Species3rd\n    \n  \n  \n    2019-10-04 20:35:15\nCommon pipistrelle\n\n\n    2019-10-04 20:38:30\nSoprano pipistrelle\nNoctule\n\n    2019-10-04 21:05:15\nCommon pipistrelle\n\n\n    2019-10-04 21:15:30\nSoprano pipistrelle\nCommon pipistrelle\nNoctule\n    2019-10-04 21:25:45\nCommon pipistrelle\nCommon pipistrelle\n\n  \n  \n  \n\n\n\n\n\nSeveral columns of species, as in Table 6, can be made tidy by making separate data.frames and binding them together so each species observed is in it’s own row; as shown below in Table 7. The untidy3 data is example untidy data available from the iBats package.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# Select Species column and remove (Species2nd & Species3rd)\ndata1 <- untidy3 %>%\n  select(-Species2nd, -Species3rd)\n\n# Select Species2nd column and remove (Species & Species3rd)\ndata2 <- untidy3 %>%\n  select(-Species, -Species3rd) %>%\n  filter(Species2nd != \"\") %>% # Remove blank rows\n  rename(Species = Species2nd) # Rename column\n\n# Select Species3rd column and remove (Species & Species2nd)\ndata3 <- untidy3 %>%\n  select(-Species, -Species2nd) %>%\n  filter(Species3rd != \"\") %>% # Remove blank rows\n  rename(Species = Species3rd) # Rename column\n\n# Add the datasets together into one\ndplyr::bind_rows(data1, data2, data3) %>%\n  # Table made with gt()\n  gt() %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n    ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) \n\n\n\n\n\n\nTable 7:  Tidied Bat Data with Two or More Columns put into One \n  \n  \n    \n      DateTime\n      Species\n    \n  \n  \n    2019-10-04 20:35:15\nCommon pipistrelle\n    2019-10-04 20:38:30\nSoprano pipistrelle\n    2019-10-04 21:05:15\nCommon pipistrelle\n    2019-10-04 21:15:30\nSoprano pipistrelle\n    2019-10-04 21:25:45\nCommon pipistrelle\n    2019-10-04 20:38:30\nNoctule\n    2019-10-04 21:15:30\nCommon pipistrelle\n    2019-10-04 21:25:45\nCommon pipistrelle\n    2019-10-04 21:15:30\nNoctule\n  \n  \n  \n\n\n\n\n\n\n\n2.4 Convert Bat Names to Scientific\nTable 3 is still untidy because the bat species are represented as codes and not in a binomial nomenclature(scientific name). The iBats::make_scientific() function can take a named vector of codes and the scientific name; such as the BatScientific vector below. The case of the bat name codes are ignored; they are all converted to lower case.\n\n\nShow the code\nBatScientific <- c(\"nyclei\" = \"Nyctalus leisleri\",\n                   \"nycnoc\" = \"Nyctalus noctula\",\n                   \"pippip\" = \"Pipistrellus pipistrellus\",\n                   \"pipnat\" = \"Pipistrellus nathusii\",\n                   \"pippyg\" = \"Pipistrellus pygmaeus\",\n                   \"45 pip\" = \"Pipistrellus pipistrellus\",\n                   \"55 pip\" = \"Pipistrellus pygmaeus\",\n                   \"bleb\" = \"Plecotus auritus\",\n                   # If already a scientific name keep it\n                   \"myotis daubentonii\" = \"Myotis daubentonii\") \n\n\nThe BatScientific vector is then used to covert the survey vector of bat names (the Species column in Table 3) so they are all scientific; using the iBats::make_scientific() function. The BatScientific can be expanded to cover many names and codes, if there are duplicate names or codes a conversion will not take place for that name or code. The tidied data with scientific species names is shown in Table 8\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# Remove too many species in a cell\ntidied1 <- untidy1 %>%\n  tidyr::separate_rows(Species)\n\ntidied1$Species <- iBats::make_scientific(BatScientific, tidied1$Species)\n\n\n\n\nShow the code\nlibrary(gt)\n# Table made with gt()\ntidied1 %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) \n\n\n\n\n\n\nTable 8:  Tidied Data with Scientific Names \n  \n  \n    \n      DateTime\n      Species\n    \n  \n  \n    2019-10-03 20:55:30\nPipistrellus pygmaeus\n    2019-10-03 20:58:30\nPipistrellus pygmaeus\n    2019-10-03 20:58:30\nNyctalus leisleri\n    2019-10-03 21:15:30\nPipistrellus pygmaeus\n    2019-10-03 21:25:30\nPipistrellus pipistrellus\n    2019-10-03 21:25:30\nPipistrellus pygmaeus\n    2019-10-03 21:25:30\nNyctalus leisleri\n    2019-10-03 21:35:30\nPipistrellus pipistrellus\n  \n  \n  \n\n\n\n\n\n\n\n2.5 Missing Latitude and Longitude Values\nThe BatExplorer data in the iBats package (see Table 9), was recorded on an evening transect bat detector survey. The data has missing longitude and latitude values, shown as NA and is not uncommon when the Global Positioning System (GPS) is trying to calculate its position beneath trees or in a steep valley.\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(iBats)\nlibrary(gt)\n\n# BatExplorer csv file is from the iBats package\nBatExplorer %>% \n  head(n=15L)  %>% \n  select(DateTime = Timestamp, \n         Species = `Species Text`, \n         Latitude = `Latitude [WGS84]`,\n         Longitude = `Longitude [WGS84]`) %>% \n  # Table made with gt()\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) \n\n\n\n\n\n\nTable 9:  Missing Longitude and Latitude Values (NA) \n  \n  \n    \n      DateTime\n      Species\n      Latitude\n      Longitude\n    \n  \n  \n    06/05/2018 21:05:24\nPipistrellus pygmaeus\nNA\nNA\n    06/05/2018 21:06:51\nNyctalus noctula\nNA\nNA\n    06/05/2018 21:09:23\nNyctalus noctula\nNA\nNA\n    06/05/2018 21:13:20\nNyctalus noctula\nNA\nNA\n    06/05/2018 21:19:16\nPipistrellus pygmaeus\n50.51771\n-4.162705\n    06/05/2018 21:20:33\nPipistrellus pygmaeus\n50.51704\n-4.162595\n    06/05/2018 21:20:40\nPipistrellus pygmaeus\n50.51706\n-4.162693\n    06/05/2018 21:31:51\nPipistrellus pygmaeus\n50.54168\n-4.188790\n    06/05/2018 21:32:35\nPipistrellus pygmaeus\nNA\nNA\n    06/05/2018 21:34:00\nNyctalus noctula\nNA\nNA\n    06/05/2018 21:34:02\nNyctalus noctula\nNA\nNA\n    06/05/2018 21:34:04\nNyctalus noctula\nNA\nNA\n    06/05/2018 21:34:14\nNyctalus noctula\n50.51703\n-4.162153\n    06/05/2018 21:34:27\nPipistrellus pipistrellus\n50.51703\n-4.162153\n    06/05/2018 21:35:27\nRhinolophus hipposideros\n50.49506\n-4.137962\n  \n  \n  \n\n\n\n\n\nThe longitude and latitude gives a position of the bat observation and is also used to determine sunset and sunrise; and if the values are not completed then these observations would be excluded from the analysis. A simple estimate of the missing longitude and latitude can be made by arranging the data in date/time order and using the function:\ntidyr::fill(c(Latitude, Longitude), .direction = \"downup\")\nThis fills the missing values from the nearest complete values; first down and then up. The filled data is shown in Table 10.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed\n# devtools is used to install the iBats package from GitHub\nif (!require(devtools)) {\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif (!require(iBats)) {\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n# BatExplorer csv file is from the iBats package\nBatExplorer %>%\n  head(n = 15L) %>%\n  select(\n    DateTime = Timestamp,\n    Species = `Species Text`,\n    Latitude = `Latitude [WGS84]`,\n    Longitude = `Longitude [WGS84]`\n  ) %>%\n  arrange(DateTime) %>% \n  tidyr::fill(c(Latitude, Longitude), .direction = \"downup\")\n\n\n\n\nShow the code\n# BatExplorer csv file is from the iBats package\nBatExplorer %>% \n  head(n=15L)  %>% \n  select(DateTime = Timestamp, \n         Species = `Species Text`, \n         Latitude = `Latitude [WGS84]`,\n         Longitude = `Longitude [WGS84]`) %>% \n  fill(Latitude, .direction = \"downup\") %>%\n    fill(Longitude, .direction = \"downup\") %>% \n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"black\"),\n      cell_text(color = \"white\", weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(everything())\n    )\n  ) %>% \n  # Make bat scientific name italic\n  tab_style(\n    style = list(\n      cell_text(style = \"italic\")\n      ),\n    locations = cells_body(\n      columns = c(Species)\n  )) \n\n\n\n\n\n\nTable 10:  Filled Longitude and Latitude Values \n  \n  \n    \n      DateTime\n      Species\n      Latitude\n      Longitude\n    \n  \n  \n    06/05/2018 21:05:24\nPipistrellus pygmaeus\n50.51771\n-4.162705\n    06/05/2018 21:06:51\nNyctalus noctula\n50.51771\n-4.162705\n    06/05/2018 21:09:23\nNyctalus noctula\n50.51771\n-4.162705\n    06/05/2018 21:13:20\nNyctalus noctula\n50.51771\n-4.162705\n    06/05/2018 21:19:16\nPipistrellus pygmaeus\n50.51771\n-4.162705\n    06/05/2018 21:20:33\nPipistrellus pygmaeus\n50.51704\n-4.162595\n    06/05/2018 21:20:40\nPipistrellus pygmaeus\n50.51706\n-4.162693\n    06/05/2018 21:31:51\nPipistrellus pygmaeus\n50.54168\n-4.188790\n    06/05/2018 21:32:35\nPipistrellus pygmaeus\n50.54168\n-4.188790\n    06/05/2018 21:34:00\nNyctalus noctula\n50.54168\n-4.188790\n    06/05/2018 21:34:02\nNyctalus noctula\n50.54168\n-4.188790\n    06/05/2018 21:34:04\nNyctalus noctula\n50.54168\n-4.188790\n    06/05/2018 21:34:14\nNyctalus noctula\n50.51703\n-4.162153\n    06/05/2018 21:34:27\nPipistrellus pipistrellus\n50.51703\n-4.162153\n    06/05/2018 21:35:27\nRhinolophus hipposideros\n50.49506\n-4.137962\n  \n  \n  \n\n\n\n\n\n```"
  },
  {
    "objectID": "visualisation.html",
    "href": "visualisation.html",
    "title": "Visualisation",
    "section": "",
    "text": "A good visualisation tells a story, removing the noise from the data and illuminating the useful information. Visualise to present data to a lay audience, it also helps interpretation during analysis within the survey team."
  },
  {
    "objectID": "visualisation.html#bat-colours",
    "href": "visualisation.html#bat-colours",
    "title": "Visualisation",
    "section": "1 Bat Colours",
    "text": "1 Bat Colours\nTo help with accessibility it is recommended that a consistent colour is used for each species throughout the report and the colours used are readable to people with a visual impairment. Unfortunately, accessibility for the visually impaired is challenging when more than 8 or 10 colours are used; if this is the case consider separating the visualisation into different components, creating more than one graph or just highlighting the key species.\nTable 1 lists the set of colours used for the visualisations on this page.\n\n\nShow the code\nbat_colours_sci <- c(\"Barbastella barbastellus\" = \"#1f78b4\", \n                     \"Myotis alcathoe\" = \"#a52a2a\",\n                     \"Myotis bechsteinii\" = \"#7fff00\",\n                     \"Myotis brandtii\" = \"#b2df8a\", \n                     \"Myotis mystacinus\" = \"#6a3d9a\", \n                     \"Myotis nattereri\" = \"#ff7f00\", \n                     \"Myotis daubentonii\" = \"#a6cee3\", \n                      \"Myotis spp.\" = \"#bcee68\",\n                      \"Plecotus auritus\" = \"#8b0000\", \n                      \"Plecotus spp.\" = \"#8b0000\", \n                      \"Plecotus austriacus\" = \"#000000\",\n                      \"Pipistrellus pipistrellus\" = \"#ffff99\", \n                      \"Pipistrellus nathusii\" = \"#8a2be2\", \n                      \"Pipistrellus pygmaeus\" = \"#b15928\", \n                      \"Pipistrellus spp.\" = \"#fdbf6f\", \n                      \"Rhinolophus ferrumequinum\" = \"#e31a1c\", \n                      \"Rhinolophus hipposideros\" = \"#33a02c\", \n                      \"Nyctalus noctula\" = \"#cab2d6\", \n                      \"Nyctalus leisleri\" = \"#fb9a99\", \n                      \"Nyctalus spp.\" = \"#eee8cd\", \n                      \"Eptesicus serotinus\" = \"#008b8b\")\n\nbat_colour_table <- tibble(names(bat_colours_sci), unname(bat_colours_sci))\n\ncolnames(bat_colour_table) <- c(\"Scientific Name\", \"Colour (Hex)\")\n\nbat_colour_table %>% \n  # Table made with library(flextable)\n    flextable(col_keys = colnames(.)) %>% \n    bold(part = \"header\") %>% \n    autofit(add_w = 0.1, add_h = 0.1) %>% \n    #bg(bg = \"black\", part = \"header\") %>% \n    bg(j = 2, i = 1, bg = bat_colour_table$`Colour (Hex)`[1], part = \"body\") %>% \n    bg(j = 2, i = 2, bg = bat_colour_table$`Colour (Hex)`[2], part = \"body\") %>% \n    bg(j = 2, i = 3, bg = bat_colour_table$`Colour (Hex)`[3], part = \"body\") %>% \n    bg(j = 2, i = 4, bg = bat_colour_table$`Colour (Hex)`[4], part = \"body\") %>% \n    bg(j = 2, i = 5, bg = bat_colour_table$`Colour (Hex)`[5], part = \"body\") %>% \n    bg(j = 2, i = 6, bg = bat_colour_table$`Colour (Hex)`[6], part = \"body\") %>% \n    bg(j = 2, i = 7, bg = bat_colour_table$`Colour (Hex)`[7], part = \"body\") %>% \n    bg(j = 2, i = 8, bg = bat_colour_table$`Colour (Hex)`[8], part = \"body\") %>% \n    bg(j = 2, i = 9, bg = bat_colour_table$`Colour (Hex)`[9], part = \"body\") %>% \n    bg(j = 2, i = 10, bg = bat_colour_table$`Colour (Hex)`[10], part = \"body\") %>% \n    bg(j = 2, i = 11, bg = bat_colour_table$`Colour (Hex)`[11], part = \"body\") %>% \n    color(j = 2, i = 11, color = \"white\", part = \"body\") %>% \n    bg(j = 2, i = 12, bg = bat_colour_table$`Colour (Hex)`[12], part = \"body\") %>% \n    bg(j = 2, i = 13, bg = bat_colour_table$`Colour (Hex)`[13], part = \"body\") %>% \n    bg(j = 2, i = 14, bg = bat_colour_table$`Colour (Hex)`[14], part = \"body\") %>% \n    bg(j = 2, i = 15, bg = bat_colour_table$`Colour (Hex)`[15], part = \"body\") %>% \n    bg(j = 2, i = 16, bg = bat_colour_table$`Colour (Hex)`[16], part = \"body\") %>% \n    bg(j = 2, i = 17, bg = bat_colour_table$`Colour (Hex)`[17], part = \"body\") %>% \n    bg(j = 2, i = 18, bg = bat_colour_table$`Colour (Hex)`[18], part = \"body\") %>% \n    bg(j = 2, i = 19, bg = bat_colour_table$`Colour (Hex)`[19], part = \"body\") %>% \n    bg(j = 2, i = 20, bg = bat_colour_table$`Colour (Hex)`[20], part = \"body\") %>% \n    bg(j = 2, i = 21, bg = bat_colour_table$`Colour (Hex)`[21], part = \"body\") %>% \n   # color(color = \"white\", part = \"header\") %>% \n    align(align = \"center\", part = \"header\" ) %>% \n    align(j = 2, align = \"right\", part = \"body\") %>% \n    italic(j = 1, italic = TRUE, part = \"body\") \n\n\n\n\nTable 1:  Bat Name and Colour Scientific NameColour (Hex)Barbastella barbastellus#1f78b4Myotis alcathoe#a52a2aMyotis bechsteinii#7fff00Myotis brandtii#b2df8aMyotis mystacinus#6a3d9aMyotis nattereri#ff7f00Myotis daubentonii#a6cee3Myotis spp.#bcee68Plecotus auritus#8b0000Plecotus spp.#8b0000Plecotus austriacus#000000Pipistrellus pipistrellus#ffff99Pipistrellus nathusii#8a2be2Pipistrellus pygmaeus#b15928Pipistrellus spp.#fdbf6fRhinolophus ferrumequinum#e31a1cRhinolophus hipposideros#33a02cNyctalus noctula#cab2d6Nyctalus leisleri#fb9a99Nyctalus spp.#eee8cdEptesicus serotinus#008b8b"
  },
  {
    "objectID": "visualisation.html#time-bats-were-active",
    "href": "visualisation.html#time-bats-were-active",
    "title": "Visualisation",
    "section": "2 Time Bats Were Active",
    "text": "2 Time Bats Were Active\nFigure 1 illustrates bat activity through one night near an Oak tree in the River Tavy valley, Devon. Rather than depicting a bat pass the time the bat was present is shown. The y-axis is expanded to spread the bat activity making the graph more readable.\nThe data used TavyOak is from the iBats package. The bat species colour for the graph were made using the iBats::bat_colours() function; this provided the colour values used by ggplot's manual scale function scale_fill_manual().\n\n\nShow the code\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n\n\n# graph anotation\ngraph_sunrise <- TavyOak$sunrise[1]\ngraph_sunset <- TavyOak$sunset[1]\n\n# graph time limits x-axis\ngraph_limit1 <- TavyOak$sunset[1] - lubridate::hours(1)\ngraph_limit2 <- TavyOak$sunrise[1] + lubridate::hours(1)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- bat_colours(TavyOak$Species, colour_vector = bat_colours_sci)\n\n\nggplot(TavyOak, aes(y = 1, x = DateTime, fill = Species, size = bat_time)) +\n  geom_jitter(shape = 21, alpha = 0.7) +\n  geom_vline(\n    xintercept = graph_sunset,\n    colour = \"brown1\",\n    linetype = \"dashed\",\n    linewidth = 1,\n    alpha = 0.8\n  ) +\n  geom_vline(\n    xintercept = graph_sunrise,\n    colour = \"mediumblue\",\n    linetype = \"dashed\",\n    linewidth = 1,\n    alpha = 0.8\n  ) +\n  annotate(\"text\",\n    x = graph_sunset - lubridate::minutes(20),\n    y = 1,\n    label = \"Sunset\",\n    color = \"brown1\",\n    angle = 270\n  ) +\n  annotate(\"text\",\n    x = graph_sunrise + lubridate::minutes(20),\n    y = 1,\n    label = \"Sunrise\",\n    color = \"mediumblue\",\n    angle = 270\n  ) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  scale_x_datetime(\n    date_labels = \"%H:%M hrs\",\n    date_breaks = \"1 hour\",\n    limits = c(graph_limit1, graph_limit2)\n  ) +\n  labs(\n    fill = \"Species\",\n    size = \"Time Bat Was Present\\n(seconds)\",\n    y = \"For clarity activity is spread across the verstical scale\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"right\",\n    panel.grid.major.x = element_line(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10, angle = 270),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"),\n    legend.text = element_text(face = \"italic\"),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 10)\n  )\n\n\n\n\n\nFigure 1: Time Bats Were Active Through The Night"
  },
  {
    "objectID": "visualisation.html#emergence-time-of-bats",
    "href": "visualisation.html#emergence-time-of-bats",
    "title": "Visualisation",
    "section": "3 Emergence Time of Bats",
    "text": "3 Emergence Time of Bats\nFigure 2 illustrates emergence times for UK bats based on the work of Andrews & Pearson (2022) 1.\n\n\nShow the code\n### Libraries Used\nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n###\n\n# A vector used to give the species a specific colour in the graphic; the colours\n# can be changed and other species added.\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n###\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(Andrews$Species, colour_vector = bat_colours_sci)\n\nggplot(Andrews) +\n  geom_segment(aes(x = reorder(Species, -meanExit), xend = Species, y = firstExit95, yend = lastExit95), color = \"grey\", size = 2) +\n  geom_point(aes(x = reorder(Species, -meanExit), y = meanExit, fill = Species), color = \"black\", size = 5, shape = 21) +\n  scale_y_continuous(breaks = c(-20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", colour = \"purple\", size = 1) +\n  scale_fill_manual(values = graph_bat_colours) +\n  coord_flip() +\n  labs(\n    y = \"Minutes After Sunset\",\n    caption = \"adapted from (Andrews and Pearson, 2022)\\ngrey bar is indicative of the emergence time range\\ncoloured point is the mean emergence time\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_text(face = \"italic\"),\n    axis.title.y = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\n\n\n\nFigure 2: Roost Emergence Times After Sunset"
  },
  {
    "objectID": "visualisation.html#graphing-a-count-of-bats",
    "href": "visualisation.html#graphing-a-count-of-bats",
    "title": "Visualisation",
    "section": "4 Graphing a Count of Bats",
    "text": "4 Graphing a Count of Bats\nOne of the problems with presenting a count of bat passes observed in the UK is the relative abundance of the Common Pipistrelle (Pipistrellus pipistrellus). Figure 3 tries to resolve this issue by using a log scale, not a friendly scale to the lay reader but some mitigation is achieved by placing the actual count of bat passes on the graph. Figure 3 shows the count of bat species in the statics data.\n\n4.1 Dot Graph\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(broman) # useful add_commas function - \n# see https://cran.r-project.org/web/packages/broman/index.html\nlibrary(glue) # for joining text and variables\nlibrary(ggrepel) # for tidy graph labels\n\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n###\n\n# A vector used to give the species a specific colour in the graphic; the colours\n# can be changed and other species added.\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n###\n\n\ngraph_data <- statics %>% #statics is a bat survey data set from the iBats package\n  group_by(Species) %>%\n  count() %>%\n  # Add a graph species label; commas added with library(broman)\n  mutate(\n    total = add_commas(n),\n    label = glue(\"{Species}: {total}\")\n  )\n\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(y = reorder(Species, n), x = n, fill = Species)) +\n  geom_point(colour = \"black\", size = 5) +\n  geom_label_repel(\n    data = graph_data, aes(label = label),\n    nudge_y = -0.25,\n    nudge_x = ifelse(graph_data$n < 100, 0.33, -0.33),\n    alpha = 0.7\n  ) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_x_log10(sec.axis = dup_axis()) +\n  annotation_logticks(sides = \"tb\") +\n  labs(\n    x = \"Bat Observations (Number of Passes)\",\n    caption = \"Note: Log scale used\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 12, face = \"bold\"),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"),\n    axis.title.x = element_text(size = 12, face = \"bold\"),\n    axis.title.y = element_blank()\n  )\n\n\n\n\n\nFigure 3: Count of All Species Observations\n\n\n\n\n\n\n4.2 Tree Map Description\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(treemapify) # extension to ggplot for plotting treemaps - \n# see https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html\n\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n###\n\n# A vector used to give the species a specific colour in the graphic; the colours\n# can be changed and other species added.\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n###\n\n\ngraph_data <- statics %>% #statics is a bat survey data set from the iBats package\n  group_by(Species, Description) %>%\n  tally()\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(area = n, fill = Species, label = Species, subgroup = Description)) +\n  scale_fill_manual(values = graph_bat_colours) +\n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(\n    place = \"centre\", grow = T, alpha = 0.9, colour =\n      \"grey20\", min.size = 0\n  ) +\n  geom_treemap_text(\n    colour = \"grey90\", place = \"topleft\", fontface = \"italic\",\n    reflow = T, min.size = 0, alpha = 0.9\n  ) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n\n\n\n\n\nFigure 4: Species and Location with the Area as the Number of Passes\n\n\n\n\n\n\n4.3 Tree Map Month\n\n\nShow the code\n### Libraries Used \nlibrary(tidyverse) # Data Science packages - see https://www.tidyverse.org/\nlibrary(treemapify) # extension to ggplot for plotting treemaps - \n# see https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html\nlibrary(ggthemes) # for colour pallet \"Tableau 10\"\n\n# Install devtools if not installed \n# devtools is used to install the iBats package from GitHub\nif(!require(devtools)){\n  install.packages(\"devtools\")\n}\n\n# If iBats is not installed load from Github\nif(!require(iBats)){\n  devtools::install_github(\"Nattereri/iBats\")\n}\nlibrary(iBats)\n\n###\n\n\n# Add data and time information to the iBats statics bat survey data set using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\ngraph_data <- statics_plus %>%\n  group_by(Species, Month) %>%\n  tally()\n\n\nggplot(graph_data, aes(area = n, fill = Month, label = Species, subgroup = Month)) +\n  scale_fill_tableau(palette = \"Tableau 10\") + # \n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(\n    place = \"centre\", grow = T, alpha = 0.9, colour =\n      \"grey20\", min.size = 0\n  ) +\n  geom_treemap_text(\n    colour = \"grey90\", place = \"topleft\", fontface = \"italic\",\n    reflow = T, min.size = 0, alpha = 0.9\n  ) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n\n\n\n\n\nFigure 5: Species and Month with the Area as the Number of Passes"
  },
  {
    "objectID": "visualisation.html#identifying-roosts",
    "href": "visualisation.html#identifying-roosts",
    "title": "Visualisation",
    "section": "5 Identifying Roosts",
    "text": "5 Identifying Roosts\n\n5.1 Evening Bats and Roost Potential\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n# Add roost emergence times adapted from (Andrews and Pearson, 2022)\nstatics_plus <- dplyr::left_join(statics_plus, Andrews, by = \"Species\")\n\n# Graph text\nyLab <- \"Time before and after sunset (mins)\"\nCaption <- \"Vertical dotted line represents sunset \\nHorizontal bars are emergence times from (Andrews and Pearson, 2022)\"\n\n# Just choose Observations 90 mins or less after sunset\ngraph_data <- statics_plus %>%\n  filter(post_set_min <= 90)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(x = Species, y = post_set_min, fill = Species)) +\n  geom_linerange(aes(x = Species, ymin = firstExit95, ymax = lastExit95),\n    size = 3, colour = \"floralwhite\"\n  ) +\n  geom_jitter(size = 3, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = 0, linetype = \"dotted\", colour = \"floralwhite\", linewidth = 2) +\n  facet_grid(Description ~ ., scales = \"free_y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = yLab,\n    caption = Caption\n  ) +\n  scale_y_continuous(breaks = c(-30, -15, 0, 15, 30, 45, 60, 75, 90, 105), limits = c(-30, 105)) +\n  coord_flip() +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.caption = element_text(colour = \"grey30\", face = \"bold\"), # white\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(colour = \"grey30\", size = 12),\n    axis.text.x = element_text(hjust = 1, colour = \"grey30\", face = \"bold\"),\n    axis.text.y = element_text(colour = \"grey30\", face = \"bold.italic\"),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"), # Bold facet names\n    panel.background = element_rect(fill = \"midnightblue\"),\n    panel.grid.major.x = element_line(colour = \"transparent\", linetype = \"dotted\"), # grey70\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.background = element_rect(fill = \"transparent\"), # grey70\n    axis.ticks = element_blank(),\n    strip.background = element_rect(fill = \"black\")\n  )\n\n\n\n\n\nFigure 6: Bats Observed Around Dusk and Roost Potential\n\n\n\n\n\n\n5.2 Dawn Bats and Roost Potential\n\n\nShow the code\n# List of bat common names and the scientific names\nBatCommon <- c(\n  \"Barbastella barbastellus\" = \"Barbastelle\",\n  \"Myotis alcathoe\" = \"Alcathoe\",\n  \"Myotis bechsteinii\" = \"Bechstein's\",\n  \"Myotis brandtii\" = \"Brandt's\",\n  \"Myotis daubentonii\" = \"Daubenton's\",\n  \"Myotis mystacinus\" = \"Whiskered\",\n  \"Myotis spp.\" = \"Myotis\",\n  \"Rhinolophus ferrumequinum\" = \"Greater horseshoe\",\n  \"Rhinolophus hipposideros\" = \"Lesser horseshoe\",\n  \"Nyctalus leisleri\" = \"Leisler's\",\n  \"Plecotus auritus\" = \"Brown long-eared\",\n  \"Plecotus austriacus\" = \"Grey long-eared\",\n  \"Pipistrellus nathusii\" = \"Nathusius pipistrelle\",\n  \"Myotis nattereri\" = \"Natterer's\",\n  \"Nyctalus noctula\" = \"Noctule\",\n  \"Nyctalus spp.\" = \"Noctule or Leisler's\",\n  \"Eptesicus serotinus\" = \"Serotine\",\n  \"Pipistrellus pipistrellus\" = \"Common pipistrelle\",\n  \"Pipistrellus pygmaeus\" = \"Soprano pipistrelle\",\n  \"Pipistrellus spp.\" = \"Pipistrelle\",\n  \"Plecotus spp.\" = \"Long-eared\")\n\n# From Scientific name create a Common Name Vector \nstatics$Common <-  unname(BatCommon[statics$Species])\n\n# Add data and time information to the statics data using theiBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n# Add roost emergence times adapted from (Andrews and Pearson, 2022)\nstatics_plus <- dplyr::left_join(statics_plus, Andrews, by = \"Species\")\n\n# From Scientific name create a Common Name Vector \nstatics_plus$Common <-  unname(BatCommon[statics_plus$Species])\n\n# Graph text\nyLab <- \"Time before and after sunrise (mins)\"\nCaption <- \"Vertical dotted line represents sunrise\"\n\n# Just choose Observations 90 mins or less after sunset\ngraph_data <- statics_plus %>%\n  filter(pre_rise_min <= 90) %>%\n  mutate(pre_rise_min = pre_rise_min * (-1)) # For correct orientation on the graph\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(x = Common, y = pre_rise_min, fill = Species)) +\n  geom_jitter(size = 3, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = 0, linetype = \"dotted\", colour = \"floralwhite\", linewidth = 2) +\n  facet_grid(Description ~ ., scales = \"free_y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = yLab,\n    caption = Caption\n  ) +\n  scale_y_continuous(breaks = c(-90, -75, -60, -45, -30, -15, 0, 15), limits = c(-90, 15)) +\n  coord_flip() +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.caption = element_text(colour = \"grey30\", face = \"bold\"), # white\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(colour = \"grey30\", size = 12),\n    axis.text.x = element_text(hjust = 1, colour = \"grey30\", face = \"bold\"),\n    axis.text.y = element_text(colour = \"grey30\", face = \"bold.italic\"),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"), # Bold facet names\n    panel.background = element_rect(fill = \"midnightblue\"),\n    panel.grid.major.x = element_line(colour = \"transparent\", linetype = \"dotted\"), # grey70\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.background = element_rect(fill = \"transparent\"), # grey70\n    axis.ticks = element_blank(),\n    strip.background = element_rect(fill = \"black\")\n  )\n\n\n\n\n\nFigure 7: Bats Observed Around Dawn and Roost Potential"
  },
  {
    "objectID": "visualisation.html#standard-graphs",
    "href": "visualisation.html#standard-graphs",
    "title": "Visualisation",
    "section": "6 Standard Graphs",
    "text": "6 Standard Graphs\nBar charts (Figure 8 (a)) and pie charts (Figure 8 (b)) are part of the standard repertoire for reporting bat surveys. These flat graphs can be hard to interpret when there are a large number of variables to display, as in this case with the number of different species in Figure 8; and/or a high value, such as the Pipistrellus pipistrellus species in Figure 8, that can hide other values. These bar and pie charts are more effective when they are interactive, as demonstrated on the “Interactive Reports” page2.\n\n\nShow the code\ngraph_data <- statics %>%\n  group_by(Species) %>%\n  count()\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\ng1 <- ggplot(graph_data, aes(x = \"\", y = n, fill = Species)) +\n  geom_bar(width = 1, stat = \"identity\") +\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = \"Bat Pass Observations (Nr)\",\n    fill = \"Species\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"right\",\n    legend.text = element_text(face = \"italic\"),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    strip.text = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_blank()\n  )\n\n\ng2 <- ggplot(graph_data, aes(x = reorder(Species, n), y = n, fill = Species)) +\n  geom_col() +\n  scale_y_continuous(label = comma) +\n  coord_flip() +\n  scale_fill_manual(values = graph_bat_colours) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\", # No legend\n    axis.text.x = element_text(size = 12, angle = 0, face = \"bold\"),\n    axis.text.y = element_text(size = 12, face = \"bold.italic\"), # bat names italic\n    axis.title.y = element_blank(), # no y title (just bat names)\n    axis.title.x = element_blank(), # no x title\n    panel.grid.major = element_blank(), # remove grid lines\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey20\", linewidth = 0.1, linetype = \"dashed\")\n  )\n\ng1\ng2\n\n\n\n\n\n\n\n\n(a) Pie Chart\n\n\n\n\n\n\n\n(b) Bar Chart\n\n\n\n\nFigure 8: Conventional Graphs used for Reporting Bat Surveys"
  }
]