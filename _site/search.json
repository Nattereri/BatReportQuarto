[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Reporting Bat Survey Data compliment the data science chapters of the forthcoming BCT Bat Survey Guidelines 4th Edition. Unlike the guidelines it has the R code that make the analysis; which can be copied an used.\nThese pages were written by Steve Markham, Director and Data Scientist at Marquis & Lord Ltd. over my career I have developed and applied software applications to water management and more recently, the last 15 years, applied data science to a wide range of projects using the R software environment. Since 1997 I have held a Natural England Roost Visitors Licence and have undertaken numerous commercial bat projects and voluntary bat work, including being a Trustee of the Bat Conservation Trust. I have been on the editorial board of all the editions of the Bat Survey Guidelines were I have encouraged ecologists to make the most of their bat survey data; these web pages hopefully make it easier to do this, and more rewarding - its good for bats!\nThis web site also introduces the iBats package. iBats is a package with a range of functions that hopefully enhance and smooth the data science of bat data collected from bat detectors post sound identification.\nThe iBats name is borrowed from Prof Kate Jones and follows in the citizen science spirit of the original iBats."
  },
  {
    "objectID": "aggregation.html",
    "href": "aggregation.html",
    "title": "Aggregation",
    "section": "",
    "text": "over a given time period, or\nspatially for locations or a factor related to a location (e.g. woodland)\n\nThe simplest form of aggregation is a count of bats1. The bat survey data statics in the iBats package has 6,930 bat observations; a random selection of 5 rows is shown in Table 1.\n\n\nShow the code\nstatics %>% # statics is a tidy data set from the iBats package\n  sample_n(5) %>% \n  arrange(DateTime) %>% \n  # Table made with gt\n  gt()\n\n\n\n\n\n\nTable 1:  Statics Bat Survey Data (5 random selected rows) \n  \n  \n    \n      Description\n      DateTime\n      Species\n      Longitude\n      Latitude\n    \n  \n  \n    Static 4\n2016-06-07 22:09:14\nPipistrellus pipistrellus\n-3.591778\n50.33133\n    Static 4\n2016-06-11 02:39:36\nNyctalus noctula\n-3.591798\n50.33102\n    Static 4\n2016-08-04 23:02:59\nPipistrellus pipistrellus\n-3.591748\n50.33136\n    Static 4\n2016-08-05 02:34:35\nBarbastella barbastellus\n-3.591748\n50.33136\n    Static 4\n2016-08-28 04:46:09\nPipistrellus pipistrellus\n-3.591798\n50.33136\n  \n  \n  \n\n\n\n\n\n\n\nShow the code\nstatics %>%\n  group_by(Species) %>% \n  count() %>% \n  #arrange descending\n  arrange(desc(n)) %>% \n  # rename n as count\n  rename(`Bat Species` = Species, count = n) %>% \n  knitr::kable()\n\n\n\n\nTable 2: A Count of Bats Grouped by Species\n\n\nBat Species\ncount\n\n\n\n\nPipistrellus pipistrellus\n4972\n\n\nMyotis spp.\n435\n\n\nBarbastella barbastellus\n419\n\n\nNyctalus noctula\n315\n\n\nPipistrellus spp.\n283\n\n\nRhinolophus ferrumequinum\n160\n\n\nPlecotus spp.\n136\n\n\nPipistrellus pygmaeus\n86\n\n\nRhinolophus hipposideros\n73\n\n\nPipistrellus nathusii\n32\n\n\nEptesicus serotinus\n12\n\n\nNyctalus leisleri\n3\n\n\nMyotis nattereri\n2\n\n\nNyctalus spp.\n2\n\n\n\n\n\n\nMore informative tables can be made by adding meta data such as the Month and Year of the observations. This is easy done on a tidy data conforming to the minimal data requirement with the date_time_info function in the iBats package. Table 3 shows the monthly count (bat passes) of Annex 2 species; .\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# statics_plus <- statics_plus %>% \n#   mutate(MonthFull = factor(MonthFull, levels = month_levels_full, ordered = T))\n\nAnnexII <- c(\"Barbastella barbastellus\", \"Rhinolophus ferrumequinum\", \"Rhinolophus hipposideros\" )\n\ntable_border <- fp_border(color=\"black\", width = 1) # from library(officer)\n\nstatics_plus %>%\n  filter(Species %in% AnnexII) %>% \n  group_by(MonthFull, Species) %>% \n  count() %>% \n  #arrange descending\n  arrange(desc(MonthFull)) %>% \n  # rename n as count\n  rename(Month = MonthFull,`Bat Species` = Species, Count = n) %>% \n flextable(col_keys = colnames(.)) %>% \n  fontsize(part = \"header\", size = 8) %>% \n    fontsize(part = \"body\", size = 8)  %>% \n      colformat_double(j = \"Count\", digits = 4, big.mark = \",\") %>% \n  width(j = c(1, 3), width = 0.6) %>% \n    width(j = 2, width = 1.7) %>% \n   merge_v(j = 1) %>% \n  border_inner_h(part=\"body\", border = table_border) %>% \n      hline_bottom(part=\"body\", border = table_border)\n\n\n\n\nTable 3:  A Count of Annex 2 Bats Grouped by Month \nMonthBat SpeciesCountOctoberBarbastella barbastellus47Rhinolophus ferrumequinum2Rhinolophus hipposideros8SeptemberBarbastella barbastellus9Rhinolophus ferrumequinum64Rhinolophus hipposideros17AugustBarbastella barbastellus109Rhinolophus ferrumequinum31Rhinolophus hipposideros23JulyBarbastella barbastellus49Rhinolophus ferrumequinum7Rhinolophus hipposideros4JuneBarbastella barbastellus198Rhinolophus ferrumequinum47Rhinolophus hipposideros11MayBarbastella barbastellus7Rhinolophus ferrumequinum9Rhinolophus hipposideros10\n\n\n\n\n\n\n\nFootnotes\n\n\nnote:- in this case it is a count of bat passes↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "A simple bat report from minimal data demonstrating literate programming with Quarto (the world beyond Excel)."
  },
  {
    "objectID": "index.html#install-r-rstudio-and-packages",
    "href": "index.html#install-r-rstudio-and-packages",
    "title": "Getting Started",
    "section": "Install R RStudio and Packages",
    "text": "Install R RStudio and Packages\n\nDownload and install the latest version of R https://cran.r-project.org/bin/windows/base/. Download the version for your operating system; R can be downloaded for Windows, Mac & Linux.\n\nIt is recommended R is used through the RStudio IDE. Download and install the latest version of RStudio from their web page https://www.rstudio.com/products/rstudio/#Desktop. Download the free desktop version.\n\n\nInstall the iBats Package from GitHub\nThe iBats package contains functions that help with the Data Science of bat survey results. To install this package use the code below in the console (see Figure ); one line at a time. The package is installed from GitHub.\n\n\n\n\ninstall.packages(\"devtools\")\n\ndevtools::install_github(\"Nattereri/iBats\")"
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Getting Started",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThese web pages were built on the shoulders of others:\nThe visualisation and analysis has been undertaken in R (R Core Team 2022) using R version 4.2.1 (2022-06-23 ucrt); R is an open-source statistical programming language.\nThis document has been produced dynamically using knitr (Xie 2022) and QUARTO, integrating the data, analysis and reporting. The analysis has undertaken a tidyverse approach (Wickham et al. 2019).\nThe graphics have been produced using the R package ggplot2 (Wickham, Chang, et al. 2022). The scales (Wickham and Seidel 2022) package improves the clarity of scales on ggplot graphics.\nThe wrangling of data was undertaken with dplyr (Wickham, François, et al. 2022) and tidyr packages. The data in csv and Excel files has been imported with readr (Wickham, Hester, and Bryan 2022) and readxl (Wickham and Bryan 2022) packages respectivily. The computation with dates and times has been accomplished with lubridate (Spinu, Grolemund, and Wickham 2021) package. Suntimes have been obtained with the suncalc (Thieurmel and Elmarhraoui 2019) package.\nThe manipulation of text was through the stringr (Wickham 2022) package. Summary statistics have been produced with the mosaic (Pruim, Kaplan, and Horton 2021) package.\nTables have been produced with knitr (Xie 2022) with kableExtra (Zhu 2021), gt (Xie 2022) and the flextable (Gohel 2022) packages. The broman (Broman 2022) package provided some useful R functions."
  },
  {
    "objectID": "meta.html",
    "href": "meta.html",
    "title": "Meta Data",
    "section": "",
    "text": "Many columns would be added to a tidy data set so it becomes more useful for analysis; some of these are described below."
  },
  {
    "objectID": "meta.html#date-and-time-information",
    "href": "meta.html#date-and-time-information",
    "title": "Meta Data",
    "section": "Date and Time Information",
    "text": "Date and Time Information\n\nThe Night\nBats are active through the night; the date of the night is the date at sunset and lasts until sunrise the morning of the following day. The Night is a variable column that is added to the tidy data; it is useful convention that helps avoid the confusion of having contiguous bat activity over two dates.\nThe Night can be obtained from the iBats package using the date_time_info function. It requires a data.frame or tibble with a DateTime column, the iana1 time zone can be specified; the default is Europe/London.\nThe code below takes the statics set from the iBats package and adds the Night column, Table 1 shows a random selection of 5 rows from the statics data.\n\n\nShow the code\nstatics_with_night <- iBats::date_time_info(statics)\n\n\n\n\nShow the code\nstatics_with_night %>% \n  sample_n(5) %>% \n  select(Description, Night, DateTime, Species) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = Night\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"midnightblue\"),\n      cell_text(color = \"white\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = Night\n    )\n  )\n\n\n\n\n\n\nTable 1:  The Night from the DateTime Column \n  \n  \n    \n      Description\n      Night\n      DateTime\n      Species\n    \n  \n  \n    Static 3\n2016-09-17\n2016-09-17 22:48:16\nRhinolophus ferrumequinum\n    Static 4\n2016-07-30\n2016-07-31 00:35:53\nPipistrellus pipistrellus\n    Static 5\n2016-08-26\n2016-08-26 23:02:54\nPipistrellus pipistrellus\n    Static 5\n2016-08-25\n2016-08-26 05:20:18\nMyotis spp.\n    Static 4\n2016-08-04\n2016-08-05 01:54:27\nPipistrellus pipistrellus\n  \n  \n  \n\n\n\n\n\n\n\nOther Date and Time Information added\nThe function iBats::date_time_info() adds other date and time information: month, year and time see Table 2 (note: not all columns are shown). Table 2 shows a random selection of 5 rows from the statics set.\n\n\nShow the code\nstatics_with_night %>% \n  sample_n(5) %>% \n  select(Description, Month, MonthFull, Year, JustTime, DateTime, Species) %>% \n  # Table made with library(gt)\n  gt() %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"normal\")\n      ),\n    locations = cells_body(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  ) %>% \n  tab_style(\n    style = list(\n      cell_fill(color = \"lightcyan\"),\n      cell_text(color = \"black\"),\n      cell_text(weight = \"bold\")\n      ),\n    locations = cells_column_labels(\n      columns = c(Month, MonthFull, Year, JustTime)\n    )\n  )\n\n\n\n\n\n\nTable 2:  Other Date and Time Information from the DateTime Column \n  \n  \n    \n      Description\n      Month\n      MonthFull\n      Year\n      JustTime\n      DateTime\n      Species\n    \n  \n  \n    Static 4\nJul\nJuly\n2016\n14:46:05\n2016-07-27 02:46:05\nPipistrellus pipistrellus\n    Static 4\nOct\nOctober\n2016\n09:22:30\n2016-10-16 21:22:30\nPipistrellus pipistrellus\n    Static 3\nMay\nMay\n2016\n12:24:43\n2016-05-28 00:24:43\nPipistrellus pipistrellus\n    Static 3\nSep\nSeptember\n2016\n10:50:26\n2016-09-17 22:50:26\nRhinolophus ferrumequinum\n    Static 4\nJul\nJuly\n2016\n13:13:28\n2016-07-29 01:13:28\nPipistrellus pipistrellus"
  },
  {
    "objectID": "reporting.html",
    "href": "reporting.html",
    "title": "1 Click Reporting",
    "section": "",
    "text": "This page shows how a bat survey report can be produced, with 1 click, from a minimal data set. It also demonstrates literate programming with Quarto the next generation of R Markdown."
  },
  {
    "objectID": "statistics.html",
    "href": "statistics.html",
    "title": "Statistics",
    "section": "",
    "text": "Statistical modeling is a method of mathematically approximating the world."
  },
  {
    "objectID": "tidy.html",
    "href": "tidy.html",
    "title": "Tidy Data",
    "section": "",
    "text": "Tidy Data is a consistent way to organise your data [@wickham_tidy_2014]. Getting your data into this format requires some initial work, but that effort pays off in the long term. Once you have tidy data you will spend less time wrangling data from one representation to another, allowing you to spend more time on the analytic questions at hand. Unfortunately, there is a rule of thumb; 80% of time doing data science is spent wrangling data; particularly the effort required in sorting and rearranging the data into the tidy and therefore usable format.\nThere are three interrelated rules which make a data set tidy, such as the data shown in Table 1:"
  },
  {
    "objectID": "tidy.html#minimal-data-requirement",
    "href": "tidy.html#minimal-data-requirement",
    "title": "Tidy Data",
    "section": "Minimal Data Requirement",
    "text": "Minimal Data Requirement\nTo undertake meaningful data analysis, it is recommended that data collected from bat activity surveys is wrangled into tidy data that has the following five variables (columns) as a minimum:\n\nDescription\nDateTime\nSpecies\nLatitude\nLongitude\n\nThe rationale for these variables is as follows:\nDescription a column to help identify the observation for example a location, surveyor or survey number.\nDateTime: the date and time of the bat observation to BS ISO 8601:2004 i.e. yyyymmdd hh:mm:ss. The use of BS ISO 8601:2004 prevents confusion over the date format 1 . Reference bat activity to the local time and specifying an iana2 time zone allows for daylight saving times to considered; the iana code for the UK is Europe/London.\nSpecies: bat species names should follow the “binomial nomenclature” from the International Code of Zoological Nomenclature (ICZN)3 - e.g. Barbastella barbastellus, Eptesicus serotinus, etc… A column of local common names can always be added to the tidy data, i.e. in a separate column see Appendix 8. Sound analysis may not be able to distinguish calls to species level; in practice some calls may only be identified to genus or less; Table @ref(tab:table04) gives a practical and consistent guide to naming4.\nLongitude and Latitude: World Geodetic System 19845 (WGS84); as used by Google earth. A digital, numeric, format should be used. Any other spatial reference system can be used (e.g. British National Grid Easting/Northing), as this can be stored as an extra column in the tidy data, the prerequisite is that the reference system can be converted to WGS84; which is the case for most national or state co-ordinate systems. Using a global co-ordinate system such as WSG84 give access to the many open-source application programming interfaces (API) available that assist with data analysis (e.g. assessing sunset and sunrise times or the adjustment to daylight saving)."
  },
  {
    "objectID": "tidy.html#making-bat-data-tidy",
    "href": "tidy.html#making-bat-data-tidy",
    "title": "Tidy Data",
    "section": "Making Bat Data Tidy",
    "text": "Making Bat Data Tidy\nResults of bat sound analysis can be untidy:\n\ntwo or more species in one cell (see Table 2);\ncount of bats (Table 4); and,\ntwo of more columns with species of same date and time.\nLongitude and Latitude columns with missing values\n\nWhile the bat survey results shown in Table 1 is an example of a tidy data set; the data sets in Table 2 and Table 4 are untidy and would need to be made tidy to undertake analysis.\nData preparation is not just a first step but must be repeated many times over during analysis; as new problems come to light, or new data is collected. Apart from making bat data into a tidy format, there are many other tasks involved in cleaning data: parsing dates and numbers, identifying missing values, correcting character encodings, matching similar but not identical values (such as those created by typos).\n\n\nShow the code\ntidydata <- statics %>% # statics is a tidy data set from the iBats package\n  #select(DateTime, Species, Latitude, Longitude, Description) %>% \n  rename(`Date and Time` = DateTime,  `Bat Species` = Species) %>% \n  sample_n(10) %>% \n  arrange(`Date and Time`)\n\n# Table made with knitr::kable\nknitr::kable(tidydata)\n\n\n\n\nTable 1: Tidy Bat data\n\n\n\n\n\n\n\n\n\nDescription\nDate and Time\nBat Species\nLongitude\nLatitude\n\n\n\n\nStatic 4\n2016-06-13 01:50:48\nPipistrellus pipistrellus\n-3.591858\n50.33123\n\n\nStatic 4\n2016-07-27 01:30:04\nPipistrellus pipistrellus\n-3.591748\n50.33133\n\n\nStatic 5\n2016-07-30 00:58:26\nPipistrellus spp.\n-3.590738\n50.33105\n\n\nStatic 4\n2016-07-30 01:27:32\nPipistrellus pipistrellus\n-3.591878\n50.33141\n\n\nStatic 4\n2016-07-31 01:08:12\nPipistrellus pipistrellus\n-3.591848\n50.33130\n\n\nStatic 4\n2016-08-04 23:11:37\nPipistrellus pipistrellus\n-3.591748\n50.33136\n\n\nStatic 4\n2016-08-05 01:58:13\nPipistrellus pipistrellus\n-3.591748\n50.33136\n\n\nStatic 2\n2016-08-15 21:45:25\nPipistrellus pipistrellus\n-3.592583\n50.33323\n\n\nStatic 4\n2016-08-25 01:58:59\nPipistrellus pipistrellus\n-3.591768\n50.33133\n\n\nStatic 2\n2016-10-10 19:39:35\nPlecotus spp.\n-3.592583\n50.33323\n\n\n\n\n\n\n\nToo Many Species in a Cell\n\n\nShow the code\nSpecies <- c(\"PIPPYG\", \n             \"PIPPYG, NYCLEI\", \n             \"PIPPYG\", \n             \"PIPPIP, PIPPYG, NYCLEI\", \n             \"PIPPIP\")\n\nDateTime <- c(\"2019-10-03 20:55:30\", \n              \"2019-10-03 20:58:30\",\n              \"2019-10-03 21:15:30\",\n              \"2019-10-03 21:25:30\",\n              \"2019-10-03 21:35:30\")\n\nuntidy1 <- tibble(DateTime, Species)\n\n# Table made with knitr::kable\nknitr::kable(untidy1)\n\n\n\n\nTable 2: Untidy Bat Data Too Many Species in a Cell\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nPIPPYG, NYCLEI\n\n\n2019-10-03 21:15:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nPIPPIP, PIPPYG, NYCLEI\n\n\n2019-10-03 21:35:30\nPIPPIP\n\n\n\n\n\n\nToo many species in a cell, as in Table 2, can be made tidy by expanding the data so each species observed is in it’s own row; as shown below in Table 3\n\n\nShow the code\ntidied1 <- untidy1 %>% \n  tidyr::separate_rows(Species)\n\n# Table made with knitr::kable\nknitr::kable(tidied1)\n\n\n\n\nTable 3: Tidied Bat Data from Too Many Species in a Cell\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nPIPPYG\n\n\n2019-10-03 20:58:30\nNYCLEI\n\n\n2019-10-03 21:15:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nPIPPIP\n\n\n2019-10-03 21:25:30\nPIPPYG\n\n\n2019-10-03 21:25:30\nNYCLEI\n\n\n2019-10-03 21:35:30\nPIPPIP\n\n\n\n\n\n\n\n\nA Column of Bat Counts\n\n\nShow the code\nDateTime <- c(\"2019-10-05 20:35:15\", \n              \"2019-10-05 20:38:30\",\n              \"2019-10-05 20:49:40\",\n              \"2019-10-05 21:05:15\",\n              \"2019-10-05 21:15:30\",\n              \"2019-10-05 21:25:45\")\n\nSpecies <- c(\"Pipistrellus pipistrellus\", \n             \"Pipistrellus pygmaeus\", \n             \"Nyctalus noctula\",\n             \"Pipistrellus pipistrellus\", \n             \"Pipistrellus pygmaeus\", \n             \"Pipistrellus pipistrellus\")\n\nNumber <- c(1, 1, 2, 1, 3, 1)\n\nuntidy2 <- tibble(DateTime, Species, Number)\n\n# Table made with knitr::kable\nknitr::kable(untidy2)\n\n\n\n\nTable 4: Untidy Bat Data a Column of Counting the Bats\n\n\nDateTime\nSpecies\nNumber\n\n\n\n\n2019-10-05 20:35:15\nPipistrellus pipistrellus\n1\n\n\n2019-10-05 20:38:30\nPipistrellus pygmaeus\n1\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n2\n\n\n2019-10-05 21:05:15\nPipistrellus pipistrellus\n1\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n3\n\n\n2019-10-05 21:25:45\nPipistrellus pipistrellus\n1\n\n\n\n\n\n\nA count of species, as in Table 4, can be made tidy by un-counting the data so each species observed is in it’s own row; as shown below in Table 5\n\n\nShow the code\ntidied2 <- untidy2 %>% \n  tidyr::uncount(Number)\n\n# Table made with knitr::kable\nknitr::kable(tidied2)\n\n\n\n\nTable 5: Tidied Bat Data with the Column Bats Un-counted\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-05 20:35:15\nPipistrellus pipistrellus\n\n\n2019-10-05 20:38:30\nPipistrellus pygmaeus\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n\n\n2019-10-05 20:49:40\nNyctalus noctula\n\n\n2019-10-05 21:05:15\nPipistrellus pipistrellus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-05 21:25:45\nPipistrellus pipistrellus\n\n\n\n\n\n\n\n\nTwo or More Columns of Bat Species\n\n\nShow the code\nSpecies <- c(\"Common pipistrelle\", \n             \"Soprano pipistrelle\", \n             \"Common pipistrelle\", \n             \"Soprano pipistrelle\", \n             \"Common pipistrelle\")\n\nSpecies2nd <- c(\"\", \n                \"Noctule\", \n                \"\", \n                \"Common pipistrelle\", \n                \"Common pipistrelle\")\n\nSpecies3rd <- c(\"\", \n                \"\", \n                \"\", \n                \"Noctule\", \n                \"\")\n\nDateTime <- c(\"2019-10-04 20:35:15\", \n              \"2019-10-04 20:38:30\",\n              \"2019-10-04 21:05:15\",\n              \"2019-10-04 21:15:30\",\n              \"2019-10-04 21:25:45\")\n\nuntidy3 <- tibble(DateTime, Species, Species2nd, Species3rd)\n\n# Table made with knitr::kable\nknitr::kable(untidy3)\n\n\n\n\nTable 6: Two or More Columns of Bat Species\n\n\n\n\n\n\n\n\nDateTime\nSpecies\nSpecies2nd\nSpecies3rd\n\n\n\n\n2019-10-04 20:35:15\nCommon pipistrelle\n\n\n\n\n2019-10-04 20:38:30\nSoprano pipistrelle\nNoctule\n\n\n\n2019-10-04 21:05:15\nCommon pipistrelle\n\n\n\n\n2019-10-04 21:15:30\nSoprano pipistrelle\nCommon pipistrelle\nNoctule\n\n\n2019-10-04 21:25:45\nCommon pipistrelle\nCommon pipistrelle\n\n\n\n\n\n\n\nSeveral columns of species, as in Table 6, can be made tidy by un-counting the data so each species observed is in it’s own row; as shown below in Table 7.\n\n\nShow the code\n# Select Species column and remove (Species2nd & Species3rd)\ndata1 <- untidy3 %>% \n    select(-Species2nd, -Species3rd)\n\n# Select Species2nd column and remove (Species & Species3rd)\ndata2 <- untidy3 %>% \n  select(-Species, -Species3rd) %>% \n  filter(Species2nd != \"\") %>% # Remove blank rows\n  rename(Species = Species2nd) # Rename column\n\n# Select Species3rd column and remove (Species & Species2nd)\ndata3 <- untidy3 %>% \n  select(-Species, -Species2nd) %>% \n  filter(Species3rd != \"\") %>% # Remove blank rows\n  rename(Species = Species3rd) # Rename column\n\n#Add the datasets together into one \ntidied3 <- dplyr::bind_rows(data1, data2, data3)\n\n\n# Table made with knitr::kable\nknitr::kable(tidied3)\n\n\n\n\nTable 7: Tidied Bat Data with Two or More Columns put into One\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-04 20:35:15\nCommon pipistrelle\n\n\n2019-10-04 20:38:30\nSoprano pipistrelle\n\n\n2019-10-04 21:05:15\nCommon pipistrelle\n\n\n2019-10-04 21:15:30\nSoprano pipistrelle\n\n\n2019-10-04 21:25:45\nCommon pipistrelle\n\n\n2019-10-04 20:38:30\nNoctule\n\n\n2019-10-04 21:15:30\nCommon pipistrelle\n\n\n2019-10-04 21:25:45\nCommon pipistrelle\n\n\n2019-10-04 21:15:30\nNoctule\n\n\n\n\n\n\n\n\nConvert Bat Names to Scientific\nTable 3 is still untidy because the bat species are represented as codes and not in a binomial nomenclature(scientific name). The iBats::make_scientific() function can take a named vector of codes and the scientific name; such as the BatScientific vector below. The case of the bat name codes are ignored; they are all converted to lower case.\n\n\nShow the code\nBatScientific <- c(\"nyclei\" = \"Nyctalus leisleri\",\n                   \"nycnoc\" = \"Nyctalus noctula\",\n                   \"pippip\" = \"Pipistrellus pipistrellus\",\n                   \"pipnat\" = \"Pipistrellus nathusii\",\n                   \"pippyg\" = \"Pipistrellus pygmaeus\",\n                   \"45 pip\" = \"Pipistrellus pipistrellus\",\n                   \"55 pip\" = \"Pipistrellus pygmaeus\",\n                   \"bleb\" = \"Plecotus auritus\",\n                   # If already a scientific name keep it\n                   \"myotis daubentonii\" = \"Myotis daubentonii\") \n\n\nThe BatScientific vector is then used to covert the survey vector of bat names (the Species column in Table 3) so they are all scientific; using the iBats::make_scientific() function. The BatScientific can be expanded to cover many names and codes, if there are duplicate names or codes a conversion will not take place for that name or code. The tidied data with scientific species names is shown in Table 8\n\n\nShow the code\ntidied1$Species <- iBats::make_scientific(BatScientific, tidied1$Species)\n\n\n\n\nShow the code\n# Table made with knitr::kable\nknitr::kable(tidied1)\n\n\n\n\nTable 8: Tidied Bat Data with Scientific Names\n\n\nDateTime\nSpecies\n\n\n\n\n2019-10-03 20:55:30\nPipistrellus pygmaeus\n\n\n2019-10-03 20:58:30\nPipistrellus pygmaeus\n\n\n2019-10-03 20:58:30\nNyctalus leisleri\n\n\n2019-10-03 21:15:30\nPipistrellus pygmaeus\n\n\n2019-10-03 21:25:30\nPipistrellus pipistrellus\n\n\n2019-10-03 21:25:30\nPipistrellus pygmaeus\n\n\n2019-10-03 21:25:30\nNyctalus leisleri\n\n\n2019-10-03 21:35:30\nPipistrellus pipistrellus"
  },
  {
    "objectID": "visualisation.html",
    "href": "visualisation.html",
    "title": "Visualisation",
    "section": "",
    "text": "A good visualisation tells a story, removing the noise from the data and illuminating the useful information. Visualise to present data to a lay audience, it also helps interpretation during analysis within the survey team."
  },
  {
    "objectID": "visualisation.html#bat-colours",
    "href": "visualisation.html#bat-colours",
    "title": "Visualisation",
    "section": "Bat Colours",
    "text": "Bat Colours\nTo help with accessibility it is recommended that a consistent colour is used for each species throughout the report and the colours used are readable to people with a visual impairment. Unfortunately, accessibility for the visually impaired is challenging when more than 8 or 10 colours are used; if this is the case consider separating the visualisation into different components, creating more than one graph or just highlighting the key species.\nTable 1 lists the set of colours used for the visualisations on this page.\n\n\nShow the code\nbat_colours_sci <- c(\"Barbastella barbastellus\" = \"#1f78b4\", \n                     \"Myotis alcathoe\" = \"#a52a2a\",\n                     \"Myotis bechsteinii\" = \"#7fff00\",\n                     \"Myotis brandtii\" = \"#b2df8a\", \n                     \"Myotis mystacinus\" = \"#6a3d9a\", \n                     \"Myotis nattereri\" = \"#ff7f00\", \n                     \"Myotis daubentonii\" = \"#a6cee3\", \n                      \"Myotis spp.\" = \"#bcee68\",\n                      \"Plecotus auritus\" = \"#8b0000\", \n                      \"Plecotus spp.\" = \"#8b0000\", \n                      \"Plecotus austriacus\" = \"#000000\",\n                      \"Pipistrellus pipistrellus\" = \"#ffff99\", \n                      \"Pipistrellus nathusii\" = \"#8a2be2\", \n                      \"Pipistrellus pygmaeus\" = \"#b15928\", \n                      \"Pipistrellus spp.\" = \"#fdbf6f\", \n                      \"Rhinolophus ferrumequinum\" = \"#e31a1c\", \n                      \"Rhinolophus hipposideros\" = \"#33a02c\", \n                      \"Nyctalus noctula\" = \"#cab2d6\", \n                      \"Nyctalus leisleri\" = \"#fb9a99\", \n                      \"Nyctalus spp.\" = \"#eee8cd\", \n                      \"Eptesicus serotinus\" = \"#008b8b\")\n\nbat_colour_table <- tibble(names(bat_colours_sci), unname(bat_colours_sci))\n\ncolnames(bat_colour_table) <- c(\"Scientific Name\", \"Colour (Hex)\")\n\nbat_colour_table %>% \n  # Table made with library(flextable)\n    flextable(col_keys = colnames(.)) %>% \n    bold(part = \"header\") %>% \n    autofit(add_w = 0.1, add_h = 0.1) %>% \n    #bg(bg = \"black\", part = \"header\") %>% \n    bg(j = 2, i = 1, bg = bat_colour_table$`Colour (Hex)`[1], part = \"body\") %>% \n    bg(j = 2, i = 2, bg = bat_colour_table$`Colour (Hex)`[2], part = \"body\") %>% \n    bg(j = 2, i = 3, bg = bat_colour_table$`Colour (Hex)`[3], part = \"body\") %>% \n    bg(j = 2, i = 4, bg = bat_colour_table$`Colour (Hex)`[4], part = \"body\") %>% \n    bg(j = 2, i = 5, bg = bat_colour_table$`Colour (Hex)`[5], part = \"body\") %>% \n    bg(j = 2, i = 6, bg = bat_colour_table$`Colour (Hex)`[6], part = \"body\") %>% \n    bg(j = 2, i = 7, bg = bat_colour_table$`Colour (Hex)`[7], part = \"body\") %>% \n    bg(j = 2, i = 8, bg = bat_colour_table$`Colour (Hex)`[8], part = \"body\") %>% \n    bg(j = 2, i = 9, bg = bat_colour_table$`Colour (Hex)`[9], part = \"body\") %>% \n    bg(j = 2, i = 10, bg = bat_colour_table$`Colour (Hex)`[10], part = \"body\") %>% \n    bg(j = 2, i = 11, bg = bat_colour_table$`Colour (Hex)`[11], part = \"body\") %>% \n    color(j = 2, i = 11, color = \"white\", part = \"body\") %>% \n    bg(j = 2, i = 12, bg = bat_colour_table$`Colour (Hex)`[12], part = \"body\") %>% \n    bg(j = 2, i = 13, bg = bat_colour_table$`Colour (Hex)`[13], part = \"body\") %>% \n    bg(j = 2, i = 14, bg = bat_colour_table$`Colour (Hex)`[14], part = \"body\") %>% \n    bg(j = 2, i = 15, bg = bat_colour_table$`Colour (Hex)`[15], part = \"body\") %>% \n    bg(j = 2, i = 16, bg = bat_colour_table$`Colour (Hex)`[16], part = \"body\") %>% \n    bg(j = 2, i = 17, bg = bat_colour_table$`Colour (Hex)`[17], part = \"body\") %>% \n    bg(j = 2, i = 18, bg = bat_colour_table$`Colour (Hex)`[18], part = \"body\") %>% \n    bg(j = 2, i = 19, bg = bat_colour_table$`Colour (Hex)`[19], part = \"body\") %>% \n    bg(j = 2, i = 20, bg = bat_colour_table$`Colour (Hex)`[20], part = \"body\") %>% \n    bg(j = 2, i = 21, bg = bat_colour_table$`Colour (Hex)`[21], part = \"body\") %>% \n   # color(color = \"white\", part = \"header\") %>% \n    align(align = \"center\", part = \"header\" ) %>% \n    align(j = 2, align = \"right\", part = \"body\") %>% \n    italic(j = 1, italic = TRUE, part = \"body\") \n\n\n\n\nTable 1:  Bat Name and Colour \nScientific NameColour (Hex)Barbastella barbastellus#1f78b4Myotis alcathoe#a52a2aMyotis bechsteinii#7fff00Myotis brandtii#b2df8aMyotis mystacinus#6a3d9aMyotis nattereri#ff7f00Myotis daubentonii#a6cee3Myotis spp.#bcee68Plecotus auritus#8b0000Plecotus spp.#8b0000Plecotus austriacus#000000Pipistrellus pipistrellus#ffff99Pipistrellus nathusii#8a2be2Pipistrellus pygmaeus#b15928Pipistrellus spp.#fdbf6fRhinolophus ferrumequinum#e31a1cRhinolophus hipposideros#33a02cNyctalus noctula#cab2d6Nyctalus leisleri#fb9a99Nyctalus spp.#eee8cdEptesicus serotinus#008b8b"
  },
  {
    "objectID": "visualisation.html#time-bats-were-active",
    "href": "visualisation.html#time-bats-were-active",
    "title": "Visualisation",
    "section": "Time Bats Were Active",
    "text": "Time Bats Were Active\nFigure 1 illustrates bat activity through one night near an Oak tree in the River Tavy valley, Devon. Rather than depicting a bat pass the time the bat was present is shown. The y-axis is expanded to spread the bat activity making the graph more readable.\nThe data used TavyOak is from the iBats package. The bat species colour for the graph were made using the iBats::bat_colours() function; this provided the colour values used by ggplot's manual scale function scale_fill_manual().\n\n\nShow the code\nbat_colours_sci <- c(\n  \"Barbastella barbastellus\" = \"#1f78b4\",\n  \"Myotis alcathoe\" = \"#a52a2a\",\n  \"Myotis bechsteinii\" = \"#7fff00\",\n  \"Myotis brandtii\" = \"#b2df8a\",\n  \"Myotis mystacinus\" = \"#6a3d9a\",\n  \"Myotis nattereri\" = \"#ff7f00\",\n  \"Myotis daubentonii\" = \"#a6cee3\",\n  \"Myotis spp.\" = \"#bcee68\",\n  \"Plecotus auritus\" = \"#8b0000\",\n  \"Plecotus spp.\" = \"#8b0000\",\n  \"Plecotus austriacus\" = \"#000000\",\n  \"Pipistrellus pipistrellus\" = \"#ffff99\",\n  \"Pipistrellus nathusii\" = \"#8a2be2\",\n  \"Pipistrellus pygmaeus\" = \"#b15928\",\n  \"Pipistrellus spp.\" = \"#fdbf6f\",\n  \"Rhinolophus ferrumequinum\" = \"#e31a1c\",\n  \"Rhinolophus hipposideros\" = \"#33a02c\",\n  \"Nyctalus noctula\" = \"#cab2d6\",\n  \"Nyctalus leisleri\" = \"#fb9a99\",\n  \"Nyctalus spp.\" = \"#eee8cd\",\n  \"Eptesicus serotinus\" = \"#008b8b\"\n)\n\n\n\n# graph anotation\ngraph_sunrise <- TavyOak$sunrise[1]\ngraph_sunset <- TavyOak$sunset[1]\n\n# graph time limits x-axis\ngraph_limit1 <- TavyOak$sunset[1] - lubridate::hours(1)\ngraph_limit2 <- TavyOak$sunrise[1] + lubridate::hours(1)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- bat_colours(TavyOak$Species, colour_vector = bat_colours_sci)\n\n\nggplot(TavyOak, aes(y = 1, x = DateTime, fill = Species, size = bat_time)) +\n  geom_jitter(shape = 21, alpha = 0.7) +\n  geom_vline(\n    xintercept = graph_sunset,\n    colour = \"brown1\",\n    linetype = \"dashed\",\n    size = 1,\n    alpha = 0.8\n  ) +\n  geom_vline(\n    xintercept = graph_sunrise,\n    colour = \"mediumblue\",\n    linetype = \"dashed\",\n    size = 1,\n    alpha = 0.8\n  ) +\n  annotate(\"text\",\n    x = graph_sunset - lubridate::minutes(20),\n    y = 1,\n    label = \"Sunset\",\n    color = \"brown1\",\n    angle = 270\n  ) +\n  annotate(\"text\",\n    x = graph_sunrise + lubridate::minutes(20),\n    y = 1,\n    label = \"Sunrise\",\n    color = \"mediumblue\",\n    angle = 270\n  ) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_size_area(max_size = 12) +\n  scale_x_datetime(\n    date_labels = \"%H:%M hrs\",\n    date_breaks = \"1 hour\",\n    limits = c(graph_limit1, graph_limit2)\n  ) +\n  labs(\n    fill = \"Species\",\n    size = \"Time Bat Was Present\\n(seconds)\",\n    y = \"For clarity activity is spread across the verstical scale\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"right\",\n    panel.grid.major.x = element_line(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 10, angle = 270),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"),\n    legend.text = element_text(face = \"italic\"),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 10)\n  )\n\n\n\n\n\nFigure 1: Time Bats Were Active Through The Night"
  },
  {
    "objectID": "visualisation.html#emergence-time-of-bats",
    "href": "visualisation.html#emergence-time-of-bats",
    "title": "Visualisation",
    "section": "Emergence Time of Bats",
    "text": "Emergence Time of Bats\nFigure 2 illustrates emergence times for UK bats based on the work of Andrews & Pearson (2022) 1.\n\n\nShow the code\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(Andrews$Species, colour_vector = bat_colours_sci)\n\nggplot(Andrews) +\n  geom_segment(aes(x = reorder(Species, -meanExit), xend = Species, y = firstExit95, yend = lastExit95), color = \"grey\", size = 2) +\n  geom_point(aes(x = reorder(Species, -meanExit), y = meanExit, fill = Species), color = \"black\", size = 5, shape = 21) +\n  scale_y_continuous(breaks = c(-20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) +\n  geom_hline(yintercept = 0, linetype = \"dashed\", colour = \"purple\", size = 1) +\n  scale_fill_manual(values = graph_bat_colours) +\n  coord_flip() +\n  labs(\n    y = \"Minutes After Sunset\",\n    caption = \"adapted from (Andrews and Pearson, 2022)\\ngrey bar is indicative of the emergence time range\\ncoloured point is the mean emergence time\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    axis.text.y = element_text(face = \"italic\"),\n    axis.title.y = element_blank(),\n    panel.grid = element_blank()\n  )\n\n\n\n\n\nFigure 2: Roost Emergence Times After Sunset"
  },
  {
    "objectID": "visualisation.html#graphing-a-count-of-bats",
    "href": "visualisation.html#graphing-a-count-of-bats",
    "title": "Visualisation",
    "section": "Graphing a Count of Bats",
    "text": "Graphing a Count of Bats\nOne of the problems with presenting a count of bat passes observed in the UK is the relative abundance of the Common Pipistrelle (Pipistrellus pipistrellus). Figure 3 tries to resolve this issue by using a log scale, not a friendly scale to the lay reader but some mitigation is achieved by placing the actual count of bat passes on the graph. Figure 3 shows the count of bat species in the\n\nDot Graph\nFigure 3 tries to resolve this issue by using a log scale, not a friendly scale for the lay reader although mitigated by placing the actual count of bat passes on the graph. Figure 3 shows the count of bat species in the statics data.\n\n\nShow the code\ngraph_data <- statics %>%\n  group_by(Species) %>%\n  count() %>%\n  # Add a graph species label; commas added with library(broman)\n  mutate(\n    total = add_commas(n),\n    label = stringr::str_c(Species, \": \", total)\n  )\n\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(y = reorder(Species, n), x = n, fill = Species)) +\n  geom_point(colour = \"black\", size = 5) +\n  geom_label_repel(\n    data = graph_data, aes(label = label),\n    nudge_y = -0.25,\n    nudge_x = ifelse(graph_data$n < 100, 0.33, -0.33),\n    alpha = 0.7\n  ) +\n  scale_fill_manual(values = graph_bat_colours) +\n  scale_x_log10(sec.axis = dup_axis()) +\n  annotation_logticks(sides = \"tb\") +\n  labs(\n    x = \"Bat Observations (Number of Passes)\",\n    caption = \"Note: Log scale used\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(size = 12, face = \"bold\"),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"),\n    axis.title.x = element_text(size = 12, face = \"bold\"),\n    axis.title.y = element_blank()\n  )\n\n\n\n\n\nFigure 3: Count of All Species Observations\n\n\n\n\n\n\nTree Map Description\n\n\nShow the code\ngraph_data <- statics %>%\n  group_by(Species, Description) %>%\n  tally()\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(area = n, fill = Species, label = Species, subgroup = Description)) +\n  scale_fill_manual(values = graph_bat_colours) +\n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(\n    place = \"centre\", grow = T, alpha = 0.9, colour =\n      \"grey20\", min.size = 0\n  ) +\n  geom_treemap_text(\n    colour = \"grey90\", place = \"topleft\", fontface = \"italic\",\n    reflow = T, min.size = 0, alpha = 0.9\n  ) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n\n\n\n\n\nFigure 4: Species and Location with the Area as the Number of Passes\n\n\n\n\n\n\nTree Map Month\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\ngraph_data <- statics_plus %>%\n  group_by(Species, Month) %>%\n  tally()\n\n\nggplot(graph_data, aes(area = n, fill = Month, label = Species, subgroup = Month)) +\n  scale_fill_tableau(palette = \"Tableau 10\") + # library(ggthemes)\n  geom_treemap(colour = \"white\", size = 2, alpha = 0.9) +\n  geom_treemap_subgroup_border(colour = \"black\", size = 5, alpha = 0.9) +\n  geom_treemap_subgroup_text(\n    place = \"centre\", grow = T, alpha = 0.9, colour =\n      \"grey20\", min.size = 0\n  ) +\n  geom_treemap_text(\n    colour = \"grey90\", place = \"topleft\", fontface = \"italic\",\n    reflow = T, min.size = 0, alpha = 0.9\n  ) +\n  theme_bw() +\n  theme(legend.position = \"none\") # No legend\n\n\n\n\n\nFigure 5: Species and Month with the Area as the Number of Passes"
  },
  {
    "objectID": "visualisation.html#identifying-roosts",
    "href": "visualisation.html#identifying-roosts",
    "title": "Visualisation",
    "section": "Identifying Roosts",
    "text": "Identifying Roosts\n\nEvening Bats and Roost Potential\n\n\nShow the code\n# Add data and time information to the statics data using the iBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n# Add roost emergence times adapted from (Andrews and Pearson, 2022)\nstatics_plus <- dplyr::left_join(statics_plus, Andrews, by = \"Species\")\n\n# Graph text\nyLab <- \"Time before and after sunset (mins)\"\nCaption <- \"Vertical dotted line represents sunset \\nHorizontal bars are emergence times from (Andrews and Pearson, 2022)\"\n\n# Just choose Observations 90 mins or less after sunset\ngraph_data <- statics_plus %>%\n  filter(post_set_min <= 90)\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(x = Species, y = post_set_min, fill = Species)) +\n  geom_linerange(aes(x = Species, ymin = firstExit95, ymax = lastExit95),\n    size = 3, colour = \"floralwhite\"\n  ) +\n  geom_jitter(size = 3, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = 0, linetype = \"dotted\", colour = \"floralwhite\", size = 2) +\n  facet_grid(Description ~ ., scales = \"free_y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = yLab,\n    caption = Caption\n  ) +\n  scale_y_continuous(breaks = c(-15, 0, 15, 30, 45, 60, 75, 90), limits = c(-15, 90)) +\n  coord_flip() +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.caption = element_text(colour = \"grey30\", face = \"bold\"), # white\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(colour = \"grey30\", size = 12),\n    axis.text.x = element_text(hjust = 1, colour = \"grey30\", face = \"bold\"),\n    axis.text.y = element_text(colour = \"grey30\", face = \"bold.italic\"),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"), # Bold facet names\n    panel.background = element_rect(fill = \"midnightblue\"),\n    panel.grid.major.x = element_line(colour = \"transparent\", linetype = \"dotted\"), # grey70\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.background = element_rect(fill = \"transparent\"), # grey70\n    axis.ticks = element_blank(),\n    strip.background = element_rect(fill = \"black\")\n  )\n\n\n\n\n\nFigure 6: Bats Observed Around Dusk and Roost Potential\n\n\n\n\n\n\nMorning Bats and Roost Potential\n\n\nShow the code\n# Add data and time information to the statics data using theiBats::date_time_info\nstatics_plus <- iBats::date_time_info(statics)\n\n# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.\nstatics_plus <- iBats::sun_night_metrics(statics_plus)\n\n# Add roost emergence times adapted from (Andrews and Pearson, 2022)\nstatics_plus <- dplyr::left_join(statics_plus, Andrews, by = \"Species\")\n\n# Graph text\nyLab <- \"Time before and after sunrise (mins)\"\nCaption <- \"Vertical dotted line represents sunrise\"\n\n# Just choose Observations 90 mins or less after sunset\ngraph_data <- statics_plus %>%\n  filter(pre_rise_min <= 90) %>%\n  mutate(pre_rise_min = pre_rise_min * (-1)) # For correct orientation on the graph\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\nggplot(graph_data, aes(x = Species, y = pre_rise_min, fill = Species)) +\n  geom_jitter(size = 3, alpha = 0.8, shape = 21) +\n  geom_hline(yintercept = 0, linetype = \"dotted\", colour = \"floralwhite\", size = 2) +\n  facet_grid(Description ~ ., scales = \"free_y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = yLab,\n    caption = Caption\n  ) +\n  scale_y_continuous(breaks = c(-90, -75, -60, -45, -30, -15, 0, 15), limits = c(-90, 15)) +\n  coord_flip() +\n  theme_bw() +\n  theme(\n    legend.position = \"none\",\n    plot.caption = element_text(colour = \"grey30\", face = \"bold\"), # white\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(colour = \"grey30\", size = 12),\n    axis.text.x = element_text(hjust = 1, colour = \"grey30\", face = \"bold\"),\n    axis.text.y = element_text(colour = \"grey30\", face = \"bold.italic\"),\n    strip.text = element_text(size = 12, face = \"bold\", colour = \"white\"), # Bold facet names\n    panel.background = element_rect(fill = \"midnightblue\"),\n    panel.grid.major.x = element_line(colour = \"transparent\", linetype = \"dotted\"), # grey70\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    plot.background = element_rect(fill = \"transparent\"), # grey70\n    axis.ticks = element_blank(),\n    strip.background = element_rect(fill = \"black\")\n  )\n\n\n\n\n\nFigure 7: Bats Observed Around Dawn and Roost Potential"
  },
  {
    "objectID": "visualisation.html#other-graphs",
    "href": "visualisation.html#other-graphs",
    "title": "Visualisation",
    "section": "Other Graphs",
    "text": "Other Graphs\n\n\nShow the code\ngraph_data <- statics %>%\n  group_by(Species) %>%\n  count()\n\n# colour values used by scale_fill_manual()\ngraph_bat_colours <- iBats::bat_colours(graph_data$Species, colour_vector = bat_colours_sci)\n\ng1 <- ggplot(graph_data, aes(x = \"\", y = n, fill = Species)) +\n  geom_bar(width = 1, stat = \"identity\") +\n  coord_polar(theta = \"y\") +\n  scale_fill_manual(values = graph_bat_colours) +\n  labs(\n    y = \"Bat Pass Observations (Nr)\",\n    fill = \"Species\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"right\",\n    legend.text = element_text(face = \"italic\"),\n    axis.text.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks = element_blank(),\n    strip.text = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank(),\n    panel.border = element_blank()\n  )\n\n\ng2 <- ggplot(graph_data, aes(x = reorder(Species, n), y = n, fill = Species)) +\n  geom_col() +\n  scale_y_continuous(label = comma) +\n  coord_flip() +\n  scale_fill_manual(values = graph_bat_colours) +\n  theme_bw() +\n  theme(\n    legend.position = \"none\", # No legend\n    axis.text.x = element_text(size = 12, angle = 0, face = \"bold\"),\n    axis.text.y = element_text(size = 12, face = \"bold.italic\"), # bat names italic\n    axis.title.y = element_blank(), # no y title (just bat names)\n    axis.title.x = element_blank(), # no x title\n    panel.grid.major = element_blank(), # remove grid lines\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey20\", size = 0.1, linetype = \"dashed\")\n  )\n\ng1\ng2\n\n\n\n\n\n\n\nFigure 8: Pie Chart\n\n\n\n\n\n\n\nFigure 9: Bar Chart"
  }
]