---
title: "Meta Data"
format: 
  html:
     code-fold: true
     code-summary: "Show the code"
number-sections: true
---

```{r}
#| include: false

library(knitr)
library(tidyverse)
library(iBats)
library(gt)

set.seed(214)

```

Meta data is information added, as a column, to the _tidy_ data.  Even with a minimum tidy data set (i.e. species, datetime and geolocation) many columns of useful meta data can be added to enhance the analysis and reporting; described below is simple meta data easily added to tidy data.

## Date and Time Information

### The *Night*

Bats are active through the night; the date of the *Night* is the date at sunset and lasts until sunrise the morning of the following day. The *Night* is a variable column that is added to the *tidy* data; it is useful convention that helps avoid the confusion of having contiguous bat activity over two dates.

The *Night* can be obtained from the *iBats* package using the `date_time_info` function. It requires a data.frame or tibble with a `DateTime` column, the *iana*[^1] time zone can be specified; the default is `Europe/London`.

[^1]: a full list of time zones can be found here <https://en.wikipedia.org/wiki/List_of_tz_database_time_zones>

The code below takes the `statics` set from the *iBats* package and adds the *Night* column, @tbl-night shows a selection of 5 rows from the `statics` data.

```{r}
#| code-fold: show


statics_with_night <- iBats::date_time_info(statics)

```

```{r}
#| label: tbl-night
#| tbl-cap: "The Night from the DateTime Column"

statics_with_night %>% 
  sample_n(5) %>% 
  select(Description, Night, DateTime, Species) %>% 
  # Table made with library(gt)
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "midnightblue"),
      cell_text(color = "white"),
      cell_text(weight = "normal")
      ),
    locations = cells_body(
      columns = Night
    )
  ) %>% 
  tab_style(
    style = list(
      cell_fill(color = "midnightblue"),
      cell_text(color = "white"),
      cell_text(weight = "bold")
      ),
    locations = cells_column_labels(
      columns = Night
    )
  )
```

### Other Date and Time Information

The function `iBats::date_time_info()` adds other date and time information: month, year and time see @tbl-other (note: not all columns are shown). @tbl-other shows a random selection of 5 rows from the `statics` set.

```{r}
#| label: tbl-other
#| tbl-cap: "Other Date and Time Information from the DateTime Column"

statics_with_night %>% 
  sample_n(5) %>% 
  select(Description, DateTime, Species, Month, MonthFull, Year, JustTime) %>% 
  # Table made with library(gt)
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "lightcyan"),
      cell_text(color = "black"),
      cell_text(weight = "normal")
      ),
    locations = cells_body(
      columns = c(Month, MonthFull, Year, JustTime)
    )
  ) %>% 
  tab_style(
    style = list(
      cell_fill(color = "lightcyan"),
      cell_text(color = "black"),
      cell_text(weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(Month, MonthFull, Year, JustTime)
    )
  )
```

## Sun Times

A useful approach for bat data analysis is to reference all bat activity (i.e. `DateTime`) to the time of sunset and sunrise for the `Night` and location(i.e. `Latitude` and `Longitude`). From this starting point, the minutes after sunset (and minutes before sunrise) that each bat activity occurred can be calculated; these can then be converted to decimal hours and integer hours so bat activity can be visualised in ways that help interpret the bat activity.

Referencing the `DateTime` of bat activity to sunset and sunrise is achieved with the use of the `suncalc` package [@R-suncalc]. The `iBats` package makes use of `suncalc` in its `sun_night_metrics` fuction; this takes a dataframe that must include the columns: `Night`, `DateTime`, `Latitude` and, `Longitude` - and calculates the following columns:

-   `sunset` - sun set time for the `Night` date and `Latitude` and, `Longitude`
-   `sunrise` - sun rise time for the `Night` date and `Latitude` and, `Longitude`
-   `post_set_min`- time in minutes the bat was observed after sun set
-   `pre_rise_min` - time in minutes the bat was observed before sun rise
-   `post_set_hr` - time in hours (decimal) the bat was observed after sun set
-   `pre_rise_hr` - time in hours (decimal) the bat was observed before sun rise
-   `post_set_hr_int` - time in hours (integer) the bat was observed after sun set
-   `pre_rise_hr_int` - time in hours (integer) the bat was observed before sun rise\
-   `night_length_hr` - night length in hours (decimal) difference between `sunset` and `sunrise`

@tbl-suntimes shows a selection of 5 rows from the `statics` data that includes the columns `Species` and `DateTime` and then calculates the columns listed above, the following columns are shown: `sunset`, `post_set_min`, `post_set_hr` and, `post_set_hr_int`.

```{r}
#| label: tbl-suntimes
#| tbl-cap: "Sun Time Information from the Night and DateTime Columns"

### Libraries Used
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/

# Install devtools if not installed 
# devtools is used to install the iBats package from GitHub
if(!require(devtools)){
  install.packages("devtools")
}

# If iBats not installed load from Github
if(!require(iBats)){
  devtools::install_github("Nattereri/iBats")
}
library(iBats)
library(gt)

# Add data and time information to the statics data using the iBats::date_time_info
statics_plus <- iBats::date_time_info(statics)

# Add sun and night time metrics to the statics data using the iBats::sun_night_metrics() function.
statics_plus <- iBats::sun_night_metrics(statics_plus)

statics_plus %>% 
  sample_n(5) %>% 
  select(Species, DateTime, sunset, post_set_min, post_set_hr, post_set_hr_int) %>% 
  # Table made with library(gt)
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "pink"),
      cell_text(color = "black"),
      cell_text(weight = "normal")
      ),
    locations = cells_body(
      columns = c(sunset, post_set_min, post_set_hr, post_set_hr_int)
    )
  ) %>% 
  tab_style(
    style = list(
      cell_fill(color = "pink"),
      cell_text(color = "black"),
      cell_text(weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(sunset, post_set_min, post_set_hr, post_set_hr_int)
    )
  )



```

## Common Bat Names

Common bat names are readily understood by the lay reader and should be available for graphs and tables; it is easily added as an additional column using the _Scientific_ names column as a starting point.

By convention scientific names are written as _italic_; to highlight the common names in @tbl-common the column is written in __bold__.

```{r}
#| code-fold: show

library(iBats)

# List of bat common names and the scientific names
BatCommon <- c(
  "Barbastella barbastellus" = "Barbastelle",
  "Myotis alcathoe" = "Alcathoe",
  "Myotis bechsteinii" = "Bechstein's",
  "Myotis brandtii" = "Brandt's",
  "Myotis daubentonii" = "Daubenton's",
  "Myotis mystacinus" = "Whiskered",
  "Myotis spp." = "Myotis",
  "Rhinolophus ferrumequinum" = "Greater horseshoe",
  "Rhinolophus hipposideros" = "Lesser horseshoe",
  "Nyctalus leisleri" = "Leisler's",
  "Plecotus auritus" = "Brown long-eared",
  "Plecotus austriacus" = "Grey long-eared",
  "Pipistrellus nathusii" = "Nathusius pipistrelle",
  "Myotis nattereri" = "Natterer's",
  "Nyctalus noctula" = "Noctule",
  "Nyctalus spp." = "Noctule or Leisler's",
  "Eptesicus serotinus" = "Serotine",
  "Pipistrellus pipistrellus" = "Common pipistrelle",
  "Pipistrellus pygmaeus" = "Soprano pipistrelle",
  "Pipistrellus spp." = "Pipistrelle",
  "Plecotus spp." = "Long-eared")

# From Scientific name create a Common Name Vector 
statics$Common <-  unname(BatCommon[statics$Species])

```


```{r}
#| label: tbl-common
#| tbl-cap: "From the Scientific Name Create a Common Name Vector"

library(tidyverse)
library(gt)

statics %>% 
  sample_n(10) %>% 
  select(Description, DateTime, Species, Common) %>% 
  # Table made with library(gt)
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(Species)
  )) %>% 
     # Make bat common name bold
  tab_style(
    style = list(
      cell_text(weight = "bold")
      ),
    locations = cells_body(
      columns = Common
    )
  )
  

```


## National Grid Coordinates 

Adding a A Country's grid reference coordinates as meta data is useful; it allows a friendly export to other GIS and engineering drawing software (e.g. QGIS, ArcView® and AutoCAD®).  A Country's grid reference coordinates can be transformed from the `Longitude` and `Latitude`; in the tidy `statics` data longitude and latitude are based on the World Geodetic System 1984[^2] (WGS84), the green column in @tbl-NGR shows the British National Grid coordinates obtained from the longitude and latitude.

[^2]: <https://en.wikipedia.org/wiki/World_Geodetic_System>

```{r}
#| code-fold: show
#| warning: false
#| message: false

### Libraries Used 
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/
library(sf) # Simple features access between data and GIS

# Install devtools if not installed 
# devtools is used to install the iBats package from GitHub
if(!require(devtools)){
  install.packages("devtools")
}

# If iBats is not installed load from Github
if(!require(iBats)){
  devtools::install_github("Nattereri/iBats")
}
library(iBats)

# Select Longitude & Latitude from the statics data in the iBats package
lon_lat <- statics %>% 
  select(lon = Longitude, lat = Latitude)

lon_lat = st_as_sf(lon_lat, coords = c("lon", "lat"))

# Set the original coordinate reference system (CRS)
# The EPSG code is used to define the CRS
data_WSG84 = st_set_crs(lon_lat, 4326)

# Transform the existing coordinates to the new projection
# British National Grid is the new projection which as an EPSG:27700
data_BNG = st_transform(data_WSG84, 27700)

# Create simple feature geometry list column
data_BNG_geom <- st_geometry(data_BNG)
nc2 = st_sf(geom=data_BNG_geom)

# retrieve coordinates in matrix form
data_BNG_matrix <- st_coordinates(nc2) 

#Assign Eastings and Northings to seperate columns
Easting <- data_BNG_matrix[,1]
Northing <- data_BNG_matrix[,2]

# Make a data.frame
data_BNG_df <- tibble(Easting, Northing)

# Make a British National Grid Reference column ("GridRef) 
# keep the Easting & Northings columns
data_BNG_df <- data_BNG_df %>% 
  unite("GridRef", c("Easting", "Northing"), sep = ",", remove = FALSE) 

# Add columns to the statics data set
statics_plus <- cbind(statics, data_BNG_df)

```

```{r}
#| label: tbl-NGR
#| tbl-cap: "From the Longitude and Latitude Create a Vector of the British National Grid Coordinates"

library(tidyverse)
library(gt)

statics_plus %>% 
  sample_n(10) %>% 
  select(Species, Longitude, Latitude, GridRef) %>% 
  # Table made with library(gt)
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(Species)
  )) %>% 
  tab_style(
    style = list(
      cell_fill(color = "forestgreen"),
      cell_text(color = "white"),
      cell_text(weight = "normal")
      ),
    locations = cells_body(
      columns = c(GridRef)
    )
  ) %>% 
  tab_style(
    style = list(
      cell_fill(color = "forestgreen"),
      cell_text(color = "white"),
      cell_text(weight = "normal")
      ),
    locations = cells_column_labels(
      columns = c(GridRef)
    )
  )
  

```


## Bat Activity Time  

The limitation of _bat passes_ has been recognised [@sowler_bat_2013], bat identification software that use full spectrum recording, generate other characteristics from a bat call, or sequence of calls; these characteristics can be used to calculate other indices of activity. Elekon's BatExplorer[^3] and Wildlife Acoustics' Kaleidoscope[^4] produce the number of `calls` or `pulses` in an recording together with the:

[^3]: <http://www.batlogger.com/en/real-time-systems/batexplorer-2-software.html>
[^4]: <https://www.wildlifeacoustics.com/products/kaleidoscope-software-ultrasonic>

* average `duration` of the call or sequence of calls    
* average `span` of time between calls

The `calls`, `duration` and `span` characteristics, see @fig-btm, supply an opportunity to calculate the time a bat is present (i.e near the detector); this _bat activity time_ provides the length of time a bat is nearby during the _observation_, and is a helpful measurement when assessing bat activity.

The _Bat Activity Time_ , in seconds, can be calculated with @eq-btm:

$$BatActivityTime\ =\ \dfrac{calls\left(duration\ + span\right)}{1000}$$ {#eq-btm}

_Where:_  
*__calls__* - number of calls  
*__duration__* - average call length (ms)       
*__span__* - average time between calls (ms)    
The division by *__1000__* is to convert milliseconds(ms) to seconds   


![Calculating Bat Activity Time](Images/BTM2.png){#fig-btm}

@tbl-BatActivityTime shows the calculated `BatActivityTime` from a .csv file(`BatExplorer`) exported from Elekon AG BatExplorer software.  The `BatExplorer` csv file is in the *iBats* package and describes a transect recorded with a Batlogger M bat detector near the the River Tavy, West Devon.

```{r}
#| code-fold: show
#| warning: false
#| message: false
#| eval: false

### Libraries Used 
library(tidyverse) # Data Science packages - see https://www.tidyverse.org/

# Install devtools if not installed 
# devtools is used to install the iBats package from GitHub
if(!require(devtools)){
  install.packages("devtools")
}

# If iBats is not installed load from Github
if(!require(iBats)){
  devtools::install_github("Nattereri/iBats")
}
library(iBats)

# BatExplorer csv file is from the iBats package
BatExplorer %>% 
  mutate(calls = `Calls [#]`,
         duration = `Mean Call Lenght [ms]`,
         span = `Mean Call Distance [ms]`,
         # Calculate BatActivityTime in seconds
         BatActivityTime = calls * (duration + span) / 1000) 

```


```{r}
#| label: tbl-BatActivityTime
#| tbl-cap: "BatActivityTime from a .csv exported from BatExplorer"

library(gt)

BatExplorer %>% 
  mutate(calls = `Calls [#]`,
         duration = `Mean Call Lenght [ms]`,
         span = `Mean Call Distance [ms]`,
         # Calculate BatActivityTime in seconds
         BatActivityTime = calls * (duration + span) / 1000) %>% 
  #Select just the columns used in the calculation and a few rows of data
  select(Species = `Species Text`, 
         calls, 
         duration, 
         span, 
         `BatActivityTime (seconds)` = BatActivityTime) %>% 
  head(n=10L) %>% 
  # Table made with library(gt)
  gt() %>% 
  tab_style(
    style = list(
      cell_fill(color = "black"),
      cell_text(color = "white", weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(everything())
    )
  ) %>% 
  # Make bat scientific name italic
  tab_style(
    style = list(
      cell_text(style = "italic")
      ),
    locations = cells_body(
      columns = c(Species)
  )) %>% 
  tab_style(
    style = list(
      cell_fill(color = "wheat"),
      cell_text(color = "black"),
      cell_text(weight = "bold")
      ),
    locations = cells_body(
      columns = c(`BatActivityTime (seconds)`)
    )
  ) %>% 
  tab_style(
    style = list(
      cell_fill(color = "wheat"),
      cell_text(color = "black"),
      cell_text(weight = "bold")
      ),
    locations = cells_column_labels(
      columns = c(`BatActivityTime (seconds)`)
    )
  )

```

